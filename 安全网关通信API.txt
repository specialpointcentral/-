
安全网关 - 事件处理及通信协议文档 [2018.3.12]

更新内容：
    v2：
        3.通信协议-日志管理-基本规则告警函数重新命名
        增加5. 客户端=>服务端 操作码表及回调函数表
        增加6. 客户端<=服务端 操作码表及回调函数表
        修正一些重复
    v3：
	函数名以命名列表为准
	6. 客户端<=服务端 操作码表及回调函数表：更正了重复的函数名，特别是日志管理部分；
	增加了命名的基本规范；
    v5:
        之前OPFS_RuleS7Wl_Import             FFS_RuleS7Wl_Import
            OPFS_RuleS7Wl_Export             FFS_RuleS7Wl_Export
        有错误，已改正；
        补充操作码：
            性能监控 FFC_Monitor
            设备上线-连接成功 FFS_Connect_Ok    
            设备上线-连接失败 FFS_Connect_Err   
            状态监测-性能监测收到 FFS_Monitor_Ok

======================================================================================================================================================================================
0.目录
======================================================================================================================================================================================

    1.说明
    2.数据包定义
    3.通信协议
    4.通信过程
    5.附录：客户端=>服务端 操作码表及回调函数表
    6.附录：客户端<=服务端 操作码表及回调函数表
    7.附录：失败原因对照表
    8.客户端数据库表及配置文件定义

======================================================================================================================================================================================
1.说明
======================================================================================================================================================================================

    通信框架
        服务端
            描述：linux硬件服务器设备，里面跑LAMP，运行基于swoole的php服务端模块和web界面（统一管理平台）
        客户端
            描述：安全网关（防火墙）/审计平台客户端
        浏览器
            描述：管理员通过浏览器访问linux硬件服务器设备，并对统一管理平台进行管理

    阅读说明
        文档采用缩进文本形式撰写，建议采用editplus浏览，缩进设定为4个空格，新宋体9号字
        本文档为包含通信协议、服务端事件及处理过程、客户端事件及处理过程
        协议规定所有字段都为主机字节序
        协议规定所有字符串为UTF8编码
        <= 表示服务端向客户端发包；=> 表示客户端向服务端发包
        ()表示取值范围，没有表示无限制；[]表示占用字节数；个别表示说明
        [n]表示占用n字节
        [6t]表示占用n字节，为时间格式：年(1)月(1)日(1)时(1)分(1)秒(1)，一共6字节，其中，年为0时表示2000年，为0xff表示2255年
        [ns]表示占用n字节，为字符串格式，可不含NULL终止符，UTF8编码，如果超过长度，则以前n字节截断
        [2:n]表示长度，占用2字节，长度值为n
        [n]*m表示m个元素，每个元素占n字节
        {xxxx}*n，表示{}内为元素集合，一共有n个元素集合，通常为数据部分
        [last]表示这个包剩余部分为多少字节，就占多少字节
        服务端操作数据库失败，则弹框提示失败并终止操作，具体提示内容见失败原因对照表
        所有自定义的弹框提示文本需要不少于10个字符，比如5个字符再加上“请重新输入”

    开发要求
        服务端
            环境：LAMP，mariadb 10.2 x64，ubuntu 16.04 x64，swoole_1.1.0.1
            编程规范：采用标准php编码规范
            通信过程：采用协议操作码+回调函数编程方式
            安全编程：规定协议字段解析过程中所有字段必须做如下处理：
                1.语法检查：如过字段为windows路径，则需判断是否包含非法字符
                2.边界检查：举例，如果为4字节的ID，则需判断是否为负数；如果为2字节的长度，则需判断是否超过已收到的数据包长度
        客户端
            环境：winxp+win10x64（x64任意版本），C/C++，vs2008/vc6，sqlite3数据库
            工程：多字节字符集
            兼容：windows xp sp2及以上（x86） / win7x64及以上（x64）
            编程规范：标准匈牙利命名法
            通信过程：采用协议操作码+回调函数编程方式
            安全编程：规定协议字段解析过程中所有字段必须做如下处理：
                1.语法检查：如过字段为windows路径，则需判断是否包含非法字符
                2.边界检查：举例，如果为4字节的ID，则需判断是否为负数；如果为2字节的长度，则需判断是否超过已收到的数据包长度

======================================================================================================================================================================================
2.数据包定义
======================================================================================================================================================================================

    通信约定
        传输层协议：TCP
        服务端并发框架：php+swoole
    通信数据包格式
        包头：固定(0xD4)[1]，版本[1]，通信类型[1]，设备编号(数字字母大小写)[8]
            备注：通信类型保留
        包内容：见《通信过程》
    服务端端口：20005

======================================================================================================================================================================================
3.通信协议
======================================================================================================================================================================================

    设备上线
	    => 设备上线[2]，设备编号[8s]、网关名长度[2:n]，网关名[n]、工作模式[1]、CPU占用率[1]、内存占用[1]、告警数量[4]，工作模式[1]  
	    <= 连接成功[2]
	    <= 连接失败[2]，失败原因[1]
    状态监测
        => 性能监控[2]，CPU占用率[1]、内存占用[1]、告警数量总计[4]
        <= 性能监控收到[2]
    网关管理
        网关管理
            事件：刷新 / 点指定页数       【FFS_Manage_Info】
                <= 网关管理-获取[2]
                => 网关管理-获取-结果[2]，网关名称字符串长度[2:n]，网关名称字符串[n]，CPU占用率(0-100%)[1]，内存占用(0-100%)[1]，告警数量[4]，网关编号[8s]，工作模式[1]，上线时间[6t]
                => 网关管理-获取-失败[2]，失败原因[1]
            事件：点“全防护”按钮 / 点“全告警”按钮        【FFS_Manage_ModeSet】
                <= 网关管理-模式设置[2]，工作模式[1]（0告警模式 1防护模式）
                => 网关管理-模式设置-失败[2]，失败原因[1]
                => 网关管理-模式设置-成功[2]
            事件：点“编辑”              【FFS_Manage_Edit】
                <= 网关管理-编辑[2]，网关名长度[2:n]，网关名[n]，工作模式[1]（0告警模式 1防护模式）
            事件：点“删除”              【FFS_Manage_Del】
                <= 断开连接[2]
    TODO 基本规则管理
        ARP规则
            事件：刷新 / 点指定页数       【FFS_RuleArp_List   】
                <= 基本规则管理-ARP规则-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 基本规则管理-ARP规则-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]，MAC地址[6]}+
                => 基本规则管理-ARP规则-获取失败[2]，失败原因[1]
            事件：点“添加”              【FFS_RuleArp_Add    】
                <= 基本规则管理-ARP规则-添加[2]，IP地址[4]，MAC地址[6]
                => 基本规则管理-ARP规则-添加-成功[2]
                => 基本规则管理-ARP规则-添加-失败[2]，失败原因[1]
            事件：点“激活全部”          【FFS_RuleArp_Enable 】
                <= 基本规则管理-ARP规则-激活全部[2]
                => 基本规则管理-ARP规则-激活全部-成功[2]
                => 基本规则管理-ARP规则-激活全部-失败[2]，失败原因[1]
            事件：点“禁用全部”          【FFS_RuleArp_Disable】
                <= 基本规则管理-ARP规则-禁用全部[2]
                => 基本规则管理-ARP规则-禁用全部-成功[2]
                => 基本规则管理-ARP规则-禁用全部-失败[2]，失败原因[1]
            事件：点“全部删除”          【FFS_RuleArp_Cls    】
                <= 基本规则管理-ARP规则-全部删除[2]
                => 基本规则管理-ARP规则-全部删除-成功[2]
                => 基本规则管理-ARP规则-全部删除-失败[2]，失败原因[1]
            事件：点“编辑”              【FFS_RuleArp_Edit   】
                <= 基本规则管理-ARP规则-编辑[2]，源IP地址[4]，新IP地址[4]，MAC地址[6]
                => 基本规则管理-ARP规则-编辑-成功[2]
                => 基本规则管理-ARP规则-编辑-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_RuleArp_Del    】
                <= 基本规则管理-ARP规则-删除[2]，IP地址[4]
                => 基本规则管理-ARP规则-删除-成功[2]
                => 基本规则管理-ARP规则-删除-失败[2]，失败原因[1]
        MAC黑名单
            事件：刷新 / 点指定页数       【FFS_RuleMac_List   】
                <= 基本规则管理-MAC黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 基本规则管理-MAC黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，MAC地址[6]}+
                => 基本规则管理-MAC黑名单-获取失败[2]，失败原因[1]
            事件：点“添加”              【FFS_RuleMac_Add    】
                <= 基本规则管理-MAC黑名单-添加[2]，MAC地址[6]
                => 基本规则管理-MAC黑名单-添加-成功[2]
                => 基本规则管理-MAC黑名单-添加-失败[2]，失败原因[1]
            事件：点“全部删除”          【FFS_RuleMac_Cls 】
                <= 基本规则管理-MAC黑名单-全部删除[2]
                => 基本规则管理-MAC黑名单-全部删除-成功[2]
                => 基本规则管理-MAC黑名单-全部删除-失败[2]，失败原因[1]
            事件：点“激活全部”          【FFS_RuleMac_Enable    】
                <= 基本规则管理-MAC黑名单-激活全部[2]
                => 基本规则管理-MAC黑名单-激活全部-成功[2]
                => 基本规则管理-MAC黑名单-激活全部-失败[2]，失败原因[1]
            事件：点“禁用全部”          【FFS_RuleMac_Disable】
                <= 基本规则管理-MAC黑名单-禁用全部[2]
                => 基本规则管理-MAC黑名单-禁用全部-成功[2]
                => 基本规则管理-MAC黑名单-禁用全部-失败[2]，失败原因[1]
            事件：点“编辑”              【FFS_RuleMac_Edit   】
                <= 基本规则管理-MAC黑名单-编辑[2]，旧MAC地址[6]，新MAC地址[6]
                => 基本规则管理-MAC黑名单-编辑-成功[2]
                => 基本规则管理-MAC黑名单-编辑-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_RuleMac_Del    】
                <= 基本规则管理-MAC黑名单-删除[2]，MAC地址[6]
                => 基本规则管理-MAC黑名单-删除-成功[2]
                => 基本规则管理-MAC黑名单-删除-失败[2]，失败原因[1]
        IP规则
            IP黑名单
                事件：刷新 / 点指定页数   【FFS_RuleIpBl_List   】
                    <= 基本规则管理-IP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-IP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]}+
                    => 基本规则管理-IP黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleIpBl_Add    】
                    <= 基本规则管理-IP黑名单-添加[2]，IP地址[4]
                    => 基本规则管理-IP黑名单-添加-成功[2]
                    => 基本规则管理-IP黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleIpBl_Enable 】
                    <= 基本规则管理-IP黑名单-全部删除[2]
                    => 基本规则管理-IP黑名单-全部删除-成功[2]
                    => 基本规则管理-IP黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleIpBl_Disable】
                    <= 基本规则管理-IP黑名单-激活全部[2]
                    => 基本规则管理-IP黑名单-激活全部-成功[2]
                    => 基本规则管理-IP黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleIpBl_Cls    】
                    <= 基本规则管理-IP黑名单-禁用全部[2]
                    => 基本规则管理-IP黑名单-禁用全部-成功[2]
                    => 基本规则管理-IP黑名单-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleIpBl_Edit   】
                    <= 基本规则管理-IP黑名单-编辑[2]，旧IP地址[4]，新IP地址[4]
                    => 基本规则管理-IP黑名单-编辑-成功[2]
                    => 基本规则管理-IP黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleIpBl_Del    】
                    <= 基本规则管理-IP黑名单-删除[2]，IP地址[4]
                    => 基本规则管理-IP黑名单-删除-成功[2]
                    => 基本规则管理-IP黑名单-删除-失败[2]，失败原因[1]
            IP用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleIpAu_List   】
                    <= 基本规则管理-IP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-IP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]}+
                    => 基本规则管理-IP用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleIpAu_Add    】
                    <= 基本规则管理-IP用户自定义-添加[2]，IP地址[4]，告警级别[1]
                    => 基本规则管理-IP用户自定义-添加-成功[2]
                    => 基本规则管理-IP用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleIpAu_Enable 】
                    <= 基本规则管理-IP用户自定义-全部删除[2]
                    => 基本规则管理-IP用户自定义-全部删除-成功[2]
                    => 基本规则管理-IP用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleIpAu_Edit   】
                    <= 基本规则管理-IP用户自定义-编辑[2]，旧IP地址[4]，新IP地址[4]，告警级别[1]
                    => 基本规则管理-IP用户自定义-编辑-成功[2]
                    => 基本规则管理-IP用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleIpAu_Del    】
                    <= 基本规则管理-IP黑名单-删除[2]，IP地址[4]
                    => 基本规则管理-IP黑名单-删除-成功[2]
                    => 基本规则管理-IP黑名单-删除-失败[2]，失败原因[1]
        安全域规则
            优先级配置
                事件：刷新 / 点指定页数   【FFS_RuleSzPri_List   】
                    <= 基本规则管理-优先级配置-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-优先级配置-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，名称长度[2:n]，名称[n]，优先级ID[1]}+
                    => 基本规则管理-优先级配置-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleSzPri_Add    】
                    <= 基本规则管理-优先级配置-添加[2]，名称长度[2:n]，名称[n]，优先级ID[1]
                    => 基本规则管理-优先级配置-添加-成功[2]
                    => 基本规则管理-优先级配置-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleSzPri_Enable 】
                    <= 基本规则管理-优先级配置-全部删除[2]
                    => 基本规则管理-优先级配置-全部删除-成功[2]
                    => 基本规则管理-优先级配置-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleSzPri_Edit   】
                    <= 基本规则管理-优先级配置-编辑[2]，数据库ID[4]，名称长度[2:n]，名称[n]，优先级ID[1]
                    => 基本规则管理-优先级配置-编辑-成功[2]
                    => 基本规则管理-优先级配置-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleSzPri_Del    】
                    <= 基本规则管理-优先级配置-删除[2]，数据库ID[4]
                    => 基本规则管理-优先级配置-删除-成功[2]
                    => 基本规则管理-优先级配置-删除-失败[2]，失败原因[1]
            MAC安全域
                事件：刷新 / 点指定页数   【FFS_RuleSzMac_List   】
                    <= 基本规则管理-MAC安全域-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-MAC安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，MAC地址[6]，优先级ID[1]}+
                    => 基本规则管理-MAC安全域-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleSzMac_Add    】
                    <= 基本规则管理-MAC安全域-添加[2]，MAC地址[6]，优先级ID[1]
                    => 基本规则管理-MAC安全域-添加-成功[2]
                    => 基本规则管理-MAC安全域-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleSzMac_Enable 】
                    <= 基本规则管理-MAC安全域-全部删除[2]
                    => 基本规则管理-MAC安全域-全部删除-成功[2]
                    => 基本规则管理-MAC安全域-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleSzMac_Disable】
                    <= 基本规则管理-MAC安全域-激活全部[2]
                    => 基本规则管理-MAC安全域-激活全部-成功[2]
                    => 基本规则管理-MAC安全域-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleSzMac_Cls    】
                    <= 基本规则管理-MAC安全域-禁用全部[2]
                    => 基本规则管理-MAC安全域-禁用全部-成功[2]
                    => 基本规则管理-MAC安全域-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleSzMac_Edit   】
                    <= 基本规则管理-MAC安全域-编辑[2]，旧数据库ID[4]，MAC地址[6]，优先级ID[1]
                    => 基本规则管理-MAC安全域-编辑-成功[2]
                    => 基本规则管理-MAC安全域-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleSzMac_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-MAC安全域-删除-成功[2]
                    => 基本规则管理-MAC安全域-删除-失败[2]，失败原因[1]
            IP安全域
                事件：刷新 / 点指定页数   【FFS_RuleSzIp_List   】
                    <= 基本规则管理-IP安全域-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-IP安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]，掩码[4]，优先级ID[1]}+
                    => 基本规则管理-IP安全域-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleSzIp_Add    】
                    <= 基本规则管理-IP安全域-添加[2]，IP地址[4]，掩码[4]，优先级ID[1]
                    => 基本规则管理-IP安全域-添加-成功[2]
                    => 基本规则管理-IP安全域-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleSzIp_Enable 】
                    <= 基本规则管理-IP安全域-全部删除[2]
                    => 基本规则管理-IP安全域-全部删除-成功[2]
                    => 基本规则管理-IP安全域-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleSzIp_Disable】
                    <= 基本规则管理-IP安全域-激活全部[2]
                    => 基本规则管理-IP安全域-激活全部-成功[2]
                    => 基本规则管理-IP安全域-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleSzIp_Cls    】
                    <= 基本规则管理-IP安全域-禁用全部[2]
                    => 基本规则管理-IP安全域-禁用全部-成功[2]
                    => 基本规则管理-IP安全域-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleSzIp_Edit   】
                    <= 基本规则管理-IP安全域-编辑[2]，旧数据库ID[4]，IP地址[4]，掩码[4]，优先级ID[1]
                    => 基本规则管理-IP安全域-编辑-成功[2]
                    => 基本规则管理-IP安全域-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleSzIp_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-IP安全域-删除-成功[2]
                    => 基本规则管理-IP安全域-删除-失败[2]，失败原因[1]
            传输层安全域
                事件：刷新 / 点指定页数   【FFS_RuleSzTrans_List   】
                    <= 基本规则管理-传输层安全域-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-传输层安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4], 掩码[4], 起始端口[2], 目的端口[2], 优先级[1]}+
                    => 基本规则管理-传输层安全域-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleSzTrans_Add    】
                    <= 基本规则管理-传输层安全域-添加[2]，IP地址[4], 掩码[4], 起始端口[2], 目的端口[2], 优先级[1]
                    => 基本规则管理-传输层安全域-添加-成功[2]
                    => 基本规则管理-传输层安全域-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleSzTrans_Enable 】
                    <= 基本规则管理-传输层安全域-全部删除[2]
                    => 基本规则管理-传输层安全域-全部删除-成功[2]
                    => 基本规则管理-传输层安全域-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleSzTrans_Disable】
                    <= 基本规则管理-传输层安全域-激活全部[2]
                    => 基本规则管理-传输层安全域-激活全部-成功[2]
                    => 基本规则管理-传输层安全域-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleSzTrans_Cls    】
                    <= 基本规则管理-传输层安全域-禁用全部[2]
                    => 基本规则管理-传输层安全域-禁用全部-成功[2]
                    => 基本规则管理-传输层安全域-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleSzTrans_Edit   】
                    <= 基本规则管理-传输层安全域-编辑[2]，旧数据库ID[4]，IP地址[4], 掩码[4], 起始端口[2], 目的端口[2], 优先级[1]
                    => 基本规则管理-传输层安全域-编辑-成功[2]
                    => 基本规则管理-传输层安全域-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleSzTrans_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-传输层安全域-删除-成功[2]
                    => 基本规则管理-传输层安全域-删除-失败[2]，失败原因[1]
        TCP规则
            TCP黑名单
                事件：刷新 / 点指定页数   【FFS_RuleTcpBl_List   】
                    <= 基本规则管理-TCP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-TCP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-TCP黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleTcpBl_Add    】
                    <= 基本规则管理-TCP黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-TCP黑名单-添加-成功[2]
                    => 基本规则管理-TCP黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleTcpBl_Enable 】
                    <= 基本规则管理-TCP黑名单-全部删除[2]
                    => 基本规则管理-TCP黑名单-全部删除-成功[2]
                    => 基本规则管理-TCP黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleTcpBl_Disable】
                    <= 基本规则管理-TCP黑名单-激活全部[2]
                    => 基本规则管理-TCP黑名单-激活全部-成功[2]
                    => 基本规则管理-TCP黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleTcpBl_Cls    】
                    <= 基本规则管理-TCP黑名单-激活全部[2]
                    => 基本规则管理-TCP黑名单-激活全部-成功[2]
                    => 基本规则管理-TCP黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleTcpBl_Edit   】
                    <= 基本规则管理-TCP黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-TCP黑名单-编辑-成功[2]
                    => 基本规则管理-TCP黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleTcpBl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-TCP黑名单-删除-成功[2]
                    => 基本规则管理-TCP黑名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleTcpBl_Import 】
                    do
                    {
                    <= 基本规则管理-单条-TCP黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-单条-TCP黑名单-导入-成功[2]
                    => 基本规则管理-单条-TCP黑名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-TCP黑名单-完毕请指示[2]
                    => 基本规则管理-所有-TCP黑名单-成功[2]
                    => 基本规则管理-所有-TCP黑名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleTcpBl_Export 】
                    <= 基本规则管理-TCP黑名单-导出[2]
                    => 基本规则管理-TCP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-TCP黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP黑名单-导出-失败[2]，失败原因[1]
            TCP白名单
                事件：刷新 / 点指定页数   【FFS_RuleTcpWl_List   】
                    <= 基本规则管理-TCP白名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-TCP白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-TCP白名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleTcpWl_Add    】
                    <= 基本规则管理-TCP白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-TCP白名单-添加-成功[2]
                    => 基本规则管理-TCP白名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleTcpWl_Enable 】
                    <= 基本规则管理-TCP白名单-全部删除[2]
                    => 基本规则管理-TCP白名单-全部删除-成功[2]
                    => 基本规则管理-TCP白名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleTcpWl_Disable】
                    <= 基本规则管理-TCP白名单-激活全部[2]
                    => 基本规则管理-TCP白名单-激活全部-成功[2]
                    => 基本规则管理-TCP白名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleTcpWl_Cls    】
                    <= 基本规则管理-TCP白名单-禁用全部[2]
                    => 基本规则管理-TCP白名单-禁用全部-成功[2]
                    => 基本规则管理-TCP白名单-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleTcpWl_Edit   】
                    <= 基本规则管理-TCP白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-TCP白名单-编辑-成功[2]
                    => 基本规则管理-TCP白名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleTcpWl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-TCP白名单-删除-成功[2]
                    => 基本规则管理-TCP白名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleTcpWl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-TCP白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-单条-TCP白名单-导入-成功[2]
                    => 基本规则管理-单条-TCP白名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-TCP白名单-完毕请指示[2]
                    => 基本规则管理-所有-TCP白名单-成功[2]
                    => 基本规则管理-所有-TCP白名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleTcpWl_Export 】
                    <= 基本规则管理-TCP白名单-导出[2]
                    => 基本规则管理-TCP白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-TCP白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP白名单-导出-失败[2]，失败原因[1]
            TCP无条件信任
                事件：刷新 / 点指定页数   【FFS_RuleTcpTrust_List   】
                    <= 基本规则管理-TCP无条件信任-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-TCP无条件信任-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-TCP无条件信任-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleTcpTrust_Add    】
                    <= 基本规则管理-TCP无条件信任-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-TCP无条件信任-添加-成功[2]
                    => 基本规则管理-TCP无条件信任-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleTcpTrust_Enable 】
                    <= 基本规则管理-TCP无条件信任-全部删除[2]
                    => 基本规则管理-TCP无条件信任-全部删除-成功[2]
                    => 基本规则管理-TCP无条件信任-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleTcpTrust_Edit   】
                    <= 基本规则管理-TCP无条件信任-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-TCP无条件信任-编辑-成功[2]
                    => 基本规则管理-TCP无条件信任-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleTcpTrust_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-TCP无条件信任-删除-成功[2]
                    => 基本规则管理-TCP无条件信任-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleTcpTrust_Import 】
                    do
                    {
                        <= 基本规则管理-单条-TCP无条件信任-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-单条-TCP无条件信任-导入-成功[2]
                    => 基本规则管理-单条-TCP无条件信任-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-TCP无条件信任-完毕请指示[2]
                    => 基本规则管理-所有-TCP无条件信任-成功[2]
                    => 基本规则管理-所有-TCP无条件信任-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleTcpTrust_Export 】
                    <= 基本规则管理-TCP无条件信任-导出[2]
                    => 基本规则管理-TCP无条件信任-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-TCP无条件信任-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP无条件信任-导出-失败[2]，失败原因[1]
            TCP用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleTcpAu_List   】
                    <= 基本规则管理-TCP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-TCP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]}+
                    => 基本规则管理-TCP用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleTcpAu_Add    】
                    <= 基本规则管理-TCP用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                    => 基本规则管理-TCP用户自定义-添加-成功[2]
                    => 基本规则管理-TCP用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleTcpAu_Enable 】
                    <= 基本规则管理-TCP用户自定义-全部删除[2]
                    => 基本规则管理-TCP用户自定义-全部删除-成功[2]
                    => 基本规则管理-TCP用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleTcpAu_Edit   】
                    <= 基本规则管理-TCP用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                    => 基本规则管理-TCP用户自定义-编辑-成功[2]
                    => 基本规则管理-TCP用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleTcpAu_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-TCP用户自定义-删除-成功[2]
                    => 基本规则管理-TCP用户自定义-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleTcpAu_Import 】
                    do
                    {
                        <= 基本规则管理-单条-TCP用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                    => 基本规则管理-单条-TCP用户自定义-导入-成功[2]
                    => 基本规则管理-单条-TCP用户自定义-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-TCP用户自定义-完毕请指示[2]
                    => 基本规则管理-所有-TCP用户自定义-成功[2]
                    => 基本规则管理-所有-TCP用户自定义-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleTcpAu_Export 】
                    <= 基本规则管理-TCP用户自定义-导出[2]
                    => 基本规则管理-TCP用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-TCP用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP用户自定义-导出-失败[2]，失败原因[1]
        UDP规则
            UDP黑名单
                事件：刷新 / 点指定页数   【FFS_RuleUdpBl_List   】
                    <= 基本规则管理-UDP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-UDP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-UDP黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleUdpBl_Add    】
                    <= 基本规则管理-UDP黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-UDP黑名单-添加-成功[2]
                    => 基本规则管理-UDP黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleUdpBl_Enable 】
                    <= 基本规则管理-UDP黑名单-全部删除[2]
                    => 基本规则管理-UDP黑名单-全部删除-成功[2]
                    => 基本规则管理-UDP黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleUdpBl_Disable】
                    <= 基本规则管理-UDP黑名单-激活全部[2]
                    => 基本规则管理-UDP黑名单-激活全部-成功[2]
                    => 基本规则管理-UDP黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleUdpBl_Cls    】
                                <= 基本规则管理-UDP黑名单-激活全部[2]
                    => 基本规则管理-UDP黑名单-激活全部-成功[2]
                    => 基本规则管理-UDP黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleUdpBl_Edit   】
                    <= 基本规则管理-UDP黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-UDP黑名单-编辑-成功[2]
                    => 基本规则管理-UDP黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleUdpBl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-UDP黑名单-删除-成功[2]
                    => 基本规则管理-UDP黑名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleUdpBl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-UDP黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-单条-UDP黑名单-导入-成功[2]
                    => 基本规则管理-单条-UDP黑名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-UDP黑名单-完毕请指示[2]
                    => 基本规则管理-所有-UDP黑名单-成功[2]
                    => 基本规则管理-所有-UDP黑名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleUdpBl_Export 】
                    <= 基本规则管理-UDP黑名单-导出[2]
                    => 基本规则管理-UDP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-UDP黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP黑名单-导出-失败[2]，失败原因[1]
            UDP白名单
                事件：刷新 / 点指定页数   【FFS_RuleUdpWl_List   】
                    <= 基本规则管理-UDP白名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-UDP白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-UDP白名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleUdpWl_Add    】
                    <= 基本规则管理-UDP白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-UDP白名单-添加-成功[2]
                    => 基本规则管理-UDP白名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleUdpWl_Enable 】
                    <= 基本规则管理-UDP白名单-全部删除[2]
                    => 基本规则管理-UDP白名单-全部删除-成功[2]
                    => 基本规则管理-UDP白名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleUdpWl_Disable】
                    <= 基本规则管理-UDP白名单-激活全部[2]
                    => 基本规则管理-UDP白名单-激活全部-成功[2]
                    => 基本规则管理-UDP白名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleUdpWl_Cls    】
                    <= 基本规则管理-UDP白名单-激活全部[2]
                    => 基本规则管理-UDP白名单-激活全部-成功[2]
                    => 基本规则管理-UDP白名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleUdpWl_Edit   】
                    <= 基本规则管理-UDP白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-UDP白名单-编辑-成功[2]
                    => 基本规则管理-UDP白名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleUdpWl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-UDP白名单-删除-成功[2]
                    => 基本规则管理-UDP白名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleUdpWl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-UDP白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-单条-UDP白名单-导入-成功[2]
                    => 基本规则管理-单条-UDP白名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-UDP白名单-完毕请指示[2]
                    => 基本规则管理-所有-UDP白名单-成功[2]
                    => 基本规则管理-所有-UDP白名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleUdpWl_Export 】
                    <= 基本规则管理-UDP白名单-导出[2]
                    => 基本规则管理-UDP白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-UDP白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP白名单-导出-失败[2]，失败原因[1]
            UDP无条件信任
                事件：刷新 / 点指定页数   【FFS_RuleUdpTrust_List   】
                    <= 基本规则管理-UDP无条件信任-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-UDP无条件信任-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-UDP无条件信任-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleUdpTrust_Add    】
                    <= 基本规则管理-UDP无条件信任-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-UDP无条件信任-添加-成功[2]
                    => 基本规则管理-UDP无条件信任-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleUdpTrust_Enable 】
                    <= 基本规则管理-UDP无条件信任-全部删除[2]
                    => 基本规则管理-UDP无条件信任-全部删除-成功[2]
                    => 基本规则管理-UDP无条件信任-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleUdpTrust_Edit   】
                    <= 基本规则管理-UDP无条件信任-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-UDP无条件信任-编辑-成功[2]
                    => 基本规则管理-UDP无条件信任-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleUdpTrust_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-UDP无条件信任-删除-成功[2]
                    => 基本规则管理-UDP无条件信任-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleUdpTrust_Import 】
                    do
                    {
                        <= 基本规则管理-单条-UDP无条件信任-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    => 基本规则管理-单条-UDP无条件信任-导入-成功[2]
                    => 基本规则管理-单条-UDP无条件信任-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-UDP无条件信任-完毕请指示[2]
                    => 基本规则管理-所有-UDP无条件信任-成功[2]
                    => 基本规则管理-所有-UDP无条件信任-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleUdpTrust_Export 】
                    <= 基本规则管理-UDP无条件信任-导出[2]
                    => 基本规则管理-UDP无条件信任-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-UDP无条件信任-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP无条件信任-导出-失败[2]，失败原因[1]
            UDP用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleUdpAu_List   】
                    <= 基本规则管理-TCP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 基本规则管理-UDP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]}+
                    => 基本规则管理-UDP用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleUdpAu_Add    】
                    <= 基本规则管理-UDP用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2] ，告警级别[1]
                    => 基本规则管理-UDP用户自定义-添加-成功[2]
                    => 基本规则管理-UDP用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleUdpAu_Enable 】
                    <= 基本规则管理-UDP用户自定义-全部删除[2]
                    => 基本规则管理-UDP用户自定义-全部删除-成功[2]
                    => 基本规则管理-UDP用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleUdpAu_Edit   】
                    <= 基本规则管理-UDP用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2] ，告警级别[1]
                    => 基本规则管理-UDP用户自定义-编辑-成功[2]
                    => 基本规则管理-UDP用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleUdpAu_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]
                    => 基本规则管理-UDP用户自定义-删除-成功[2]
                    => 基本规则管理-UDP用户自定义-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleUdpAu_Import 】
                    do
                    {
                        <= 基本规则管理-单条-UDP用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                    => 基本规则管理-单条-UDP用户自定义-导入-成功[2]
                    => 基本规则管理-单条-UDP用户自定义-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-UDP用户自定义-完毕请指示[2]
                    => 基本规则管理-所有-UDP用户自定义-成功[2]
                    => 基本规则管理-所有-UDP用户自定义-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleUdpAu_Export 】
                    <= 基本规则管理-UDP用户自定义-导出[2]
                    => 基本规则管理-UDP用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-UDP用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP用户自定义-导出-失败[2]，失败原因[1]
    工控规则管理
        ModbusTCP规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleModbusBl_List   】
                    <= 工控规则管理-ModbusTCP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-ModbusTCP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]}+
                    => 工控规则管理-ModbusTCP黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleModbusBl_Add    】
                    <= 工控规则管理-ModbusTCP黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    => 工控规则管理-ModbusTCP黑名单-添加-成功[2]
                    => 工控规则管理-ModbusTCP黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleModbusBl_Cls    】
                    <= 工控规则管理-ModbusTCP黑名单-全部删除[2]
                    => 工控规则管理-ModbusTCP黑名单-全部删除-成功[2]
                    => 工控规则管理-ModbusTCP黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleModbusBl_Enable 】
                    <= 工控规则管理-ModbusTCP黑名单-激活全部[2]
                    => 工控规则管理-ModbusTCP黑名单-激活全部-成功[2]
                    => 工控规则管理-ModbusTCP黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleModbusBl_Disable】
                    <= 工控规则管理-ModbusTCP黑名单-禁用全部[2]
                    => 工控规则管理-ModbusTCP黑名单-禁用全部-成功[2]
                    => 工控规则管理-ModbusTCP黑名单-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleModbusBl_Edit   】
                    <= 工控规则管理-ModbusTCP黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    => 工控规则管理-ModbusTCP黑名单-编辑-成功[2]
                    => 工控规则管理-ModbusTCP黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleModbusBl_Del    】
                    <= 工控规则管理-ModbusTCP黑名单-删除[2]，数据库ID[4]
                    => 工控规则管理-ModbusTCP黑名单-删除-成功[2]
                    => 工控规则管理-ModbusTCP黑名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleModbusBl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-ModbusTCP黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    => 基本规则管理-单条-ModbusTCP黑名单-导入-成功[2]
                    => 基本规则管理-单条-ModbusTCP黑名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-ModbusTCP黑名单-完毕请指示[2]
                    => 基本规则管理-所有-ModbusTCP黑名单-成功[2]
                    => 基本规则管理-所有-ModbusTCP黑名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleModbusBl_Export 】
                    <= 基本规则管理-ModbusTCP黑名单-导出[2]
                    => 基本规则管理-ModbusTCP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-ModbusTCP黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-ModbusTCP黑名单-导出-失败[2]，失败原因[1]
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleModbusWl_List   】
                    <= 工控规则管理-ModbusTCP白名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-ModbusTCP白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]}+
                    => 工控规则管理-ModbusTCP白名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleModbusWl_Add    】
                    <= 工控规则管理-ModbusTCP白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    => 工控规则管理-ModbusTCP白名单-添加-成功[2]
                    => 工控规则管理-ModbusTCP白名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleModbusWl_Cls    】
                    <= 工控规则管理-ModbusTCP白名单-全部删除[2]
                    => 工控规则管理-ModbusTCP白名单-全部删除-成功[2]
                    => 工控规则管理-ModbusTCP白名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleModbusWl_Enable 】
                    <= 工控规则管理-ModbusTCP白名单-激活全部[2]
                    => 工控规则管理-ModbusTCP白名单-激活全部-成功[2]
                    => 工控规则管理-ModbusTCP白名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleModbusWl_Disable】
                    <= 工控规则管理-ModbusTCP白名单-禁用全部[2]
                    => 工控规则管理-ModbusTCP白名单-禁用全部-成功[2]
                    => 工控规则管理-ModbusTCP白名单-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleModbusWl_Edit   】
                    <= 工控规则管理-ModbusTCP白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    => 工控规则管理-ModbusTCP白名单-编辑-成功[2]
                    => 工控规则管理-ModbusTCP白名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleModbusWl_Del    】
                    <= 工控规则管理-ModbusTCP白名单-删除[2]，数据库ID[4]
                    => 工控规则管理-ModbusTCP白名单-删除-成功[2]
                    => 工控规则管理-ModbusTCP白名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleModbusWl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-ModbusTCP白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    => 基本规则管理-单条-ModbusTCP白名单-导入-成功[2]
                    => 基本规则管理-单条-ModbusTCP白名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-ModbusTCP白名单-完毕请指示[2]
                    => 基本规则管理-所有-ModbusTCP白名单-成功[2]
                    => 基本规则管理-所有-ModbusTCP白名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleModbusWl_Export 】
                    <= 基本规则管理-ModbusTCP白名单-导出[2]
                    => 基本规则管理-ModbusTCP白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-ModbusTCP白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-ModbusTCP白名单-导出-失败[2]，失败原因[1]
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleModbusAu_List   】
                    <= 工控规则管理-ModbusTCP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-ModbusTCP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]}+
                    => 工控规则管理-ModbusTCP用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleModbusAu_Add    】
                    <= 工控规则管理-ModbusTCP用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]
                    => 工控规则管理-ModbusTCP用户自定义-添加-成功[2]
                    => 工控规则管理-ModbusTCP用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleModbusAu_Enable 】
                    <= 工控规则管理-ModbusTCP用户自定义-全部删除[2]
                    => 工控规则管理-ModbusTCP用户自定义-全部删除-成功[2]
                    => 工控规则管理-ModbusTCP用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleModbusAu_Edit   】
                    <= 工控规则管理-ModbusTCP用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]
                    => 工控规则管理-ModbusTCP用户自定义-编辑-成功[2]
                    => 工控规则管理-ModbusTCP用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleModbusAu_Del    】
                    <= 工控规则管理-ModbusTCP用户自定义-删除[2]，数据库ID[4]
                    => 工控规则管理-ModbusTCP用户自定义-删除-成功[2]
                    => 工控规则管理-ModbusTCP用户自定义-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleModbusAu_Import 】
                    do
                    {
                        <= 基本规则管理-单条-ModbusTCP用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]
                    => 基本规则管理-单条-ModbusTCP用户自定义-导入-成功[2]
                    => 基本规则管理-单条-ModbusTCP用户自定义-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-ModbusTCP用户自定义-完毕请指示[2]
                    => 基本规则管理-所有-ModbusTCP用户自定义-成功[2]
                    => 基本规则管理-所有-ModbusTCP用户自定义-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleModbusAu_Export 】
                    <= 基本规则管理-ModbusTCP用户自定义-导出[2]
                    => 基本规则管理-ModbusTCP用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-ModbusTCP用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-ModbusTCP用户自定义-导出-失败[2]，失败原因[1]
        IEC104规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleIec104Bl_List   】
                    <= 工控规则管理-IEC104黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-IEC104黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]}+
                    => 工控规则管理-IEC104黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleIec104Bl_Add    】
                    <= 工控规则管理-IEC104黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    => 工控规则管理-IEC104黑名单-添加-成功[2]
                    => 工控规则管理-IEC104黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleIec104Bl_Cls    】
                    <= 工控规则管理-IEC104黑名单-全部删除[2]
                    => 工控规则管理-IEC104黑名单-全部删除-成功[2]
                    => 工控规则管理-IEC104黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleIec104Bl_Enable 】
                    <= 工控规则管理-IEC104黑名单-激活全部[2]
                    => 工控规则管理-IEC104黑名单-激活全部-成功[2]
                    => 工控规则管理-IEC104黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleIec104Bl_Disable】
                    <= 工控规则管理-IEC104黑名单-禁用全部[2]
                    => 工控规则管理-IEC104黑名单-禁用全部-成功[2]
                    => 工控规则管理-IEC104黑名单-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleIec104Bl_Edit   】
                    <= 工控规则管理-IEC104黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    => 工控规则管理-IEC104黑名单-编辑-成功[2]
                    => 工控规则管理-IEC104黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleIec104Bl_Del    】
                    <= 工控规则管理-IEC104黑名单-删除[2]，数据库ID[4]
                    => 工控规则管理-IEC104黑名单-删除-成功[2]
                    => 工控规则管理-IEC104黑名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleIec104Bl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-IEC104黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    => 基本规则管理-单条-IEC104黑名单-导入-成功[2]
                    => 基本规则管理-单条-IEC104黑名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-IEC104黑名单-完毕请指示[2]
                    => 基本规则管理-所有-IEC104黑名单-成功[2]
                    => 基本规则管理-所有-IEC104黑名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleIec104Bl_Export 】
                    <= 基本规则管理-IEC104黑名单-导出[2]
                    => 基本规则管理-IEC104黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-IEC104黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-IEC104黑名单-导出-失败[2]，失败原因[1]
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleIec104Wl_List   】
                    <= 工控规则管理-IEC104白名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-IEC104白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]}+
                    => 工控规则管理-IEC104白名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleIec104Wl_Add    】
                    <= 工控规则管理-IEC104白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    => 工控规则管理-IEC104白名单-添加-成功[2]
                    => 工控规则管理-IEC104白名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleIec104Wl_Cls    】
                    <= 工控规则管理-IEC104白名单-全部删除[2]
                    => 工控规则管理-IEC104白名单-全部删除-成功[2]
                    => 工控规则管理-IEC104白名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleIec104Wl_Enable 】
                    <= 工控规则管理-IEC104白名单-激活全部[2]
                    => 工控规则管理-IEC104白名单-激活全部-成功[2]
                    => 工控规则管理-IEC104白名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleIec104Wl_Disable】
                    <= 工控规则管理-IEC104白名单-禁用全部[2]
                    => 工控规则管理-IEC104白名单-禁用全部-成功[2]
                    => 工控规则管理-IEC104白名单-禁用全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleIec104Wl_Edit   】
                    <= 工控规则管理-IEC104白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    => 工控规则管理-IEC104白名单-编辑-成功[2]
                    => 工控规则管理-IEC104白名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleIec104Wl_Del    】
                    <= 工控规则管理-IEC104白名单-删除[2]，数据库ID[4]
                    => 工控规则管理-IEC104白名单-删除-成功[2]
                    => 工控规则管理-IEC104白名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleIec104Wl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-IEC104白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    => 基本规则管理-单条-IEC104白名单-导入-成功[2]
                    => 基本规则管理-单条-IEC104白名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-IEC104白名单-完毕请指示[2]
                    => 基本规则管理-所有-IEC104白名单-成功[2]
                    => 基本规则管理-所有-IEC104白名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleIec104Wl_Export 】
                    <= 基本规则管理-IEC104白名单-导出[2]
                    => 基本规则管理-IEC104白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-IEC104白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-IEC104白名单-导出-失败[2]，失败原因[1]
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleIec104Au_List   】
                    <= 工控规则管理-IEC104用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-IEC104用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]，告警级别[1]}+
                    => 工控规则管理-IEC104用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleIec104Au_Add    】
                    <= 工控规则管理-IEC104用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]，告警级别[1]
                    => 工控规则管理-IEC104用户自定义-添加-成功[2]
                    => 工控规则管理-IEC104用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleIec104Au_Cls    】
                    <= 工控规则管理-IEC104用户自定义-全部删除[2]
                    => 工控规则管理-IEC104用户自定义-全部删除-成功[2]
                    => 工控规则管理-IEC104用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleIec104Au_Edit   】
                    <= 工控规则管理-IEC104用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]，告警级别[1]
                    => 工控规则管理-IEC104用户自定义-编辑-成功[2]
                    => 工控规则管理-IEC104用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleIec104Au_Del    】
                    <= 工控规则管理-IEC104用户自定义-删除[2]，数据库ID[4]
                    => 工控规则管理-IEC104用户自定义-删除-成功[2]
                    => 工控规则管理-IEC104用户自定义-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleIec104Au_Import 】
                    do
                    {
                        <= 基本规则管理-单条-IEC104用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2], 告警级别[1]
                    => 基本规则管理-单条-IEC104用户自定义-导入-成功[2]
                    => 基本规则管理-单条-IEC104用户自定义-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-IEC104用户自定义-完毕请指示[2]
                    => 基本规则管理-所有-IEC104用户自定义-成功[2]
                    => 基本规则管理-所有-IEC104用户自定义-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleIec104Au_Export 】
                    <= 基本规则管理-IEC104用户自定义-导出[2]
                    => 基本规则管理-IEC104用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-IEC104用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-IEC104用户自定义-导出-失败[2]，失败原因[1]
        DNP3规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleDnp3Bl_List   】
                    <= 工控规则管理-DNP3黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-DNP3黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-DNP3黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleDnp3Bl_Add    】
                    <= 工控规则管理-DNP3黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    => 工控规则管理-DNP3黑名单-添加-成功[2]
                    => 工控规则管理-DNP3黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleDnp3Bl_Cls    】
                    <= 工控规则管理-DNP3黑名单-全部删除[2]
                    => 工控规则管理-DNP3黑名单-全部删除-成功[2]
                    => 工控规则管理-DNP3黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleDnp3Bl_Enable 】
					<= 工控规则管理-DNP3黑名单-激活全部[2]
                    => 工控规则管理-DNP3黑名单-激活全部-成功[2]
                    => 工控规则管理-DNP3黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleDnp3Bl_Disable】
					<= 工控规则管理-DNP3黑名单-激活全部[2]
                    => 工控规则管理-DNP3黑名单-激活全部-成功[2]
                    => 工控规则管理-DNP3黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleDnp3Bl_Edit   】
                    <= 工控规则管理-DNP3黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    => 工控规则管理-DNP3黑名单-编辑-成功[2]
                    => 工控规则管理-DNP3黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleDnp3Bl_Del    】
                    <= 工控规则管理-DNP3黑名单-删除[2]，数据库ID[4]
                    => 工控规则管理-DNP3黑名单-删除-成功[2]
                    => 工控规则管理-DNP3黑名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleDnp3Bl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-DNP3黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    => 基本规则管理-单条-DNP3黑名单-导入-成功[2]
                    => 基本规则管理-单条-DNP3黑名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-DNP3黑名单-完毕请指示[2]
                    => 基本规则管理-所有-DNP3黑名单-成功[2]
                    => 基本规则管理-所有-DNP3黑名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleDnp3Bl_Export 】
                    <= 基本规则管理-DNP3黑名单-导出[2]
                    => 基本规则管理-DNP3黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-DNP3黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-DNP3黑名单-导出-失败[2]，失败原因[1]
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleDnp3Wl_List   】
                    <= 工控规则管理-DNP3白名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-DNP3白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-DNP3白名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleDnp3Wl_Add    】
                    <= 工控规则管理-DNP3白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    => 工控规则管理-DNP3白名单-添加-成功[2]
                    => 工控规则管理-DNP3白名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleDnp3Wl_Cls    】
                    <= 工控规则管理-DNP3白名单-全部删除[2]
                    => 工控规则管理-DNP3白名单-全部删除-成功[2]
                    => 工控规则管理-DNP3白名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleDnp3Bl_Enable 】
					<= 工控规则管理-DNP3白名单-激活全部[2]
                    => 工控规则管理-DNP3白名单-激活全部-成功[2]
                    => 工控规则管理-DNP3白名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleDnp3Bl_Disable】
					<= 工控规则管理-DNP3白名单-激活全部[2]
                    => 工控规则管理-DNP3白名单-激活全部-成功[2]
                    => 工控规则管理-DNP3白名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleDnp3Wl_Edit   】
                    <= 工控规则管理-DNP3白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    => 工控规则管理-DNP3白名单-编辑-成功[2]
                    => 工控规则管理-DNP3白名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleDnp3Wl_Del    】
                    <= 工控规则管理-DNP3白名单-删除[2]，数据库ID[4]
                    => 工控规则管理-DNP3白名单-删除-成功[2]
                    => 工控规则管理-DNP3白名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleDnp3Wl_Import 】
                    do
                    {
                        <= 基本规则管理-单条-DNP3白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    => 基本规则管理-单条-DNP3白名单-导入-成功[2]
                    => 基本规则管理-单条-DNP3白名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-DNP3白名单-完毕请指示[2]
                    => 基本规则管理-所有-DNP3白名单-成功[2]
                    => 基本规则管理-所有-DNP3白名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleDnp3Wl_Export 】
                    <= 基本规则管理-DNP3白名单-导出[2]
                    => 基本规则管理-DNP3白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-DNP3白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-DNP3白名单-导出-失败[2]，失败原因[1]
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleDnp3Au_List   】
                    <= 工控规则管理-DNP3用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-DNP3用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-DNP3用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleDnp3Au_Add    】
                    <= 工控规则管理-DNP3用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]
                    => 工控规则管理-DNP3用户自定义-添加-成功[2]
                    => 工控规则管理-DNP3用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleDnp3Au_Cls    】
                    <= 工控规则管理-DNP3用户自定义-全部删除[2]
                    => 工控规则管理-DNP3用户自定义-全部删除-成功[2]
                    => 工控规则管理-DNP3用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleDnp3Au_Edit   】
                    <= 工控规则管理-DNP3用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]
                    => 工控规则管理-DNP3用户自定义-编辑-成功[2]
                    => 工控规则管理-DNP3用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleDnp3Au_Del    】
                    <= 工控规则管理-DNP3用户自定义-删除[2]，数据库ID[4]
                    => 工控规则管理-DNP3用户自定义-删除-成功[2]
                    => 工控规则管理-DNP3用户自定义-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleDnp3Au_Import 】
                    do
                    {
                        <= 基本规则管理-单条-DNP3用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]
                    => 基本规则管理-单条-DNP3用户自定义-导入-成功[2]
                    => 基本规则管理-单条-DNP3用户自定义-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-DNP3用户自定义-完毕请指示[2]
                    => 基本规则管理-所有-DNP3用户自定义-成功[2]
                    => 基本规则管理-所有-DNP3用户自定义-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleDnp3Au_Export 】
                    <= 基本规则管理-DNP3用户自定义-导出[2]
                    => 基本规则管理-DNP3用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-DNP3用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-DNP3用户自定义-导出-失败[2]，失败原因[1]
        S7规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleS7Bl_List   】
                    <= 工控规则管理-S7黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-S7黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-S7黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleS7Bl_Add    】
					<= 工控规则管理-S7黑名单-添加[2]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    => 工控规则管理-S7黑名单-添加-成功[2]
                    => 工控规则管理-S7黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleS7Bl_Cls    】
					<= 工控规则管理-S7黑名单-全部删除[2]
                    => 工控规则管理-S7黑名单-全部删除-成功[2]
                    => 工控规则管理-S7黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleS7Bl_Enable 】
					<= 工控规则管理-S7黑名单-激活全部[2]
                    => 工控规则管理-S7黑名单-激活全部-成功[2]
                    => 工控规则管理-S7黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleS7Bl_Disable】
					<= 工控规则管理-S7黑名单-激活全部[2]
                    => 工控规则管理-S7黑名单-激活全部-成功[2]
                    => 工控规则管理-S7黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleS7Bl_Edit   】
					<= 工控规则管理-S7黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    => 工控规则管理-S7黑名单-编辑-成功[2]
                    => 工控规则管理-S7黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleS7Bl_Del    】
					<= 工控规则管理-S7黑名单-删除[2]，数据库ID[4]
                    => 工控规则管理-S7黑名单-删除-成功[2]
                    => 工控规则管理-S7黑名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleS7Au_Import 】
                    do
                    {
                        <= 基本规则管理-单条-S7黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    => 基本规则管理-单条-S7黑名单-导入-成功[2]
                    => 基本规则管理-单条-S7黑名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-S7黑名单-完毕请指示[2]
                    => 基本规则管理-所有-S7黑名单-成功[2]
                    => 基本规则管理-所有-S7黑名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleS7Au_Export 】
                    <= 基本规则管理-S7黑名单-导出[2]
                    => 基本规则管理-S7黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-S7黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-S7黑名单-导出-失败[2]，失败原因[1]
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleS7Wl_List   】
                    <= 工控规则管理-S7白名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-S7白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-S7白名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleS7Wl_Add    】
					<= 工控规则管理-S7白名单-添加[2]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    => 工控规则管理-S7白名单-添加-成功[2]
                    => 工控规则管理-S7白名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleS7Wl_Cls   】
					<= 工控规则管理-S7白名单-全部删除[2]
                    => 工控规则管理-S7白名单-全部删除-成功[2]
                    => 工控规则管理-S7白名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleS7Wl_Enable】
					<= 工控规则管理-S7白名单-激活全部[2]
                    => 工控规则管理-S7白名单-激活全部-成功[2]
                    => 工控规则管理-S7白名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleS7Wl_Disable】
					<= 工控规则管理-S7白名单-激活全部[2]
                    => 工控规则管理-S7白名单-激活全部-成功[2]
                    => 工控规则管理-S7白名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleS7Wl_Edit   】
					<= 工控规则管理-S7白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    => 工控规则管理-S7白名单-编辑-成功[2]
                    => 工控规则管理-S7白名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleS7Wl_Del    】
					<= 工控规则管理-S7白名单-删除[2]，数据库ID[4]
                    => 工控规则管理-S7白名单-删除-成功[2]
                    => 工控规则管理-S7白名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleS7Au_Import 】
                    do
                    {
                        <= 基本规则管理-单条-S7白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    => 基本规则管理-单条-S7白名单-导入-成功[2]
                    => 基本规则管理-单条-S7白名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-S7白名单-完毕请指示[2]
                    => 基本规则管理-所有-S7白名单-成功[2]
                    => 基本规则管理-所有-S7白名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleS7Au_Export 】
                    <= 基本规则管理-S7白名单-导出[2]
                    => 基本规则管理-S7白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-S7白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-S7白名单-导出-失败[2]，失败原因[1]
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleS7Au_List   】
                    <= 工控规则管理-S7用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-S7用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-S7用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleS7Au_Add    】
					<= 工控规则管理-S7用户自定义-添加[2]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]
                    => 工控规则管理-S7用户自定义-添加-成功[2]
                    => 工控规则管理-S7用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleS7Au_Cls    】
					<= 工控规则管理-S7用户自定义-全部删除[2]
                    => 工控规则管理-S7用户自定义-全部删除-成功[2]
                    => 工控规则管理-S7用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleS7Au_Edit   】
					<= 工控规则管理-S7用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]
                    => 工控规则管理-S7用户自定义-编辑-成功[2]
                    => 工控规则管理-S7用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleS7Au_Del    】
					<= 工控规则管理-S7用户自定义-删除[2]，数据库ID[4]
                    => 工控规则管理-S7用户自定义-删除-成功[2]
                    => 工控规则管理-S7用户自定义-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleS7Au_Import 】
                    do
                    {
                        <= 基本规则管理-单条-S7用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]
                    => 基本规则管理-单条-S7用户自定义-导入-成功[2]
                    => 基本规则管理-单条-S7用户自定义-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-S7用户自定义-完毕请指示[2]
                    => 基本规则管理-所有-S7用户自定义-成功[2]
                    => 基本规则管理-所有-S7用户自定义-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleS7Au_Export 】
                    <= 基本规则管理-S7用户自定义-导出[2]
                    => 基本规则管理-S7用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-S7用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-S7用户自定义-导出-失败[2]，失败原因[1]
        OPC规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleOpcBl_List   】
                    <= 工控规则管理-OPC黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-OPC黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1])[1]}+
                    => 工控规则管理-OPC黑名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleOpcBl_Add    】
					<= 工控规则管理-OPC黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    => 工控规则管理-OPC黑名单-添加-成功[2]
                    => 工控规则管理-OPC黑名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleOpcBl_Cls    】
					<= 工控规则管理-OPC黑名单-全部删除[2]
                    => 工控规则管理-OPC黑名单-全部删除-成功[2]
                    => 工控规则管理-OPC黑名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleOpcBl_Enable 】
					<= 工控规则管理-OPC黑名单-激活全部[2]
                    => 工控规则管理-OPC黑名单-激活全部-成功[2]
                    => 工控规则管理-OPC黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleOpcBl_Disable】
					<= 工控规则管理-OPC黑名单-激活全部[2]
                    => 工控规则管理-OPC黑名单-激活全部-成功[2]
                    => 工控规则管理-OPC黑名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleOpcBl_Edit   】
					<= 工控规则管理-OPC黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    => 工控规则管理-OPC黑名单-编辑-成功[2]
                    => 工控规则管理-OPC黑名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleOpcBl_Del    】
					<= 工控规则管理-OPC黑名单-删除[2]，数据库ID[4]
                    => 工控规则管理-OPC黑名单-删除-成功[2]
                    => 工控规则管理-OPC黑名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleOpcAu_Import 】
                    do
                    {
                        <= 基本规则管理-单条-OPC黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    => 基本规则管理-单条-OPC黑名单-导入-成功[2]
                    => 基本规则管理-单条-OPC黑名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-OPC黑名单-完毕请指示[2]
                    => 基本规则管理-所有-OPC黑名单-成功[2]
                    => 基本规则管理-所有-OPC黑名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleOpcAu_Export 】
                    <= 基本规则管理-OPC黑名单-导出[2]
                    => 基本规则管理-OPC黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-OPC黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-OPC黑名单-导出-失败[2]，失败原因[1]
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleOpcWl_List   】
                    <= 工控规则管理-OPC白名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-OPC白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1])[1]}+
                    => 工控规则管理-OPC白名单-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleOpcWl_Add    】
					<= 工控规则管理-OPC白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    => 工控规则管理-OPC白名单-添加-成功[2]
                    => 工控规则管理-OPC白名单-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleOpcWl_Cls    】
					<= 工控规则管理-OPC白名单-全部删除[2]
                    => 工控规则管理-OPC白名单-全部删除-成功[2]
                    => 工控规则管理-OPC白名单-全部删除-失败[2]，失败原因[1]
                事件：点“激活全部”      【FFS_RuleOpcWl_Enable 】
					<= 工控规则管理-OPC白名单-激活全部[2]
                    => 工控规则管理-OPC白名单-激活全部-成功[2]
                    => 工控规则管理-OPC白名单-激活全部-失败[2]，失败原因[1]
                事件：点“禁用全部”      【FFS_RuleOpcWl_Disable】
					<= 工控规则管理-OPC白名单-激活全部[2]
                    => 工控规则管理-OPC白名单-激活全部-成功[2]
                    => 工控规则管理-OPC白名单-激活全部-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleOpcWl_Edit   】
					<= 工控规则管理-OPC白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    => 工控规则管理-OPC白名单-编辑-成功[2]
                    => 工控规则管理-OPC白名单-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleOpcWl_Del    】
					<= 工控规则管理-OPC白名单-删除[2]，数据库ID[4]
                    => 工控规则管理-OPC白名单-删除-成功[2]
                    => 工控规则管理-OPC白名单-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleOpcAu_Import 】
                    do
                    {
                        <= 基本规则管理-单条-OPC白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    => 基本规则管理-单条-OPC白名单-导入-成功[2]
                    => 基本规则管理-单条-OPC白名单-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-OPC白名单-完毕请指示[2]
                    => 基本规则管理-所有-OPC白名单-成功[2]
                    => 基本规则管理-所有-OPC白名单-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleOpcAu_Export 】
                    <= 基本规则管理-OPC白名单-导出[2]
                    => 基本规则管理-OPC白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-OPC白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-OPC白名单-导出-失败[2]，失败原因[1]
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleOpcAu_List   】
                    <= 工控规则管理-OPC用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]
                    => 工控规则管理-OPC用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 告警级别[1],全匹配(0/1)[1]}+
                    => 工控规则管理-OPC用户自定义-获取失败[2]，失败原因[1]
                事件：点“添加”          【FFS_RuleOpcAu_Add    】
					<= 工控规则管理-OPC用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2],告警级别[1] 全匹配(0/1)[1]
                    => 工控规则管理-OPC用户自定义-添加-成功[2]
                    => 工控规则管理-OPC用户自定义-添加-失败[2]，失败原因[1]
                事件：点“全部删除”      【FFS_RuleOpcAu_Cls    】
					<= 工控规则管理-OPC用户自定义-全部删除[2]
                    => 工控规则管理-OPC用户自定义-全部删除-成功[2]
                    => 工控规则管理-OPC用户自定义-全部删除-失败[2]，失败原因[1]
                事件：点“编辑”          【FFS_RuleOpcAu_Edit   】
					<= 工控规则管理-OPC用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 告警级别[1], 全匹配(0/1)[1]
                    => 工控规则管理-OPC用户自定义-编辑-成功[2]
                    => 工控规则管理-OPC用户自定义-编辑-失败[2]，失败原因[1]
                事件：点“删除”          【FFS_RuleOpcAu_Del    】
					<= 工控规则管理-OPC用户自定义-删除[2]，数据库ID[4]
                    => 工控规则管理-OPC用户自定义-删除-成功[2]
                    => 工控规则管理-OPC用户自定义-删除-失败[2]，失败原因[1]
                事件：点“导入”          【FFS_RuleOpcAu_Import 】
                    do
                    {
                        <= 基本规则管理-单条-OPC用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 告警级别[1], 全匹配(0/1)[1]
                    => 基本规则管理-单条-OPC用户自定义-导入-成功[2]
                    => 基本规则管理-单条-OPC用户自定义-导入-失败[2]，失败原因[1]
                    }
                    while (成功);
                    <= 基本规则管理-所有-OPC用户自定义-完毕请指示[2]
                    => 基本规则管理-所有-OPC用户自定义-成功[2]
                    => 基本规则管理-所有-OPC用户自定义-失败[2]，失败原因[1]
                事件：点“导出”          【FFS_RuleOpcAu_Export 】
                    <= 基本规则管理-OPC用户自定义-导出[2]
                    => 基本规则管理-OPC用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    => 基本规则管理-OPC用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-OPC用户自定义-导出-失败[2]，失败原因[1]
    规则学习
        ModbusTCP规则
            事件：点“开始学习”          【FFS_LrnModbus_Start】
                <= 规则学习-ModbusTCP-开始学习[2]
                => 规则学习-ModbusTCP-开始学习-成功[2]
                => 规则学习-ModbusTCP-开始学习-失败[2]，失败原因[1]
            事件：点“停止学习”          【FFS_LrnModbus_End  】
                <= 规则学习-ModbusTCP-停止学习[2]
                => 规则学习-ModbusTCP-停止学习-成功[2]
                => 规则学习-ModbusTCP-停止学习-失败[2]，失败原因[1]
            事件：点“编辑”              【FFS_LrnModbus_Edit 】
                <= 规则学习-ModbusTCP-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，功能码[2]，公共地址[2]
                => 规则学习-ModbusTCP-编辑-成功[2]
                => 规则学习-ModbusTCP-编辑-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LrnModbus_Del  】
                <= 规则学习-ModbusTCP-删除[2]，数据库ID[4]
                => 规则学习-ModbusTCP-删除-成功[2]
                => 规则学习-ModbusTCP-删除-失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LrnModbus_Cls  】
                <= 规则学习-ModbusTCP-清空[2]
                => 规则学习-ModbusTCP-清空-成功[2]
                => 规则学习-ModbusTCP-清空-失败[2]，失败原因[1]
        IEC104规则
            事件：点“开始学习”          【FFS_LrnIec104_Start】
                <= 规则学习-IEC104-开始学习[2]
                => 规则学习-IEC104-开始学习-成功[2]
                => 规则学习-IEC104-开始学习-失败[2]，失败原因[1]
            事件：点“停止学习”          【FFS_LrnIec104_End  】
                <= 规则学习-IEC104-停止学习[2]
                => 规则学习-IEC104-停止学习-成功[2]
                => 规则学习-IEC104-停止学习-失败[2]，失败原因[1]
            事件：点“编辑”              【FFS_LrnIec104_Edit 】
                <= 规则学习-IEC104-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，公共地址[2]，信息体地址[2]
                => 规则学习-IEC104-编辑-成功[2]
                => 规则学习-IEC104-编辑-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LrnIec104_Del  】
                <= 规则学习-IEC104-删除[2]，数据库ID[4]
                => 规则学习-IEC104-删除-成功[2]
                => 规则学习-IEC104-删除-失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LrnIec104_Cls  】
                <= 规则学习-IEC104-清空[2]
                => 规则学习-IEC104-清空-成功[2]
                => 规则学习-IEC104-清空-失败[2]，失败原因[1]
        DNP3规则
            事件：点“开始学习”          【FFS_LrnDnp3_Start】
                <= 规则学习-DNP3-开始学习[2]
                => 规则学习-DNP3-开始学习-成功[2]
                => 规则学习-DNP3-开始学习-失败[2]，失败原因[1]
            事件：点“停止学习”          【FFS_LrnDnp3_End  】
                <= 规则学习-DNP3-停止学习[2]
                => 规则学习-DNP3-停止学习-成功[2]
                => 规则学习-DNP3-停止学习-失败[2]，失败原因[1]
            事件：点“编辑”              【FFS_LrnDnp3_Edit 】
                <= 规则学习-DNP3-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，功能码[1]，组号[1]，变体号[1]
                => 规则学习-DNP3-编辑-成功[2]
                => 规则学习-DNP3-编辑-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LrnDnp3_Del  】
                <= 规则学习-DNP3-删除[2]，数据库ID[4]
                => 规则学习-DNP3-删除-成功[2]
                => 规则学习-DNP3-删除-失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LrnDnp3_Cls  】
                <= 规则学习-DNP3-清空[2]
                => 规则学习-DNP3-清空-成功[2]
                => 规则学习-DNP3-清空-失败[2]，失败原因[1]
        S7规则
            事件：点“开始学习”          【FFS_LrnS7_Start】
                <= 规则学习-S7-开始学习[2]
                => 规则学习-S7-开始学习-成功[2]
                => 规则学习-S7-开始学习-失败[2]，失败原因[1]
            事件：点“停止学习”          【FFS_LrnS7_End  】
                <= 规则学习-S7-停止学习[2]
                => 规则学习-S7-停止学习-成功[2]
                => 规则学习-S7-停止学习-失败[2]，失败原因[1]
            事件：点“编辑”              【FFS_LrnS7_Edit 】
                <= 规则学习-S7-编辑[2]，数据库ID[4]，源IP[4]，读写属性[1]、地址[4]、寄存器区[1]、DB区[2]、点类型[1]
                => 规则学习-S7-编辑-成功[2]
                => 规则学习-S7-编辑-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LrnS7_Del  】
                <= 规则学习-S7-删除[2]，数据库ID[4]
                => 规则学习-S7-删除-成功[2]
                => 规则学习-S7-删除-失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LrnS7_Cls  】
                <= 规则学习-S7-清空[2]
                => 规则学习-S7-清空-成功[2]
                => 规则学习-S7-清空-失败[2]，失败原因[1]
        OPC规则
            事件：点“开始学习”          【FFS_LrnOpc_Start】
                <= 规则学习-OPC-开始学习[2]
                => 规则学习-OPC-开始学习-成功[2]
                => 规则学习-OPC-开始学习-失败[2]，失败原因[1]
            事件：点“停止学习”          【FFS_LrnOpc_End  】
                <= 规则学习-OPC-停止学习[2]
                => 规则学习-OPC-停止学习-成功[2]
                => 规则学习-OPC-停止学习-失败[2]，失败原因[1]
            事件：点“编辑”              【FFS_LrnOpc_Edit 】
                <= 规则学习-OPC-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，接口ID[2]，方法ID[2]
                => 规则学习-OPC-编辑-成功[2]
                => 规则学习-OPC-编辑-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LrnOpc_Del  】
                <= 规则学习-OPC-删除[2]，数据库ID[4]
                => 规则学习-OPC-删除-成功[2]
                => 规则学习-OPC-删除-失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LrnOpc_Cls  】
                <= 规则学习-OPC-清空[2]
                => 规则学习-OPC-清空-成功[2]
                => 规则学习-OPC-清空-失败[2]，失败原因[1]
    日志管理
        全部日志
            事件：刷新 / 点指定页数       【FFS_LogAll_List  】
                <= 日志管理-全部日志-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-全部日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，告警级别[1]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-全部日志-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogAll_Query 】
                <= 日志管理-全部日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，告警级别[1]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-全部日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，告警级别[1]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-全部日志-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogAll_Cls   】
                <= 日志管理-全部日志-清空[2]
                => 日志管理-全部日志-清空-成功[2]
                => 日志管理-全部日志-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogAll_Del   】
                <= 日志管理-全部日志-删除[2]，数据库ID[4]
                => 日志管理-全部日志-删除-成功[2]
                => 日志管理-全部日志-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogAll_Export】
                <= 日志管理-全部日志-导出[2]
                => 日志管理-全部日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-全部日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-全部日志-导出-失败[2]，失败原因[1]
        基本规则告警
            MAC黑名单
                事件：刷新 / 点指定页数       【FFS_LogRuleMac_List  】
                    <= 日志管理-MAC黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-MAC黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-MAC黑名单-获取失败[2]，失败原因[1]
                事件：点“查询”              【FFS_LogRuleMac_Query 】
                    <= 日志管理-MAC黑名单-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-MAC黑名单-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-MAC黑名单-查询失败[2]，失败原因[1]
                事件：点“清空”              【FFS_LogRuleMac_Cls   】
                    <= 日志管理-MAC黑名单-清空[2]
                => 日志管理-MAC黑名单-清空-成功[2]
                => 日志管理-MAC黑名单-清空-失败[2]，失败原因[1]
                事件：点“删除”              【FFS_LogRuleMac_Del   】
                    <= 日志管理-MAC黑名单-删除[2]，数据库ID[4]
                => 日志管理-MAC黑名单-删除-成功[2]
                => 日志管理-MAC黑名单-删除-失败[2]，失败原因[1]
                事件：点“导出”              【FFS_LogRuleMac_Export】
                    <= 日志管理-MAC黑名单-导出[2]
                => 日志管理-MAC黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-MAC黑名单-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-MAC黑名单-导出-失败[2]，失败原因[1]
            IP黑名单
                事件：刷新 / 点指定页数       【FFS_LogRuleIp_List  】
                    <= 日志管理-IP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-IP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-IP黑名单-获取失败[2]，失败原因[1]
                事件：点“查询”              【FFS_LogRuleIp_Query 】
                    <= 日志管理-IP黑名单-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-IP黑名单-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-IP黑名单-查询失败[2]，失败原因[1]
                事件：点“清空”              【FFS_LogRuleIp_Cls   】
                    <= 日志管理-IP黑名单-清空[2]
                => 日志管理-IP黑名单-清空-成功[2]
                => 日志管理-IP黑名单-清空-失败[2]，失败原因[1]
                事件：点“删除”              【FFS_LogRuleIp_Del   】
                    <= 日志管理-IP黑名单-删除[2]，数据库ID[4]
                => 日志管理-IP黑名单-删除-成功[2]
                => 日志管理-IP黑名单-删除-失败[2]，失败原因[1]
                事件：点“导出”              【FFS_LogRuleIp_Export】
                    <= 日志管理-IP黑名单-导出[2]
                => 日志管理-IP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-IP黑名单-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-IP黑名单-导出-失败[2]，失败原因[1]
            安全域
                事件：刷新 / 点指定页数       【FFS_LogRuleSz_List  】
                    <= 日志管理-安全域-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-安全域-获取失败[2]，失败原因[1]
                事件：点“查询”              【FFS_LogRuleSz_Query 】
                    <= 日志管理-安全域-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-安全域-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-安全域-查询失败[2]，失败原因[1]
                事件：点“清空”              【FFS_LogRuleSz_Cls   】
                    <= 日志管理-安全域-清空[2]
                => 日志管理-安全域-清空-成功[2]
                => 日志管理-安全域-清空-失败[2]，失败原因[1]
                事件：点“删除”              【FFS_LogRuleSz_Del   】
                    <= 日志管理-安全域-删除[2]，数据库ID[4]
                => 日志管理-安全域-删除-成功[2]
                => 日志管理-安全域-删除-失败[2]，失败原因[1]
                事件：点“导出”              【FFS_LogRuleSz_Export】
                    <= 日志管理-安全域-导出[2]
                => 日志管理-安全域-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-安全域-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-安全域-导出-失败[2]，失败原因[1]
            TCP
                事件：刷新 / 点指定页数       【FFS_LogRuleTcp_List  】
                    <= 日志管理-TCP-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-TCP-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-TCP-获取失败[2]，失败原因[1]
                事件：点“查询”              【FFS_LogRuleTcp_Query 】
                    <= 日志管理-TCP-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-TCP-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-TCP-查询失败[2]，失败原因[1]
                事件：点“清空”              【FFS_LogRuleTcp_Cls   】
                    <= 日志管理-TCP-清空[2]
                => 日志管理-TCP-清空-成功[2]
                => 日志管理-TCP-清空-失败[2]，失败原因[1]
                事件：点“删除”              【FFS_LogRuleTcp_Del   】
                    <= 日志管理-TCP-删除[2]，数据库ID[4]
                => 日志管理-TCP-删除-成功[2]
                => 日志管理-TCP-删除-失败[2]，失败原因[1]
                事件：点“导出”              【FFS_LogRuleTcp_Export】
                    <= 日志管理-TCP-导出[2]
                => 日志管理-TCP-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-TCP-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-TCP-导出-失败[2]，失败原因[1]
            UDP
                事件：刷新 / 点指定页数       【FFS_LogRuleUdp_List  】
                    <= 日志管理-UDP-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-UDP-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-UDP-获取失败[2]，失败原因[1]
                事件：点“查询”              【FFS_LogRuleUdp_Query 】
                    <= 日志管理-UDP-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-UDP-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-UDP-查询失败[2]，失败原因[1]
                事件：点“清空”              【FFS_LogRuleUdp_Cls   】
                    <= 日志管理-UDP-清空[2]
                => 日志管理-UDP-清空-成功[2]
                => 日志管理-UDP-清空-失败[2]，失败原因[1]
                事件：点“删除”              【FFS_LogRuleUdp_Del   】
                    <= 日志管理-UDP-删除[2]，数据库ID[4]
                => 日志管理-UDP-删除-成功[2]
                => 日志管理-UDP-删除-失败[2]，失败原因[1]
                事件：点“导出”              【FFS_LogRuleUdp_Export】
                    <= 日志管理-UDP-导出[2]
                => 日志管理-UDP-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-UDP-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-UDP-导出-失败[2]，失败原因[1]
        工控白名单告警
            事件：刷新 / 点指定页数       【FFS_LogRuleIndWl_List  】
                <= 日志管理-工控白名单告警-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-工控白名单告警-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控白名单告警-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogRuleIndWl_Query 】
                <= 日志管理-工控白名单告警-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-工控白名单告警-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控白名单告警-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogRuleIndWl_Cls   】
                <= 日志管理-工控白名单告警-清空[2]
                => 日志管理-工控白名单告警-清空-成功[2]
                => 日志管理-工控白名单告警-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogRuleIndWl_Del   】
                <= 日志管理-工控白名单告警-删除[2]，数据库ID[4]
                => 日志管理-工控白名单告警-删除-成功[2]
                => 日志管理-工控白名单告警-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogRuleIndWl_Export】
                <= 日志管理-工控白名单告警-导出[2]
                => 日志管理-工控白名单告警-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-工控白名单告警-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-工控白名单告警-导出-失败[2]，失败原因[1]
        工控黑名单告警
            事件：刷新 / 点指定页数       【FFS_LogRuleIndBl_List  】
                <= 日志管理-工控黑名单告警-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-工控黑名单告警-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控黑名单告警-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogRuleIndBl_Query 】
                <= 日志管理-工控黑名单告警-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-工控黑名单告警-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控黑名单告警-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogRuleIndBl_Cls   】
                <= 日志管理-工控黑名单告警-清空[2]
                => 日志管理-工控黑名单告警-清空-成功[2]
                => 日志管理-工控黑名单告警-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogRuleIndBl_Del   】
                <= 日志管理-工控黑名单告警-删除[2]，数据库ID[4]
                => 日志管理-工控黑名单告警-删除-成功[2]
                => 日志管理-工控黑名单告警-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogRuleIndBl_Export】
                <= 日志管理-工控黑名单告警-导出[2]
                => 日志管理-工控黑名单告警-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-工控黑名单告警-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-工控黑名单告警-导出-失败[2]，失败原因[1]
        工控协议规约告警
            事件：刷新 / 点指定页数       【FFS_LogRuleIndEx_List  】
                <= 日志管理-工控协议规约告警-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-工控协议规约告警-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控协议规约告警-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogRuleIndEx_Query 】
                <= 日志管理-工控协议规约告警-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-工控协议规约告警-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控协议规约告警-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogRuleIndEx_Cls   】
                <= 日志管理-工控协议规约告警-清空[2]
                => 日志管理-工控协议规约告警-清空-成功[2]
                => 日志管理-工控协议规约告警-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogRuleIndEx_Del   】
                <= 日志管理-工控协议规约告警-删除[2]，数据库ID[4]
                => 日志管理-工控协议规约告警-删除-成功[2]
                => 日志管理-工控协议规约告警-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogRuleIndEx_Export】
                <= 日志管理-工控协议规约告警-导出[2]
                => 日志管理-工控协议规约告警-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-工控协议规约告警-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-工控协议规约告警-导出-失败[2]，失败原因[1]
        地址欺骗日志
            事件：刷新 / 点指定页数       【FFS_LogArp_List  】
                <= 日志管理-地址欺骗日志-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-地址欺骗日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-地址欺骗日志-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogArp_Query 】
                <= 日志管理-地址欺骗日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-地址欺骗日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-地址欺骗日志-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogArp_Cls   】
                <= 日志管理-地址欺骗日志-清空[2]
                => 日志管理-地址欺骗日志-清空-成功[2]
                => 日志管理-地址欺骗日志-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogArp_Del   】
                <= 日志管理-地址欺骗日志-删除[2]，数据库ID[4]
                => 日志管理-地址欺骗日志-删除-成功[2]
                => 日志管理-地址欺骗日志-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogArp_Export】
                <= 日志管理-地址欺骗日志-导出[2]
                => 日志管理-地址欺骗日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-地址欺骗日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-地址欺骗日志-导出-失败[2]，失败原因[1]
        攻击日志
            事件：刷新 / 点指定页数       【FFS_LogAttack_List  】
                <= 日志管理-攻击日志-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-攻击日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-攻击日志-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogAttack_Query 】
                <= 日志管理-攻击日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-攻击日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-攻击日志-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogAttack_Cls   】
                <= 日志管理-攻击日志-清空[2]
                => 日志管理-攻击日志-清空-成功[2]
                => 日志管理-攻击日志-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogAttack_Del   】
                <= 日志管理-攻击日志-删除[2]，数据库ID[4]
                => 日志管理-攻击日志-删除-成功[2]
                => 日志管理-攻击日志-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogAttack_Export】
                <= 日志管理-攻击日志-导出[2]
                => 日志管理-攻击日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-攻击日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-攻击日志-导出-失败[2]，失败原因[1]
        网关运行日志
            事件：刷新 / 点指定页数       【FFS_LogRun_List  】
                <= 日志管理-网关运行日志-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-网关运行日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-网关运行日志-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogRun_Query 】
                <= 日志管理-网关运行日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-网关运行日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-网关运行日志-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogRun_Cls   】
                <= 日志管理-网关运行日志-清空[2]
                => 日志管理-网关运行日志-清空-成功[2]
                => 日志管理-网关运行日志-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogRun_Del   】
                <= 日志管理-网关运行日志-删除[2]，数据库ID[4]
                => 日志管理-网关运行日志-删除-成功[2]
                => 日志管理-网关运行日志-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogRun_Export】
                <= 日志管理-网关运行日志-导出[2]
                => 日志管理-网关运行日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-网关运行日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-网关运行日志-导出-失败[2]，失败原因[1]
        系统日志
            事件：刷新 / 点指定页数       【FFS_LogSys_List  】
                <= 日志管理-系统日志-获取[2]，起始索引(从0开始)[4]，数量[4]
                => 日志管理-系统日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-系统日志-获取失败[2]，失败原因[1]
            事件：点“查询”              【FFS_LogSys_Query 】
                <= 日志管理-系统日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                => 日志管理-系统日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-系统日志-查询失败[2]，失败原因[1]
            事件：点“清空”              【FFS_LogSys_Cls   】
                <= 日志管理-系统日志-清空[2]
                => 日志管理-系统日志-清空-成功[2]
                => 日志管理-系统日志-清空-失败[2]，失败原因[1]
            事件：点“删除”              【FFS_LogSys_Del   】
                <= 日志管理-系统日志-删除[2]，数据库ID[4]
                => 日志管理-系统日志-删除-成功[2]
                => 日志管理-系统日志-删除-失败[2]，失败原因[1]
            事件：点“导出”              【FFS_LogSys_Export】
                <= 日志管理-系统日志-导出[2]
                => 日志管理-系统日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                => 日志管理-系统日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-系统日志-导出-失败[2]，失败原因[1]
    系统设置
        功能设置
            事件：点“保存”              【FFS_Conf_Func】
                <= 系统设置-功能设置-保存[2]，DOS防护是否开启(开启1 关闭0)[1]，磁盘容量阈值(如果关闭则为0，MB为单位)[1]
                => 系统设置-功能设置-保存-成功[2]
                => 系统设置-功能设置-保存-失败[2]，失败原因[1]
        告警级别设置
            事件：点“保存”              【FFS_Conf_Warnlevel】
                <= 系统设置-告警级别设置-保存[2]，MAC黑名单[1]，IP黑名单[1]，MAC安全域[1]，IP安全域[1]，传输层安全域[1]，TCP白名单[1]，TCP黑名单[1]，UDP白名单[1]，UDP黑名单[1]，MBTCP白名单[1]，MBTCP黑名单[1]，IEC104白名单[1]，IEC104黑名单[1]，DNP3白名单[1]，DNP3黑名单[1]，S7白名单[1]，S7黑名单[1]，OPC白名单[1]，OPC黑名单[1]
                => 系统设置-告警级别设置-保存-成功[2]
                => 系统设置-告警级别设置-保存-失败[2]，失败原因[1]
        告警邮箱设置
            事件：点“保存”              【FFS_Conf_AlarmEmail】
                <= 系统设置-告警邮箱设置-保存[2]，发件邮箱长度[2:s]，发件邮箱[s]，收件邮箱长度[2:r]，收件邮箱[r]，发件密码长度[2:p]，发件密码[p]
                => 系统设置-告警邮箱设置-保存-成功[2]
                => 系统设置-告警邮箱设置-保存-失败[2]，失败原因[1]

======================================================================================================================================================================================
4.通信过程
======================================================================================================================================================================================

    设备上线
        客户端每隔5s尝试一次连接（比如连接失败后延时5s重新连接），连接成功后发包如下
            => 设备上线[2]，设备编号[8s]、网关名长度[2:n]，网关名[n]、工作模式[1]、CPU占用率[1]、内存占用[1]、告警数量[4]，工作模式[1]         C
        >------------------------------------------------------------------------------------------------------------------------------------------
        服务端收到包后，解析包头部分，如果内容有误（如版本不匹配，则发包失败，如下）                                                           S
            <= 连接失败[2]，失败原因[1]
        如果包头没问题，则插入或更新数据库，如下
            1.判断网关名是否重复，重复则在网关名后添加"新"（此时用临时变量，还没插入数据库）
            2.将设备信息插入或更新数据库，数据库fw，表名device，内容如下
                字段描述           字段     数据类型        约束    默认
                ----------------------------------------------------------
                ID                 id       int             主键自增
                设备编号           num      char(8)         非空
                网关名             name     varchar(255)
                工作模式           mode     int             非空
                状态               state    int             非空    默认1   （离线0 在线1 学习2）
                告警数量           warn     int             非空    默认0
                最后一次上线时间   lasttime datetime        非空    当前时间
                分组               group_id int             外键    默认0
        如果存数据库成功则
            <= 连接成功[2]
        失败则
            <= 连接失败[2]，失败原因[1]（失败原因为数据库失败）
                备注：失败原因取值参见《失败原因》

    状态监测
        客户端每5s发一次监测数据，如下
        => 性能监控[2]，CPU占用率[1]、内存占用[1]、告警数量总计[4]
            备注：同时客户端用状态监测进行保活，15s超时自动断开连接并再次重连
        >------------------------------------------------------------------------------------------------------------------------------------------
        客户端收到包后：
            发包：<= 性能监控收到[2]
            在界面上刷新响应状态（如果用户处于安全网关-网关管理-网关管理 这个页面）
        备注：同时服务端用状态监测进行保活，15s超时断开连接并在数据库中修改设备信息的状态字段为离线并释放相关资源（数据库表参考“设备上线”）

    网关管理
        网关管理
            事件：刷新 / 点指定页数       【FFS_Manage_Info】
                发包：<= 网关管理-获取[2]
                    备注：根据用户点击页数并通过服务端数据库算出网关ID，然后向这些安全网关客户端发包                                                S
                >------------------------------------------------------------------------------------------------------------------------------------------
                收包后读取数据库信息和配置文件信息并回传，如下
                成功：=> 网关管理-获取-结果[2]，网关名称字符串长度[2:n]，网关名称字符串[n]，CPU占用率(0-100%)[1]，内存占用(0-100%)[1]，告警数量[4]，网关编号[8s]，工作模式[1]，上线时间[6t]
                    其中，起始索引和数量对应从服务端传回来的索引和数量
                    告警数量、工作模式需要读取客户端数据库，网关名称、上线时间需要读取客户端配置文件，网关编号、CPU占用率、内存占用需要通过API即时获取。接口定义如下
                        告警数量：sec_log.db数据库，log表，sql语句为：select count(*) from log where caption like '%告警%'
                        工作模式：sec_base.db数据库，baseinfo表，id=0的那条数据，mode字段，值（0告警模式 1防护模式）
                        网关名称：sec_base.conf（ini格式文件，用iniparser获取），中的base节，name字段
                        网关编号：此编号采用特定算法算出，接口 char *get_devicenum(void)，返回设备编号字符串8位
                        上线时间：sec_base.conf（ini格式文件，用iniparser获取），中的base节，connect_time字段
                失败：=> 网关管理-获取-失败[2]，失败原因[1]
                    失败原因见文末《失败原因对照表》                                                                                                 C
                >------------------------------------------------------------------------------------------------------------------------------------------
                服务端收到包，包括成功或失败，如下                                                                                                   S
                    成功：在界面上显示出来（ID根据当前页数算出，无特殊说明则每页15条数据）
                    失败：弹框提示失败，提示信息见《失败原因对照表》
            事件：点“查询”按钮          【FFS_Manage_Query】
                此时只从服务端数据库查询，不向客户端发包，数据库及表信息见“设备上线”部分
                查询种类包含：网关名称 / 运行状态 / 网关编号 / 工作模式  4种，如果只填一个，则查1项，如果多填，则查多项
                    网关名称、网关编号为字符串
                    运行状态：下拉框：包含离线、在线、学习
                    工作模式：下拉框：告警模式、防护模式
            事件：点“全防护”按钮        【FFS_Manage_ModeSet】
                服务端向所有安全网关发包（所有与页数无关，指全部）
                发包：<= 网关管理-模式设置[2]，工作模式[1]（0告警模式 1防护模式）                                                                    S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包：                                                                                                                       C
                    1.更新数据库，sec_base.db数据库，baseinfo表，mode字段（0告警模式 1防护模式）
                        如果失败：=> 网关管理-模式设置-失败[2]，失败原因[1]
                    2.调用接口，如下
                        typedef enum
                        {
                            MODE_WARN,        // 告警模式
                            MODE_PROTECT,     // 防护模式
                        } mode_type;
                        void set_mode(mode_type mode)
                    3.发包成功：=> 网关管理-模式设置-成功[2]
            事件：点“全告警”按钮        【FFS_Manage_ModeSet】
                同上，mode=告警模式
            事件：点“编辑”              【FFS_Manage_Edit】
                编辑有2个内容：网关名称、工作模式，编辑后点确定需要判断网关名称是否在数据库中有重复
                1.更新数据库，数据库fw，表名device
                2.发包<= 网关管理-编辑[2]，网关名长度[2:n]，网关名[n]，工作模式[1]（0告警模式 1防护模式）                                             S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包：                                                                                                                        C
                    修改sec_base.conf配置文件中base节，name字段为网关名
                    然后设置工作模式，参考“事件：点“全防护”按钮”
            事件：点“删除”              【FFS_Manage_Del】
                弹框提示“是否删除？删除后重启统一管理平台服务器或重启远程设备即可重新上线”是/否
                点是则发包：<= 断开连接[2]，然后从数据库中删除这条设备，数据库表见“设备上线”                                                        S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包：                                                                                                                        C
                    退出服务器连接循环，不再连接服务器（客户端重启后仍然连接）
        分组管理
            事件：刷新 / 点指定页数       【FFS_Group_List】
                此部分从服务端数据库中获取，表如下（fw数据库，group表）
                    字段描述    字段    数据类型       约束       默认值
                    ---------------------------------------------------------
                    ID          id      int            主键自增
                    分组名称    name    varchar(255)   非空       "默认分组"
                    网关列表    list    text
            事件：点“添加”              【FFS_Group_Add】
                服务端执行插入（插入内容：分组名、网关列表（字符串））
            事件：点“编辑”              【FFS_Group_Edit】
                服务端更新数据库
            事件：点“删除”              【FFS_Group_Del】
                提示“是否删除当前分组？”是/否
                服务端删除数据库中条目
    基本规则管理
        ARP规则
            事件：刷新 / 点指定页数       【FFS_RuleArp_List   】
                <= 基本规则管理-ARP规则-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-ARP规则-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]，MAC地址[6]}+                            C
                => 基本规则管理-ARP规则-获取失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_base.db，tbl_arpbind表
            事件：点“添加”              【FFS_RuleArp_Add    】
                <= 基本规则管理-ARP规则-添加[2]，IP地址[4]，MAC地址[6]                                                                               S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-ARP规则-添加-成功[2]                                                                                                 C
                => 基本规则管理-ARP规则-添加-失败[2]，失败原因[1]

                接口定义：bool stub_arp_bind_add(uint32_t ip, uint8_t *mac);
                    参数：ip：IP地址4字节主机序
                          mac：mac地址6字节
            事件：点“激活全部”          【FFS_RuleArp_Enable 】
                <= 基本规则管理-ARP规则-激活全部[2]                                                                                                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-ARP规则-激活全部-成功[2]                                                                                             C
                => 基本规则管理-ARP规则-激活全部-失败[2]，失败原因[1]

                接口定义：bool stub_arp_on();
            事件：点“禁用全部”          【FFS_RuleArp_Disable】
                <= 基本规则管理-ARP规则-禁用全部[2]                                                                                                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-ARP规则-禁用全部-成功[2]                                                                                             C
                => 基本规则管理-ARP规则-禁用全部-失败[2]，失败原因[1]

                接口定义：bool stub_arp_close();
            事件：点“全部删除”          【FFS_RuleArp_Cls    】
                <= 基本规则管理-ARP规则-全部删除[2]                                                                                                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-ARP规则-全部删除-成功[2]                                                                                             C
                => 基本规则管理-ARP规则-全部删除-失败[2]，失败原因[1]

                接口定义：bool stub_arp_bind_del_all();
            事件：点“编辑”              【FFS_RuleArp_Edit   】
                <= 基本规则管理-ARP规则-编辑[2]，源IP地址[4]，新IP地址[4]，MAC地址[6]                                                                S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-ARP规则-编辑-成功[2]                                                                                                 C
                => 基本规则管理-ARP规则-编辑-失败[2]，失败原因[1]

                客户端收到包然后针对编辑的操作流程：
                    1.删除目标规则
                    2.添加目标规则
                接口定义：
                    删除：bool stub_arp_bind_del(uint32_t ip);
                    添加：bool stub_arp_bind_add(uint32_t ip, uint8_t *mac);
            事件：点“删除”              【FFS_RuleArp_Del    】
                <= 基本规则管理-ARP规则-删除[2]，IP地址[4]                                                                                           S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-ARP规则-删除-成功[2]                                                                                                 C
                => 基本规则管理-ARP规则-删除-失败[2]，失败原因[1]

                接口定义：bool stub_arp_bind_del(uint32_t ip);
            备注
                客户端数据库文件sec_base.db，数据库表tbl_arpbind
                IP地址为4个字节
        MAC黑名单
            事件：刷新 / 点指定页数       【FFS_RuleMac_List   】
                <= 基本规则管理-MAC黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-MAC黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，MAC地址[6]}+                                       C
                => 基本规则管理-MAC黑名单-获取失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_base.db，rules_macblacklist表
            事件：点“添加”              【FFS_RuleMac_Add    】
                <= 基本规则管理-MAC黑名单-添加[2]，MAC地址[6]                                                                                          S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-MAC黑名单-添加-成功[2]                                                                                                 C
                => 基本规则管理-MAC黑名单-添加-失败[2]，失败原因[1]

                接口定义：bool stub_mac_bl_add(uint8_t *mac);
            事件：点“全部删除”          【FFS_RuleMac_Enable 】
                <= 基本规则管理-MAC黑名单-全部删除[2]                                                                                                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-MAC黑名单-全部删除-成功[2]                                                                                             C
                => 基本规则管理-MAC黑名单-全部删除-失败[2]，失败原因[1]

                接口定义：bool stub_mac_bl_del_all();
            事件：点“激活全部”          【FFS_RuleMac_Disable】
                <= 基本规则管理-MAC黑名单-激活全部[2]                                                                                                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-MAC黑名单-激活全部-成功[2]                                                                                             C
                => 基本规则管理-MAC黑名单-激活全部-失败[2]，失败原因[1]

                接口定义：bool stub_mac_bl_state(bool state);  // state=true
            事件：点“禁用全部”          【FFS_RuleMac_Cls    】
                <= 基本规则管理-MAC黑名单-禁用全部[2]                                                                                                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-MAC黑名单-禁用全部-成功[2]                                                                                             C
                => 基本规则管理-MAC黑名单-禁用全部-失败[2]，失败原因[1]

                接口定义：bool stub_mac_bl_state(bool state);  // state=false
            事件：点“编辑”              【FFS_RuleMac_Edit   】
                <= 基本规则管理-MAC黑名单-编辑[2]，旧MAC地址[6]，新MAC地址[6]                                                                          S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-MAC黑名单-编辑-成功[2]                                                                                                 C
                => 基本规则管理-MAC黑名单-编辑-失败[2]，失败原因[1]

                客户端收到包然后针对编辑的操作流程：
                    1.删除目标规则
                    2.添加目标规则
                接口定义：
                    删除：bool stub_mac_bl_del(uint8_t *mac);   // 旧MAC地址
                    添加：bool stub_mac_bl_add(uint8_t *mac);   // 新MAC地址
            事件：点“删除”              【FFS_RuleMac_Del    】
                <= 基本规则管理-MAC黑名单-删除[2]，MAC地址[6]                                                                                          S
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 基本规则管理-MAC黑名单-删除-成功[2]                                                                                                 C
                => 基本规则管理-MAC黑名单-删除-失败[2]，失败原因[1]

                接口定义：bool stub_mac_bl_del(uint8_t *mac);
            备注
                客户端数据库文件sec_base.db，数据库表rules_macblacklist
                IP地址为4个字节
        IP规则
            IP黑名单
                事件：刷新 / 点指定页数   【FFS_RuleIpBl_List   】
                    <= 基本规则管理-IP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]}+                                        C
                    => 基本规则管理-IP黑名单-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，rules_ipblacklist表
                事件：点“添加”          【FFS_RuleIpBl_Add    】
                    <= 基本规则管理-IP黑名单-添加[2]，IP地址[4]                                                                                           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-添加-成功[2]                                                                                                 C
                    => 基本规则管理-IP黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_bl_add(uint32_t ip);
                事件：点“全部删除”      【FFS_RuleIpBl_Enable 】
                    <= 基本规则管理-IP黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-IP黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_bl_del_all();
                事件：点“激活全部”      【FFS_RuleIpBl_Disable】
                    <= 基本规则管理-IP黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-IP黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_bl_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleIpBl_Cls    】
                    <= 基本规则管理-IP黑名单-禁用全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-禁用全部-成功[2]                                                                                             C
                    => 基本规则管理-IP黑名单-禁用全部-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_bl_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleIpBl_Edit   】
                    <= 基本规则管理-IP黑名单-编辑[2]，旧IP地址[4]，新IP地址[4]                                                                            S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-IP黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_ip_bl_del(uint32_t ip);     // 旧IP地址
                        添加：bool stub_ip_bl_add(uint32_t ip);     // 新IP地址
                事件：点“删除”          【FFS_RuleIpBl_Del    】
                    <= 基本规则管理-IP黑名单-删除[2]，IP地址[4]                                                                                          S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-删除-成功[2]                                                                                                 C
                    => 基本规则管理-IP黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_bl_del(uint32_t ip);
                备注
                    客户端数据库文件sec_base.db，数据库表rules_ipblacklist
                    IP地址为4个字节
            IP用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleIpAu_List   】
                    <= 基本规则管理-IP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]}+                                        C
                    => 基本规则管理-IP用户自定义-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，rules_ipaudit表
                事件：点“添加”          【FFS_RuleIpAu_Add    】
                    <= 基本规则管理-IP用户自定义-添加[2]，IP地址[4]，告警级别[1]                                                                              S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP用户自定义-添加-成功[2]                                                                                                 C
                    => 基本规则管理-IP用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_audit_add(uint32_t ip, uint32_t level);
                事件：点“全部删除”      【FFS_RuleIpAu_Enable 】
                    <= 基本规则管理-IP用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP用户自定义-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-IP用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_audit_del_all();
                事件：点“编辑”          【FFS_RuleIpAu_Edit   】
                    <= 基本规则管理-IP用户自定义-编辑[2]，旧IP地址[4]，新IP地址[4]，告警级别[1]                                                               S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP用户自定义-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-IP用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_ip_audit_del(uint32_t ip);                     // 旧IP地址
                        添加：bool stub_ip_audit_add(uint32_t ip, uint32_t level);     // 新IP地址
                事件：点“删除”          【FFS_RuleIpAu_Del    】
                    <= 基本规则管理-IP黑名单-删除[2]，IP地址[4]                                                                                           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP黑名单-删除-成功[2]                                                                                                 C
                    => 基本规则管理-IP黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_ip_audit_del(uint32_t ip);
                备注
                    客户端数据库文件sec_base.db，数据库表rules_ipaudit
                    IP地址为4个字节
        安全域规则
            优先级配置
                事件：刷新 / 点指定页数   【FFS_RuleSzPri_List   】
                    <= 基本规则管理-优先级配置-获取[2]，起始索引(从0开始)[4]，数量[4]
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-优先级配置-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，名称长度[2:n]，名称[n]，优先级ID[1]}+
                    => 基本规则管理-优先级配置-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，safezone_pri表
                事件：点“添加”          【FFS_RuleSzPri_Add    】
                    <= 基本规则管理-优先级配置-添加[2]，名称长度[2:n]，名称[n]，优先级ID[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-优先级配置-添加-成功[2]
                    => 基本规则管理-优先级配置-添加-失败[2]，失败原因[1]

                    接口定义：数据库sec_base.db，safezone_pri表，自行添加
                事件：点“全部删除”      【FFS_RuleSzPri_Enable 】
                    <= 基本规则管理-优先级配置-全部删除[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-优先级配置-全部删除-成功[2]
                    => 基本规则管理-优先级配置-全部删除-失败[2]，失败原因[1]

                    接口定义：数据库sec_base.db，safezone_pri表，自行清空
                事件：点“编辑”          【FFS_RuleSzPri_Edit   】
                    <= 基本规则管理-优先级配置-编辑[2]，数据库ID[4]，名称长度[2:n]，名称[n]，优先级ID[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-优先级配置-编辑-成功[2]
                    => 基本规则管理-优先级配置-编辑-失败[2]，失败原因[1]

                    接口定义：数据库sec_base.db，safezone_pri表，自行编辑（先删除后添加）
                事件：点“删除”          【FFS_RuleSzPri_Del    】
                    <= 基本规则管理-优先级配置-删除[2]，数据库ID[4]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-优先级配置-删除-成功[2]
                    => 基本规则管理-优先级配置-删除-失败[2]，失败原因[1]

                    接口定义：数据库sec_base.db，safezone_pri表，自行删除对应数据
            MAC安全域
                事件：刷新 / 点指定页数   【FFS_RuleSzMac_List   】
                    <= 基本规则管理-MAC安全域-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-MAC安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，MAC地址[6]，优先级ID[1]}+                          C
                    => 基本规则管理-MAC安全域-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，safezone_l2表
                事件：点“添加”          【FFS_RuleSzMac_Add    】
                    <= 基本规则管理-MAC安全域-添加[2]，MAC地址[6]，优先级ID[1]                                                                             S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-MAC安全域-添加-成功[2]                                                                                                 C
                    => 基本规则管理-MAC安全域-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l2_add(uint8_t *mac, uint32_t pri);
                事件：点“全部删除”      【FFS_RuleSzMac_Enable 】
                    <= 基本规则管理-MAC安全域-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-MAC安全域-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-MAC安全域-全部删除-失败[2]，失败原因[1]

                    接口定义：自行清空数据库
                事件：点“激活全部”      【FFS_RuleSzMac_Disable】
                    <= 基本规则管理-MAC安全域-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-MAC安全域-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-MAC安全域-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l2_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleSzMac_Cls    】
                    <= 基本规则管理-MAC安全域-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-MAC安全域-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-MAC安全域-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l2_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleSzMac_Edit   】
                    <= 基本规则管理-MAC安全域-编辑[2]，旧数据库ID[4]，MAC地址[6]，优先级ID[1]                                                              S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-MAC安全域-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-MAC安全域-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_safezone_l2_del(uint32_t id);
                        添加：bool stub_safezone_l2_add(uint8_t *mac, uint32_t pri);
                事件：点“删除”          【FFS_RuleSzMac_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-MAC安全域-删除-成功[2]                                                                                                 C
                    => 基本规则管理-MAC安全域-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l2_del(uint32_t id);
                备注
                    客户端数据库文件sec_base.db，数据库表safezone_l2
                    数据库ID为4个字节
            IP安全域
                事件：刷新 / 点指定页数   【FFS_RuleSzIp_List   】
                    <= 基本规则管理-IP安全域-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4]，掩码[4]，优先级ID[1]}+                  C
                    => 基本规则管理-IP安全域-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，safezone_l3表
                事件：点“添加”          【FFS_RuleSzIp_Add    】
                    <= 基本规则管理-IP安全域-添加[2]，IP地址[4]，掩码[4]，优先级ID[1]                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP安全域-添加-成功[2]                                                                                                 C
                    => 基本规则管理-IP安全域-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l3_add(uint32_t ip, uint32_t mask, uint32_t pri);
                事件：点“全部删除”      【FFS_RuleSzIp_Enable 】
                    <= 基本规则管理-IP安全域-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP安全域-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-IP安全域-全部删除-失败[2]，失败原因[1]

                    接口定义：用户自行清空数据库
                事件：点“激活全部”      【FFS_RuleSzIp_Disable】
                    <= 基本规则管理-IP安全域-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP安全域-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-IP安全域-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l3_state(bool state);                                           //state=true
                事件：点“禁用全部”      【FFS_RuleSzIp_Cls    】
                    <= 基本规则管理-IP安全域-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP安全域-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-IP安全域-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l3_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleSzIp_Edit   】
                    <= 基本规则管理-IP安全域-编辑[2]，旧数据库ID[4]，IP地址[4]，掩码[4]，优先级ID[1]                                                      S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP安全域-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-IP安全域-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_safezone_l3_del(uint32_t id); //旧数据库ID
                        添加：bool stub_safezone_l3_add(uint32_t ip, uint32_t mask, uint32_t pri);  //IP地址，掩码，优先级
                事件：点“删除”          【FFS_RuleSzIp_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                 S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-IP安全域-删除-成功[2]                                                                                                 C
                    => 基本规则管理-IP安全域-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l3_del(uint32_t id);
                备注
                    客户端数据库文件sec_base.db，数据库表safezone_l3
                    数据库ID为4个字节
            传输层安全域
                事件：刷新 / 点指定页数   【FFS_RuleSzTrans_List   】
                    <= 基本规则管理-传输层安全域-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-传输层安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，IP地址[4], 掩码[4], 起始端口[2], 目的端口[2], 优先级[1]}+
                    => 基本规则管理-传输层安全域-获取失败[2]，失败原因[1]                                                                                     C

                    接口定义：用sqlite读数据库sec_base.db，safezone_l4表
                事件：点“添加”          【FFS_RuleSzTrans_Add    】
                    <= 基本规则管理-传输层安全域-添加[2]，IP地址[4], 掩码[4], 起始端口[2], 目的端口[2], 优先级[1]                                             S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-传输层安全域-添加-成功[2]                                                                                                 C
                    => 基本规则管理-传输层安全域-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l4_add(uint32_t ip, uint32_t mask, uint16_t port_s, uint16_t port_e, uint32_t pri);
                事件：点“全部删除”      【FFS_RuleSzTrans_Enable 】
                    <= 基本规则管理-传输层安全域-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-传输层安全域-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-传输层安全域-全部删除-失败[2]，失败原因[1]

                    接口定义：用户自行清空数据库
                事件：点“激活全部”      【FFS_RuleSzTrans_Disable】
                    <= 基本规则管理-传输层安全域-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-传输层安全域-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-传输层安全域-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l4_state(bool state);    //state=true
                事件：点“禁用全部”      【FFS_RuleSzTrans_Cls    】
                    <= 基本规则管理-传输层安全域-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-传输层安全域-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-传输层安全域-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l4_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleSzTrans_Edit   】
                    <= 基本规则管理-传输层安全域-编辑[2]，旧数据库ID[4]，IP地址[4], 掩码[4], 起始端口[2], 目的端口[2], 优先级[1]                              S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-传输层安全域-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-传输层安全域-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_safezone_l3_del(uint32_t id); //旧数据库ID
                        添加：bool stub_safezone_l4_add(uint32_t ip, uint32_t mask, uint16_t port_s, uint16_t port_e, uint32_t pri);
                事件：点“删除”          【FFS_RuleSzTrans_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-传输层安全域-删除-成功[2]                                                                                                 C
                    => 基本规则管理-传输层安全域-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_safezone_l4_del(uint32_t id);
                备注
                    客户端数据库文件sec_base.db，数据库表safezone_l4
                    数据库ID为4个字节
        TCP规则
            TCP黑名单
                事件：刷新 / 点指定页数   【FFS_RuleTcpBl_List   】
                    <= 基本规则管理-TCP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-TCP黑名单-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=0 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleTcpBl_Add    】
                    <= 基本规则管理-TCP黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP黑名单-添加-成功[2]                                                                                                 C
                    => 基本规则管理-TCP黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                事件：点“全部删除”      【FFS_RuleTcpBl_Enable 】
                    <= 基本规则管理-TCP黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP黑名单-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-TCP黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_blacklist_del_all();
                事件：点“激活全部”      【FFS_RuleTcpBl_Disable】
                    <= 基本规则管理-TCP黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP黑名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-TCP黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_blacklist_state(bool state);    //state=true
                事件：点“禁用全部”      【FFS_RuleTcpBl_Cls    】
                    <= 基本规则管理-TCP黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP黑名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-TCP黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_blacklist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleTcpBl_Edit   】
                    <= 基本规则管理-TCP黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP黑名单-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-TCP黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_tcp_blacklist_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_tcp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束
                事件：点“删除”          【FFS_RuleTcpBl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP黑名单-删除-成功[2]                                                                                                 C
                    => 基本规则管理-TCP黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_blacklist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleTcpBl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-TCP黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-TCP黑名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-TCP黑名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_tcp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP黑名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-TCP黑名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-TCP黑名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-TCP黑名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP黑名单）
                事件：点“导出”          【FFS_RuleTcpBl_Export 】
                    <= 基本规则管理-TCP黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-TCP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-TCP黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP黑名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=0
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
            TCP白名单
                事件：刷新 / 点指定页数   【FFS_RuleTcpWl_List   】
                    <= 基本规则管理-TCP白名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-TCP白名单-获取失败[2]，失败原因[1]
                                                                                                                                                           C
                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=1 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleTcpWl_Add    】
                    <= 基本规则管理-TCP白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP白名单-添加-成功[2]                                                                                                 C
                    => 基本规则管理-TCP白名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                事件：点“全部删除”      【FFS_RuleTcpWl_Enable 】
                    <= 基本规则管理-TCP白名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP白名单-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-TCP白名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleTcpWl_Disable】
                    <= 基本规则管理-TCP白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP白名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-TCP白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_whitelist_state(bool state);    //state=true
                事件：点“禁用全部”      【FFS_RuleTcpWl_Cls    】
                    <= 基本规则管理-TCP白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP白名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-TCP白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_whitelist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleTcpWl_Edit   】
                    <= 基本规则管理-TCP白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP白名单-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-TCP白名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_tcp_whitelist_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_tcp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束
                事件：点“删除”          【FFS_RuleTcpWl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP白名单-删除-成功[2]                                                                                                 C
                    => 基本规则管理-TCP白名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_whitelist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleTcpWl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-TCP白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-TCP白名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-TCP白名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_tcp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP白名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-TCP白名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-TCP白名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-TCP白名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP白名单）
                事件：点“导出”          【FFS_RuleTcpWl_Export 】
                    <= 基本规则管理-TCP白名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-TCP白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-TCP白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP白名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=1
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
            TCP无条件信任
                事件：刷新 / 点指定页数   【FFS_RuleTcpTrust_List   】
                    <= 基本规则管理-TCP无条件信任-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP无条件信任-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-TCP无条件信任-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=3 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleTcpTrust_Add    】
                    <= 基本规则管理-TCP无条件信任-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP无条件信任-添加-成功[2]                                                                                                 C
                    => 基本规则管理-TCP无条件信任-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_trust_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                事件：点“全部删除”      【FFS_RuleTcpTrust_Enable 】
                    <= 基本规则管理-TCP无条件信任-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP无条件信任-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-TCP无条件信任-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_trust_del_all();
                事件：点“编辑”          【FFS_RuleTcpTrust_Edit   】
                    <= 基本规则管理-TCP无条件信任-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP无条件信任-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-TCP无条件信任-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_tcp_trust_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_tcp_trust_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束

                事件：点“删除”          【FFS_RuleTcpTrust_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                      S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP无条件信任-删除-成功[2]                                                                                                 C
                    => 基本规则管理-TCP无条件信任-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_trust_del(uint32_t id);
                事件：点“导入”          【FFS_RuleTcpTrust_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-TCP无条件信任-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-TCP无条件信任-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-TCP无条件信任-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_tcp_trust_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP无条件信任）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-TCP无条件信任-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-TCP无条件信任-成功[2]                                                                                                 C
                        => 基本规则管理-所有-TCP无条件信任-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP无条件信任）
                事件：点“导出”          【FFS_RuleTcpTrust_Export 】
                    <= 基本规则管理-TCP无条件信任-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-TCP无条件信任-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-TCP无条件信任-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP无条件信任-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=3
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
            TCP用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleTcpAu_List   】
                    <= 基本规则管理-TCP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]}+
                    => 基本规则管理-TCP用户自定义-获取失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=2 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleTcpAu_Add    】
                    <= 基本规则管理-TCP用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP用户自定义-添加-成功[2]                                                                                                 C
                    => 基本规则管理-TCP用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end, uint32_t level);
                事件：点“全部删除”      【FFS_RuleTcpAu_Enable 】
                    <= 基本规则管理-TCP用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP用户自定义-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-TCP用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_audit_del_all();
                事件：点“编辑”          【FFS_RuleTcpAu_Edit   】
                    <= 基本规则管理-TCP用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                                                                                                                                                              S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP用户自定义-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-TCP用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_tcp_audit_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_tcp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end, uint32_t level);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束, 告警级别
                事件：点“删除”          【FFS_RuleTcpAu_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-TCP用户自定义-删除-成功[2]                                                                                                 C
                    => 基本规则管理-TCP用户自定义-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_tcp_audit_del(uint32_t id);
                事件：点“导入”          【FFS_RuleTcpAu_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-TCP用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-TCP用户自定义-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-TCP用户自定义-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_tcp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end, uint32_t level);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP用户自定义）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-TCP用户自定义-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-TCP用户自定义-成功[2]                                                                                                 C
                        => 基本规则管理-所有-TCP用户自定义-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如TCP用户自定义）
                事件：点“导出”          【FFS_RuleTcpAu_Export 】
                    <= 基本规则管理-TCP用户自定义-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-TCP用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-TCP用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-TCP用户自定义-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=2 opcode=2
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
        UDP规则
            UDP黑名单
                事件：刷新 / 点指定页数   【FFS_RuleUdpBl_List   】
                    <= 基本规则管理-UDP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-UDP黑名单-获取失败[2]，失败原因[1]                                                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=0 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleUdpBl_Add    】
                    <= 基本规则管理-UDP黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP黑名单-添加-成功[2]                                                                                                 C
                    => 基本规则管理-UDP黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                事件：点“全部删除”      【FFS_RuleUdpBl_Enable 】
                    <= 基本规则管理-UDP黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP黑名单-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-UDP黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_blacklist_del_all();
                事件：点“激活全部”      【FFS_RuleUdpBl_Disable】
                    <= 基本规则管理-UDP黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP黑名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-UDP黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_blacklist_state(bool state);    //state=true
                事件：点“禁用全部”      【FFS_RuleUdpBl_Cls    】
                                <= 基本规则管理-UDP黑名单-激活全部[2]                                                                                      S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP黑名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-UDP黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_blacklist_state(bool state);    //state=true
                事件：点“编辑”          【FFS_RuleUdpBl_Edit   】
                    <= 基本规则管理-UDP黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP黑名单-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-UDP黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_udp_blacklist_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_udp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束
                事件：点“删除”          【FFS_RuleUdpBl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP黑名单-删除-成功[2]                                                                                                 C
                    => 基本规则管理-UDP黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_blacklist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleUdpBl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-UDP黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-UDP黑名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-UDP黑名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_udp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP黑名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-UDP黑名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-UDP黑名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-UDP黑名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP黑名单）
                事件：点“导出”          【FFS_RuleUdpBl_Export 】
                    <= 基本规则管理-UDP黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-UDP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-UDP黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP黑名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=0
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
            UDP白名单
                事件：刷新 / 点指定页数   【FFS_RuleUdpWl_List   】
                    <= 基本规则管理-UDP白名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-UDP白名单-获取失败[2]，失败原因[1]                                                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=1 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleUdpWl_Add    】
                    <= 基本规则管理-UDP白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                          S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP白名单-添加-成功[2]                                                                                                 C
                    => 基本规则管理-UDP白名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                事件：点“全部删除”      【FFS_RuleUdpWl_Enable 】
                    <= 基本规则管理-UDP白名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP白名单-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-UDP白名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleUdpWl_Disable】
                    <= 基本规则管理-UDP白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP白名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-UDP白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_whitelist_state(bool state);    //state=true
                事件：点“禁用全部”      【FFS_RuleUdpWl_Cls    】
                    <= 基本规则管理-UDP白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP白名单-激活全部-成功[2]                                                                                             C
                    => 基本规则管理-UDP白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_whitelist_state(bool state);    //state=true
                事件：点“编辑”          【FFS_RuleUdpWl_Edit   】
                    <= 基本规则管理-UDP白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP白名单-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-UDP白名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_udp_whitelist_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_udp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束
                事件：点“删除”          【FFS_RuleUdpWl_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP白名单-删除-成功[2]                                                                                                 C
                    => 基本规则管理-UDP白名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_whitelist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleUdpWl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-UDP白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-UDP白名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-UDP白名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_udp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP白名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-UDP白名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-UDP白名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-UDP白名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP白名单）
                事件：点“导出”          【FFS_RuleUdpWl_Export 】
                    <= 基本规则管理-UDP白名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-UDP白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-UDP白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP白名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=1
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
            UDP无条件信任
                事件：刷新 / 点指定页数   【FFS_RuleUdpTrust_List   】
                    <= 基本规则管理-UDP无条件信任-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP无条件信任-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]}+
                    => 基本规则管理-UDP无条件信任-获取失败[2]，失败原因[1]                                                                                   C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=3 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleUdpTrust_Add    】
                    <= 基本规则管理-UDP无条件信任-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                              S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP无条件信任-添加-成功[2]                                                                                                 C
                    => 基本规则管理-UDP无条件信任-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_trust_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                事件：点“全部删除”      【FFS_RuleUdpTrust_Enable 】
                    <= 基本规则管理-UDP无条件信任-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP无条件信任-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-UDP无条件信任-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_trust_del_all();
                事件：点“编辑”          【FFS_RuleUdpTrust_Edit   】
                    <= 基本规则管理-UDP无条件信任-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP无条件信任-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-UDP无条件信任-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_udp_trust_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_udp_trust_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束

                事件：点“删除”          【FFS_RuleUdpTrust_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                      S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP无条件信任-删除-成功[2]                                                                                                 C
                    => 基本规则管理-UDP无条件信任-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_trust_del(uint32_t id);
                事件：点“导入”          【FFS_RuleUdpTrust_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-UDP无条件信任-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-UDP无条件信任-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-UDP无条件信任-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_udp_trust_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP无条件信任）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-UDP无条件信任-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-UDP无条件信任-成功[2]                                                                                                 C
                        => 基本规则管理-所有-UDP无条件信任-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP无条件信任）
                事件：点“导出”          【FFS_RuleUdpTrust_Export 】
                    <= 基本规则管理-UDP无条件信任-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-UDP无条件信任-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-UDP无条件信任-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP无条件信任-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=3
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
            UDP用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleUdpAu_List   】
                    <= 基本规则管理-TCP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]}+
                    => 基本规则管理-UDP用户自定义-获取失败[2]，失败原因[1]                                                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=2 limit(此处为索引,15);
                        数据库多出来的字段不填写到协议数据包里面
                事件：点“添加”          【FFS_RuleUdpAu_Add    】
                    <= 基本规则管理-UDP用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2] ，告警级别[1]
                                                                                                                                                              S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP用户自定义-添加-成功[2]                                                                                                 C
                    => 基本规则管理-UDP用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end, uint32_t level);
                事件：点“全部删除”      【FFS_RuleUdpAu_Enable 】
                    <= 基本规则管理-UDP用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP用户自定义-全部删除-成功[2]                                                                                             C
                    => 基本规则管理-UDP用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_audit_del_all();
                事件：点“编辑”          【FFS_RuleUdpAu_Edit   】
                    <= 基本规则管理-UDP用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2] ，告警级别[1]
                                                                                                                                                               S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP用户自定义-编辑-成功[2]                                                                                                 C
                    => 基本规则管理-UDP用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_udp_audit_del(uint32_t id);		//旧数据库ID
                        添加：bool stub_udp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end, uint32_t level);	//起始时间(时分), 结束时间(时分), 源IP地址, 源IP掩码, 目的IP,目的IP掩码, 源端口起始, 源端口结束, 目的端口起始, 目的端口结束
                事件：点“删除”          【FFS_RuleUdpAu_Del    】
                    <= 基本规则管理--删除[2]，数据库ID[4]                                                                                                      S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 基本规则管理-UDP用户自定义-删除-成功[2]                                                                                                 C
                    => 基本规则管理-UDP用户自定义-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_udp_audit_del(uint32_t id);
                事件：点“导入”          【FFS_RuleUdpAu_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-UDP用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源端口起始[2], 源端口结束[2], 目的端口起始[2], 目的端口结束[2]，告警级别[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-UDP用户自定义-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-UDP用户自定义-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_udp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t portsrc_start, uint16_t portsrc_end, uint16_t portdst_start, uint16_t portdst_end, uint32_t level);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP用户自定义）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-UDP用户自定义-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-UDP用户自定义-成功[2]                                                                                                 C
                        => 基本规则管理-所有-UDP用户自定义-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如UDP用户自定义）
                事件：点“导出”          【FFS_RuleUdpAu_Export 】
                    <= 基本规则管理-UDP用户自定义-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-UDP用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-UDP用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-UDP用户自定义-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_layer4表
                        select * from rules_layer4 where protocol=3 opcode=2
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，数据库表rules_layer4
                    数据库ID为4个字节
    工控规则管理
        ModbusTCP规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleModbusBl_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-ModbusTCP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]}+
                    => 工控规则管理-ModbusTCP黑名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_mbtcp表
                        select * from rules_mbtcp where opcode=0 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleModbusBl_Add    】
                    <= 工控规则管理-ModbusTCP黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP黑名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-ModbusTCP黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e);
                事件：点“全部删除”      【FFS_RuleModbusBl_Cls    】
                    <= 工控规则管理-ModbusTCP黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP黑名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_blacklist_del_all();
                事件：点“激活全部”      【FFS_RuleModbusBl_Enable 】
                    <= 工控规则管理-ModbusTCP黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_blacklist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleModbusBl_Disable】
                    <= 工控规则管理-ModbusTCP黑名单-禁用全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP黑名单-禁用全部-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP黑名单-禁用全部-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_blacklist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleModbusBl_Edit   】
                    <= 工控规则管理-ModbusTCP黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP黑名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-ModbusTCP黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_mbtcp_blacklist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_mbtcp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e);         // 新数据
                事件：点“删除”          【FFS_RuleModbusBl_Del    】
                    <= 工控规则管理-ModbusTCP黑名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP黑名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_blacklist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleModbusBl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-ModbusTCP黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-ModbusTCP黑名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-ModbusTCP黑名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_mbtcp_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如ModbusTCP黑名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-ModbusTCP黑名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-ModbusTCP黑名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-ModbusTCP黑名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如ModbusTCP黑名单）
                事件：点“导出”          【FFS_RuleModbusBl_Export 】
                    <= 基本规则管理-ModbusTCP黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-ModbusTCP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-ModbusTCP黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-ModbusTCP黑名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_mbtcp表
                        select * from rules_mbtcp where opcode=0
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_mbtcp表
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleModbusWl_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-ModbusTCP白名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]}+
                    => 工控规则管理-ModbusTCP白名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_mbtcp表
                        select * from rules_mbtcp where opcode=1 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleModbusWl_Add    】
                    <= 工控规则管理-ModbusTCP白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP白名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-ModbusTCP白名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e);
                事件：点“全部删除”      【FFS_RuleModbusWl_Cls    】
                    <= 工控规则管理-ModbusTCP白名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP白名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP白名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleModbusWl_Enable 】
                    <= 工控规则管理-ModbusTCP白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_whitelist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleModbusWl_Disable】
                    <= 工控规则管理-ModbusTCP白名单-禁用全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP白名单-禁用全部-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP白名单-禁用全部-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_whitelist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleModbusWl_Edit   】
                    <= 工控规则管理-ModbusTCP白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP白名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-ModbusTCP白名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_mbtcp_whitelist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_mbtcp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e);         // 新数据
                事件：点“删除”          【FFS_RuleModbusWl_Del    】
                    <= 工控规则管理-ModbusTCP白名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP白名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP白名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_whitelist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleModbusWl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-ModbusTCP白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-ModbusTCP白名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-ModbusTCP白名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_mbtcp_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如ModbusTCP白名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-ModbusTCP白名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-ModbusTCP白名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-ModbusTCP白名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如ModbusTCP白名单）
                事件：点“导出”          【FFS_RuleModbusWl_Export 】
                    <= 基本规则管理-ModbusTCP白名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-ModbusTCP白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-ModbusTCP白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-ModbusTCP白名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_mbtcp表
                        select * from rules_mbtcp where opcode=1
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_mbtcp表
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleModbusAu_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-ModbusTCP用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]}+
                    => 工控规则管理-ModbusTCP用户自定义-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_mbtcp表
                        select * from rules_mbtcp where opcode=2 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleModbusAu_Add    】
                    <= 工控规则管理-ModbusTCP用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP用户自定义-添加-成功[2]                                                                                                 C
                    => 工控规则管理-ModbusTCP用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e, uint32_t level);
                事件：点“全部删除”      【FFS_RuleModbusAu_Enable 】
                    <= 工控规则管理-ModbusTCP用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP用户自定义-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_audit_del_all();
                事件：点“编辑”          【FFS_RuleModbusAu_Edit   】
                    <= 工控规则管理-ModbusTCP用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP用户自定义-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-ModbusTCP用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_mbtcp_audit_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_mbtcp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e, uint32_t level);         // 新数据
                事件：点“删除”          【FFS_RuleModbusAu_Del    】
                    <= 工控规则管理-ModbusTCP用户自定义-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-ModbusTCP用户自定义-删除-成功[2]                                                                                             C
                    => 工控规则管理-ModbusTCP用户自定义-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_mbtcp_audit_del(uint32_t id);
                事件：点“导入”          【FFS_RuleModbusAu_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-ModbusTCP用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 功能码[2], 公共地址起始[2], 公共地址结束[2]，告警级别[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-ModbusTCP用户自定义-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-ModbusTCP用户自定义-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_mbtcp_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t func_code, uint16_t comm_addr_s, uint16_t comm_addr_e, uint32_t level);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如ModbusTCP用户自定义）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-ModbusTCP用户自定义-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-ModbusTCP用户自定义-成功[2]                                                                                                 C
                        => 基本规则管理-所有-ModbusTCP用户自定义-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如ModbusTCP用户自定义）
                事件：点“导出”          【FFS_RuleModbusAu_Export 】
                    <= 基本规则管理-ModbusTCP用户自定义-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-ModbusTCP用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-ModbusTCP用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-ModbusTCP用户自定义-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_mbtcp表
                        select * from rules_mbtcp where opcode=2
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_mbtcp表
        IEC104规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleIec104Bl_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-IEC104黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]}+
                    => 工控规则管理-IEC104黑名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_iec104表
                        select * from rules_iec104 where opcode=0 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleIec104Bl_Add    】
                    <= 工控规则管理-IEC104黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104黑名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-IEC104黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e);
                事件：点“全部删除”      【FFS_RuleIec104Bl_Cls    】
                    <= 工控规则管理-IEC104黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104黑名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-IEC104黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_blacklist_del_all();
                事件：点“激活全部”      【FFS_RuleIec104Bl_Enable 】
                    <= 工控规则管理-IEC104黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-IEC104黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_blacklist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleIec104Bl_Disable】
                    <= 工控规则管理-IEC104黑名单-禁用全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104黑名单-禁用全部-成功[2]                                                                                             C
                    => 工控规则管理-IEC104黑名单-禁用全部-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_blacklist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleIec104Bl_Edit   】
                    <= 工控规则管理-IEC104黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104黑名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-IEC104黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_iec104_blacklist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_iec104_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e);          // 新数据
                事件：点“删除”          【FFS_RuleIec104Bl_Del    】
                    <= 工控规则管理-IEC104黑名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104黑名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-IEC104黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_blacklist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleIec104Bl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-IEC104黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-IEC104黑名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-IEC104黑名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_iec104_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如IEC104黑名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-IEC104黑名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-IEC104黑名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-IEC104黑名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如IEC104黑名单）
                事件：点“导出”          【FFS_RuleIec104Bl_Export 】
                    <= 基本规则管理-IEC104黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-IEC104黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-IEC104黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-IEC104黑名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_iec104表
                        select * from rules_iec104 where opcode=0
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_iec104表
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleIec104Wl_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-IEC104白名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]}+
                    => 工控规则管理-IEC104白名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_iec104表
                        select * from rules_iec104 where opcode=1 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleIec104Wl_Add    】
                    <= 工控规则管理-IEC104白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104白名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-IEC104白名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e);
                事件：点“全部删除”      【FFS_RuleIec104Wl_Cls    】
                    <= 工控规则管理-IEC104白名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104白名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-IEC104白名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleIec104Wl_Enable 】
                    <= 工控规则管理-IEC104白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-IEC104白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_whitelist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleIec104Wl_Disable】
                    <= 工控规则管理-IEC104白名单-禁用全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104白名单-禁用全部-成功[2]                                                                                             C
                    => 工控规则管理-IEC104白名单-禁用全部-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_whitelist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleIec104Wl_Edit   】
                    <= 工控规则管理-IEC104白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104白名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-IEC104白名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_iec104_whitelist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_iec104_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e);          // 新数据
                事件：点“删除”          【FFS_RuleIec104Wl_Del    】
                    <= 工控规则管理-IEC104白名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104白名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-IEC104白名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_whitelist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleIec104Wl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-IEC104白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-IEC104白名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-IEC104白名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_iec104_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如IEC104白名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-IEC104白名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-IEC104白名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-IEC104白名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如IEC104白名单）
                事件：点“导出”          【FFS_RuleIec104Wl_Export 】
                    <= 基本规则管理-IEC104白名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-IEC104白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-IEC104白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-IEC104白名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_iec104表
                        select * from rules_iec104 where opcode=1
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_iec104表
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleIec104Au_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-IEC104用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]，告警级别[1]}+
                    => 工控规则管理-IEC104用户自定义-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_iec104表
                        select * from rules_iec104 where opcode=2 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleIec104Au_Add    】
                    <= 工控规则管理-IEC104用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]，告警级别[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104用户自定义-添加-成功[2]                                                                                                 C
                    => 工控规则管理-IEC104用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e, uint32_t level);
                事件：点“全部删除”      【FFS_RuleIec104Au_Cls    】
                    <= 工控规则管理-IEC104用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104用户自定义-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-IEC104用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_audit_del_all();
                事件：点“编辑”          【FFS_RuleIec104Au_Edit   】
                    <= 工控规则管理-IEC104用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2]，告警级别[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104用户自定义-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-IEC104用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_iec104_audit_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_iec104_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e, uint32_t level);            // 新数据
                事件：点“删除”          【FFS_RuleIec104Au_Del    】
                    <= 工控规则管理-IEC104用户自定义-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-IEC104用户自定义-删除-成功[2]                                                                                             C
                    => 工控规则管理-IEC104用户自定义-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_iec104_audit_del(uint32_t id);
                事件：点“导入”          【FFS_RuleIec104Au_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-IEC104用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 公共地址起始[2], 公共地址结束[2], 信息体地址起始[2], 信息体地址结束[2], 告警级别[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-IEC104用户自定义-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-IEC104用户自定义-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_iec104_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t comm_addr_s, uint16_t comm_addr_e, uint16_t infobj_addr_s, uint16_t infobj_addr_e, uint32_t level);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如IEC104用户自定义）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-IEC104用户自定义-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-IEC104用户自定义-成功[2]                                                                                                 C
                        => 基本规则管理-所有-IEC104用户自定义-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如IEC104用户自定义）
                事件：点“导出”          【FFS_RuleIec104Au_Export 】
                    <= 基本规则管理-IEC104用户自定义-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-IEC104用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-IEC104用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-IEC104用户自定义-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_iec104表
                        select * from rules_iec104 where opcode=2
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_iec104表
        DNP3规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleDnp3Bl_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-DNP3黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-DNP3黑名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_dnp3表
                        select * from rules_dnp3 where opcode=0 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleDnp3Bl_Add    】
                    <= 工控规则管理-DNP3黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3黑名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-DNP3黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleDnp3Bl_Cls    】
                    <= 工控规则管理-DNP3黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3黑名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-DNP3黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleDnp3Bl_Enable 】
					<= 工控规则管理-DNP3黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-DNP3黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_blacklist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleDnp3Bl_Disable】
					<= 工控规则管理-DNP3黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-DNP3黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_blacklist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleDnp3Bl_Edit   】
                    <= 工控规则管理-DNP3黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3黑名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-DNP3黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_dnp3_whitelist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_dnp3_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t match_all);              // 新数据
                事件：点“删除”          【FFS_RuleDnp3Bl_Del    】
                    <= 工控规则管理-DNP3黑名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3黑名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-DNP3黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleDnp3Bl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-DNP3黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-DNP3黑名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-DNP3黑名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_dnp3_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如DNP3黑名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-DNP3黑名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-DNP3黑名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-DNP3黑名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如DNP3黑名单）
                事件：点“导出”          【FFS_RuleDnp3Bl_Export 】
                    <= 基本规则管理-DNP3黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-DNP3黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-DNP3黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-DNP3黑名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_dnp3表
                        select * from rules_dnp3 where opcode=0
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_dnp3表
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleDnp3Wl_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-DNP3白名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-DNP3白名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_dnp3表
                        select * from rules_dnp3 where opcode=1 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleDnp3Wl_Add    】
                    <= 工控规则管理-DNP3白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3白名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-DNP3白名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleDnp3Wl_Cls    】
                    <= 工控规则管理-DNP3白名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3白名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-DNP3白名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleDnp3Bl_Enable 】
					<= 工控规则管理-DNP3白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-DNP3白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleDnp3Bl_Disable】
					<= 工控规则管理-DNP3白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-DNP3白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleDnp3Wl_Edit   】
                    <= 工控规则管理-DNP3白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3白名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-DNP3白名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_dnp3_whitelist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_dnp3_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t match_all);              // 新数据
                事件：点“删除”          【FFS_RuleDnp3Wl_Del    】
                    <= 工控规则管理-DNP3白名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3白名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-DNP3白名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_whitelist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleDnp3Wl_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-DNP3白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-DNP3白名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-DNP3白名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_dnp3_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如DNP3白名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-DNP3白名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-DNP3白名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-DNP3白名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如DNP3白名单）
                事件：点“导出”          【FFS_RuleDnp3Wl_Export 】
                    <= 基本规则管理-DNP3白名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-DNP3白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-DNP3白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-DNP3白名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_dnp3表
                        select * from rules_dnp3 where opcode=1
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_dnp3表
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleDnp3Au_List   】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-DNP3用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-DNP3用户自定义-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_dnp3表
                        select * from rules_dnp3 where opcode=2 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleDnp3Au_Add    】
                    <= 工控规则管理-DNP3用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3用户自定义-添加-成功[2]                                                                                                 C
                    => 工控规则管理-DNP3用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t level, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleDnp3Au_Cls    】
                    <= 工控规则管理-DNP3用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3用户自定义-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-DNP3用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_audit_del_all();
                事件：点“编辑”          【FFS_RuleDnp3Au_Edit   】
                    <= 工控规则管理-DNP3用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3用户自定义-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-DNP3用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_dnp3_audit_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_dnp3_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t level, uint32_t match_all);              // 新数据
                事件：点“删除”          【FFS_RuleDnp3Au_Del    】
                    <= 工控规则管理-DNP3用户自定义-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-DNP3用户自定义-删除-成功[2]                                                                                             C
                    => 工控规则管理-DNP3用户自定义-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_dnp3_audit_del(uint32_t id);
                事件：点“导入”          【FFS_RuleDnp3Au_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-DNP3用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 源地址起始[2], 源地址结束[2], 目的地址起始[2], 目的地址结束[2], 功能码[1], 组号[1], 变体号[1], 告警级别[1], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-DNP3用户自定义-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-DNP3用户自定义-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_dnp3_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t addrsrc_s, uint16_t addrsrc_e, uint16_t addrdst_s, uint16_t addrdst_e, uint8_t func_code, uint8_t group_num, uint8_t var_num, uint32_t level, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如DNP3用户自定义）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-DNP3用户自定义-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-DNP3用户自定义-成功[2]                                                                                                 C
                        => 基本规则管理-所有-DNP3用户自定义-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如DNP3用户自定义）
                事件：点“导出”          【FFS_RuleDnp3Au_Export 】
                    <= 基本规则管理-DNP3用户自定义-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-DNP3用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-DNP3用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-DNP3用户自定义-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_dnp3表
                        select * from rules_dnp3 where opcode=2
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注
                    客户端数据库文件sec_base.db，rules_dnp3表
        S7规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleS7Bl_List   】
					服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-S7黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-S7黑名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_s7表
                        select * from rules_s7 where opcode=0 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleS7Bl_Add    】
					<= 工控规则管理-S7黑名单-添加[2]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7黑名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-S7黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleS7Bl_Cls    】
					<= 工控规则管理-S7黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7黑名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-S7黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_blacklist_del_all();
                事件：点“激活全部”      【FFS_RuleS7Bl_Enable 】
					<= 工控规则管理-S7黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-S7黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_blacklist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleS7Bl_Disable】
					<= 工控规则管理-S7黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-S7黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_blacklist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleS7Bl_Edit   】
					<= 工控规则管理-S7黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7黑名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-S7黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_s7_blacklist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_s7_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t match_all); );         // 新数据
                事件：点“删除”          【FFS_RuleS7Bl_Del    】
					<= 工控规则管理-S7黑名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7黑名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-S7黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_blacklist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleS7Au_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-S7黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-S7黑名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-S7黑名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_s7_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如S7黑名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-S7黑名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-S7黑名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-S7黑名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如S7黑名单）
                事件：点“导出”          【FFS_RuleS7Au_Export 】
                    <= 基本规则管理-S7黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-S7黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-S7黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-S7黑名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_s7表
                        select * from rules_s7 where opcode=0
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleS7Wl_List   】
					服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-S7白名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-S7白名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_s7表
                        select * from rules_s7 where opcode=1 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleS7Wl_Add    】
					<= 工控规则管理-S7白名单-添加[2]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7白名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-S7白名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleS7Wl_Cls   】
					<= 工控规则管理-S7白名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7白名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-S7白名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleS7Wl_Enable】
					<= 工控规则管理-S7白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-S7白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_whitelist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleS7Wl_Disable】
					<= 工控规则管理-S7白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-S7白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_whitelist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleS7Wl_Edit   】
					<= 工控规则管理-S7白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7白名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-S7白名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_s7_whitelist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_s7_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t match_all); );         // 新数据
                事件：点“删除”          【FFS_RuleS7Wl_Del    】
					<= 工控规则管理-S7白名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7白名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-S7白名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_whitelist_del(数据库ID[4]);
                事件：点“导入”          【FFS_RuleS7Au_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-S7白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-S7白名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-S7白名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_s7_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如S7白名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-S7白名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-S7白名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-S7白名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如S7白名单）
                事件：点“导出”          【FFS_RuleS7Au_Export 】
                    <= 基本规则管理-S7白名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-S7白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-S7白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-S7白名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_s7表
                        select * from rules_s7 where opcode=1
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleS7Au_List   】
					服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-S7用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]}+
                    => 工控规则管理-S7用户自定义-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_s7表
                        select * from rules_s7 where opcode=2 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleS7Au_Add    】
					<= 工控规则管理-S7用户自定义-添加[2]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7用户自定义-添加-成功[2]                                                                                                 C
                    => 工控规则管理-S7用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t level, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleS7Au_Cls    】
					<= 工控规则管理-S7用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7用户自定义-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-S7用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_audit_del_all();
                事件：点“编辑”          【FFS_RuleS7Au_Edit   】
					<= 工控规则管理-S7用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2]，结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7用户自定义-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-S7用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
                    接口定义：
                        删除：bool stub_s7_audit_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_s7_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t level, uint32_t match_all); );         // 新数据
                事件：点“删除”          【FFS_RuleS7Au_Del    】
					<= 工控规则管理-S7用户自定义-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-S7用户自定义-删除-成功[2]                                                                                             C
                    => 工控规则管理-S7用户自定义-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_s7_audit_del(数据库ID[4]);
                事件：点“导入”          【FFS_RuleS7Au_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-S7用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 读写属性[1], 起始地址[4], 结束地址[4], 寄存器区[1], DB区[2], 点类型[1], 告警级别[1], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-S7用户自定义-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-S7用户自定义-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_s7_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint8_t rwattr, uint32_t addr_s, uint32_t addr_e, uint8_t regnum, uint16_t dbnum, uint8_t dot_type, uint32_t level, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如S7用户自定义）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-S7用户自定义-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-S7用户自定义-成功[2]                                                                                                 C
                        => 基本规则管理-所有-S7用户自定义-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如S7用户自定义）
                事件：点“导出”          【FFS_RuleS7Au_Export 】
                    <= 基本规则管理-S7用户自定义-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-S7用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-S7用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-S7用户自定义-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_s7表
                        select * from rules_s7 where opcode=2
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
        OPC规则
            黑名单
                事件：刷新 / 点指定页数   【FFS_RuleOpcBl_List   】
					服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-OPC黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1])[1]}+
                    => 工控规则管理-OPC黑名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_opc表
                        select * from rules_opc where opcode=0 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleOpcBl_Add    】
					<= 工控规则管理-OPC黑名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC黑名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-OPC黑名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleOpcBl_Cls    】
					<= 工控规则管理-OPC黑名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC黑名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-OPC黑名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_blacklist_del_all();
                事件：点“激活全部”      【FFS_RuleOpcBl_Enable 】
					<= 工控规则管理-OPC黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-OPC黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_blacklist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleOpcBl_Disable】
					<= 工控规则管理-OPC黑名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC黑名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-OPC黑名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_blacklist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleOpcBl_Edit   】
					<= 工控规则管理-OPC黑名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC黑名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-OPC黑名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
						接口定义：
                        删除：bool stub_opc_blacklist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_opc_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t match_all);         // 新数据
                事件：点“删除”          【FFS_RuleOpcBl_Del    】
					<= 工控规则管理-OPC黑名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC黑名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-OPC黑名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_blacklist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleOpcAu_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-OPC黑名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-OPC黑名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-OPC黑名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_opc_blacklist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如OPC黑名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-OPC黑名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-OPC黑名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-OPC黑名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如OPC黑名单）
                事件：点“导出”          【FFS_RuleOpcAu_Export 】
                    <= 基本规则管理-OPC黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-OPC黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-OPC黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-OPC黑名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_opc表
                        select * from rules_opc where opcode=0
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            白名单
                事件：刷新 / 点指定页数   【FFS_RuleOpcWl_List   】
					服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-OPC白名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC白名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1])[1]}+
                    => 工控规则管理-OPC白名单-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_opc表
                        select * from rules_opc where opcode=1 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleOpcWl_Add    】
					<= 工控规则管理-OPC白名单-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC白名单-添加-成功[2]                                                                                                 C
                    => 工控规则管理-OPC白名单-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleOpcWl_Cls    】
					<= 工控规则管理-OPC白名单-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC白名单-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-OPC白名单-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_whitelist_del_all();
                事件：点“激活全部”      【FFS_RuleOpcWl_Enable 】
					<= 工控规则管理-OPC白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-OPC白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_whitelist_state(bool state);   // state=true
                事件：点“禁用全部”      【FFS_RuleOpcWl_Disable】
					<= 工控规则管理-OPC白名单-激活全部[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC白名单-激活全部-成功[2]                                                                                             C
                    => 工控规则管理-OPC白名单-激活全部-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_whitelist_state(bool state);   // state=false
                事件：点“编辑”          【FFS_RuleOpcWl_Edit   】
					<= 工控规则管理-OPC白名单-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC白名单-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-OPC白名单-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
						接口定义：
                        删除：bool stub_opc_whitelist_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_opc_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t match_all);         // 新数据
                事件：点“删除”          【FFS_RuleOpcWl_Del    】
					<= 工控规则管理-OPC白名单-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC白名单-删除-成功[2]                                                                                             C
                    => 工控规则管理-OPC白名单-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_whitelist_del(uint32_t id);
                事件：点“导入”          【FFS_RuleOpcAu_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-OPC白名单-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-OPC白名单-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-OPC白名单-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_opc_whitelist_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如OPC白名单）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-OPC白名单-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-OPC白名单-成功[2]                                                                                                 C
                        => 基本规则管理-所有-OPC白名单-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如OPC白名单）
                事件：点“导出”          【FFS_RuleOpcAu_Export 】
                    <= 基本规则管理-OPC白名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-OPC白名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-OPC白名单-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-OPC白名单-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_opc表
                        select * from rules_opc where opcode=1
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            用户自定义
                事件：刷新 / 点指定页数   【FFS_RuleOpcAu_List   】
					服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 工控规则管理-OPC用户自定义-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC用户自定义-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 告警级别[1],全匹配(0/1)[1]}+
                    => 工控规则管理-OPC用户自定义-获取失败[2]，失败原因[1]
                                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_base.db，rules_opc表
                        select * from rules_opc where opcode=2 limit(此处为索引,15);
                事件：点“添加”          【FFS_RuleOpcAu_Add    】
					<= 工控规则管理-OPC用户自定义-添加[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2],告警级别[1] 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC用户自定义-添加-成功[2]                                                                                                 C
                    => 工控规则管理-OPC用户自定义-添加-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t level, uint32_t match_all);
                事件：点“全部删除”      【FFS_RuleOpcAu_Cls    】
					<= 工控规则管理-OPC用户自定义-全部删除[2]                                                                                                  S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC用户自定义-全部删除-成功[2]                                                                                             C
                    => 工控规则管理-OPC用户自定义-全部删除-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_audit_del_all();
                事件：点“编辑”          【FFS_RuleOpcAu_Edit   】
					<= 工控规则管理-OPC用户自定义-编辑[2]，旧数据库ID[4]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 告警级别[1], 全匹配(0/1)[1]
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC用户自定义-编辑-成功[2]                                                                                                 C
                    => 工控规则管理-OPC用户自定义-编辑-失败[2]，失败原因[1]

                    客户端收到包然后针对编辑的操作流程：
                        1.删除目标规则
                        2.添加目标规则
						接口定义：
                        删除：bool stub_opc_audit_del(uint32_t id);                       // 旧数据库ID
                        添加：bool stub_opc_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint16_t method, uint32_t level, uint32_t match_all);         // 新数据
                事件：点“删除”          【FFS_RuleOpcAu_Del    】
					<= 工控规则管理-OPC用户自定义-删除[2]，数据库ID[4]                                                                                     S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 工控规则管理-OPC用户自定义-删除-成功[2]                                                                                             C
                    => 工控规则管理-OPC用户自定义-删除-失败[2]，失败原因[1]

                    接口定义：bool stub_opc_audit_del(uint32_t id);
                事件：点“导入”          【FFS_RuleOpcAu_Import 】
                    弹出选择文件对话框，在本linux服务器上选择一个xls文件（注意不是远程机器），用户点取消则返回
                    xls文件语法检查，成功要求见《语法检查》，若不符合，则弹框提示错误“规则文件格式有误，第xxxx行，第xxxx列，请修正后重新选择”，返回
                    循环读取每一行并发包，最后一行发包成功后再发包“完毕请指示”，界面显示小窗提示正在导入并阻塞用户输入（3分钟超时，如果超时则退出阻塞状态弹框提示“导入规则超时”），通信协议如下：
                        do
                        {
                            <= 基本规则管理-单条-OPC用户自定义-导入[2]，起始时间(时分)[2], 结束时间(时分)[2], 源IP[4], 源IP掩码[4], 目的IP[4], 目的IP掩码[4], 接口ID[2], 方法ID[2], 告警级别[1], 全匹配(0/1)[1]
                                                                                                                                                                 S
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            => 基本规则管理-单条-OPC用户自定义-导入-成功[2]                                                                                          C
                            => 基本规则管理-单条-OPC用户自定义-导入-失败[2]，失败原因[1]

                            接口定义(执行添加规则)：bool stub_opc_audit_add(uint16_t starttime, uint16_t endtime, uint32_t ipsrc, uint32_t ipsrc_mask, uint32_t ipdst, uint32_t ipdst_mask, uint16_t interface, uint32_t method, uint32_t level, uint32_t match_all);
                            >------------------------------------------------------------------------------------------------------------------------------------------
                            服务端收到包：                                                                                                                       S
                                成功（单条）：继续
                                失败（单条）：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如OPC用户自定义）
                        }
                        while (成功);   // 注意单条导入是阻塞状态，没返回成功或失败不允许继续导入，除非3分钟超时失败
                        <= 基本规则管理-所有-OPC用户自定义-完毕请指示[2]                                                                                           S
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        => 基本规则管理-所有-OPC用户自定义-成功[2]                                                                                                 C
                        => 基本规则管理-所有-OPC用户自定义-失败[2]，失败原因[1]
                        >------------------------------------------------------------------------------------------------------------------------------------------
                        服务端收到包：                                                                                                                         S
                            成功：弹框提示“所有规则已导入，共 xxxx 条”；执行刷新步骤（见本规则的刷新部分）
                            失败：退出阻塞状态；弹框提示失败“xxxxxx-规则导入失败，请联系目标机管理员”（前提是失败原因未知）或根据具体失败原因做提示（xxxx为规则名称，如OPC用户自定义）
                事件：点“导出”          【FFS_RuleOpcAu_Export 】
                    <= 基本规则管理-OPC用户自定义-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 基本规则管理-OPC用户自定义-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 基本规则管理-OPC用户自定义-导出-成功-无数据[2]，文件分配符[25]
                    => 基本规则管理-OPC用户自定义-导出-失败[2]，失败原因[1]                                                     C

                    接口定义：用sqlite读数据库sec_base.db，rules_opc表
                        select * from rules_opc where opcode=2
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
    规则学习
        ModbusTCP规则
            事件：点“开始学习”          【FFS_LrnModbus_Start】
                <= 规则学习-ModbusTCP-开始学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-ModbusTCP-开始学习-成功[2]                                                                       C
                => 规则学习-ModbusTCP-开始学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_mbtcp(bool state_on);   // state_on=true
            事件：点“停止学习”          【FFS_LrnModbus_End  】
                <= 规则学习-ModbusTCP-停止学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-ModbusTCP-停止学习-成功[2]                                                                       C
                => 规则学习-ModbusTCP-停止学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_mbtcp(bool state_on);   // state_on=false
            事件：点“编辑”              【FFS_LrnModbus_Edit 】
                <= 规则学习-ModbusTCP-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，功能码[2]，公共地址[2]                        S
                >---------------------------------------------------------------------------------------------------------------
                => 规则学习-ModbusTCP-编辑-成功[2]                                                                            C
                => 规则学习-ModbusTCP-编辑-失败[2]，失败原因[1]

                接口定义：更新数据库中表对应项
            事件：点“删除”              【FFS_LrnModbus_Del  】
                <= 规则学习-ModbusTCP-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-ModbusTCP-删除-成功[2]                                                                            C
                => 规则学习-ModbusTCP-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“清空”              【FFS_LrnModbus_Cls  】
                <= 规则学习-ModbusTCP-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-ModbusTCP-清空-成功[2]                                                                            C
                => 规则学习-ModbusTCP-清空-失败[2]，失败原因[1]

                接口定义：清空数据库表
            备注
                客户端数据库文件learn\sec_lr_mbtcp.db，数据库表lr_mbtcp
                IP地址为4个字节
        IEC104规则
            事件：点“开始学习”          【FFS_LrnIec104_Start】
                <= 规则学习-IEC104-开始学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-IEC104-开始学习-成功[2]                                                                       C
                => 规则学习-IEC104-开始学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_iec104(bool state_on);   // state_on=true
            事件：点“停止学习”          【FFS_LrnIec104_End  】
                <= 规则学习-IEC104-停止学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-IEC104-停止学习-成功[2]                                                                       C
                => 规则学习-IEC104-停止学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_iec104(bool state_on);   // state_on=false
            事件：点“编辑”              【FFS_LrnIec104_Edit 】
                <= 规则学习-IEC104-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，公共地址[2]，信息体地址[2]                    S
                >---------------------------------------------------------------------------------------------------------------
                => 规则学习-IEC104-编辑-成功[2]                                                                            C
                => 规则学习-IEC104-编辑-失败[2]，失败原因[1]

                接口定义：更新数据库中表对应项
            事件：点“删除”              【FFS_LrnIec104_Del  】
                <= 规则学习-IEC104-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-IEC104-删除-成功[2]                                                                            C
                => 规则学习-IEC104-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“清空”              【FFS_LrnIec104_Cls  】
                <= 规则学习-IEC104-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-IEC104-清空-成功[2]                                                                            C
                => 规则学习-IEC104-清空-失败[2]，失败原因[1]

                接口定义：清空数据库表
            备注
                客户端数据库文件learn\sec_lr_iec104.db，数据库表lr_iec104
                IP地址为4个字节
        DNP3规则
            事件：点“开始学习”          【FFS_LrnDnp3_Start】
                <= 规则学习-DNP3-开始学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-DNP3-开始学习-成功[2]                                                                       C
                => 规则学习-DNP3-开始学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_dnp3(bool state_on);   // state_on=true
            事件：点“停止学习”          【FFS_LrnDnp3_End  】
                <= 规则学习-DNP3-停止学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-DNP3-停止学习-成功[2]                                                                       C
                => 规则学习-DNP3-停止学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_dnp3(bool state_on);   // state_on=false
            事件：点“编辑”              【FFS_LrnDnp3_Edit 】
                <= 规则学习-DNP3-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，功能码[1]，组号[1]，变体号[1]                 S
                >---------------------------------------------------------------------------------------------------------------
                => 规则学习-DNP3-编辑-成功[2]                                                                            C
                => 规则学习-DNP3-编辑-失败[2]，失败原因[1]

                接口定义：更新数据库中表对应项
            事件：点“删除”              【FFS_LrnDnp3_Del  】
                <= 规则学习-DNP3-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-DNP3-删除-成功[2]                                                                            C
                => 规则学习-DNP3-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“清空”              【FFS_LrnDnp3_Cls  】
                <= 规则学习-DNP3-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-DNP3-清空-成功[2]                                                                            C
                => 规则学习-DNP3-清空-失败[2]，失败原因[1]

                接口定义：清空数据库表
            备注
                客户端数据库文件learn\sec_lr_dnp3.db，数据库表lr_dnp3
                IP地址为4个字节
        S7规则
            事件：点“开始学习”          【FFS_LrnS7_Start】
                <= 规则学习-S7-开始学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-S7-开始学习-成功[2]                                                                       C
                => 规则学习-S7-开始学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_s7(bool state_on);   // state_on=true
            事件：点“停止学习”          【FFS_LrnS7_End  】
                <= 规则学习-S7-停止学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-S7-停止学习-成功[2]                                                                       C
                => 规则学习-S7-停止学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_s7(bool state_on);   // state_on=false
            事件：点“编辑”              【FFS_LrnS7_Edit 】
                <= 规则学习-S7-编辑[2]，数据库ID[4]，源IP[4]，读写属性[1]、地址[4]、寄存器区[1]、DB区[2]、点类型[1]    S
                >---------------------------------------------------------------------------------------------------------------
                => 规则学习-S7-编辑-成功[2]                                                                            C
                => 规则学习-S7-编辑-失败[2]，失败原因[1]

                接口定义：更新数据库中表对应项
            事件：点“删除”              【FFS_LrnS7_Del  】
                <= 规则学习-S7-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-S7-删除-成功[2]                                                                            C
                => 规则学习-S7-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“清空”              【FFS_LrnS7_Cls  】
                <= 规则学习-S7-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-S7-清空-成功[2]                                                                            C
                => 规则学习-S7-清空-失败[2]，失败原因[1]

                接口定义：清空数据库表
            备注
                客户端数据库文件learn\sec_lr_s7.db，数据库表lr_s7
                IP地址为4个字节
        OPC规则
            事件：点“开始学习”          【FFS_LrnOpc_Start】
                <= 规则学习-OPC-开始学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-OPC-开始学习-成功[2]                                                                       C
                => 规则学习-OPC-开始学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_opc(bool state_on);   // state_on=true
            事件：点“停止学习”          【FFS_LrnOpc_End  】
                <= 规则学习-OPC-停止学习[2]                                                                            S
                >--------------------------------------------------------------------------------------------------------------
                => 规则学习-OPC-停止学习-成功[2]                                                                       C
                => 规则学习-OPC-停止学习-失败[2]，失败原因[1]

                接口定义：bool stub_learn_state_opc(bool state_on);   // state_on=false
            事件：点“编辑”              【FFS_LrnOpc_Edit 】
                <= 规则学习-OPC-编辑[2]，数据库ID[4]，源IP[4]，目的IP[4]，接口ID[2]，方法ID[2]                          S
                >---------------------------------------------------------------------------------------------------------------
                => 规则学习-OPC-编辑-成功[2]                                                                            C
                => 规则学习-OPC-编辑-失败[2]，失败原因[1]

                接口定义：更新数据库中表对应项
            事件：点“删除”              【FFS_LrnOpc_Del  】
                <= 规则学习-OPC-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-OPC-删除-成功[2]                                                                            C
                => 规则学习-OPC-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“清空”              【FFS_LrnOpc_Cls  】
                <= 规则学习-OPC-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 规则学习-OPC-清空-成功[2]                                                                            C
                => 规则学习-OPC-清空-失败[2]，失败原因[1]

                接口定义：清空数据库表
            备注
                客户端数据库文件learn\sec_lr_opc.db，数据库表lr_opc
                IP地址为4个字节
    日志管理
        全部日志
            事件：刷新 / 点指定页数       【FFS_LogAll_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-全部日志-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-全部日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，告警级别[1]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-全部日志-获取失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
            事件：点“查询”              【FFS_LogAll_Query 】
                <= 日志管理-全部日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，告警级别[1]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                          目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                          规则ID：如果查询中不包含规则ID，则规则ID为0xffffffff，否则为规则ID指定值
                          告警级别：如果查询中不包含告警级别，则告警级别为0xff，否则为告警级别指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分
                    查询成功：=> 日志管理-全部日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，告警级别[1]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-全部日志-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
            事件：点“清空”              【FFS_LogAll_Cls   】
                <= 日志管理-全部日志-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-全部日志-清空-成功[2]                                                                            C
                => 日志管理-全部日志-清空-失败[2]，失败原因[1]

                接口定义：清空数据库表
            事件：点“删除”              【FFS_LogAll_Del   】
                <= 日志管理-全部日志-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-全部日志-删除-成功[2]                                                                            C
                => 日志管理-全部日志-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogAll_Export】
                <= 日志管理-全部日志-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-全部日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-全部日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-全部日志-导出-失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            备注：
                客户端数据库文件sec_log.db，log表
                IP地址为4个字节
        基本规则告警
            MAC黑名单
                事件：刷新 / 点指定页数       【FFS_LogRuleMac_List  】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 日志管理-MAC黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 日志管理-MAC黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    => 日志管理-MAC黑名单-获取失败[2]，失败原因[1]
                                                                                                                                                       C
                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%MAC黑名单%" limit(此处为索引,15);
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    服务端注意：如果收到的数据包中：规则ID为-1，则在界面上填无                                                                         S
                事件：点“查询”              【FFS_LogRuleMac_Query 】
                    <= 日志管理-MAC黑名单-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                        备注：索引根据当前页数算出，数量=15（每页15条）
                              查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                        字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                              数量：=15
                              时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                              源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                              目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                              规则ID：如果查询中不包含规则ID，则规则ID为0xffffffff，否则为规则ID指定值
                              标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                              内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本               S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                 C
                        查询成功：=> 日志管理-MAC黑名单-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                        查询失败：=> 日志管理-MAC黑名单-查询失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%MAC黑名单%" and (.........此处填查询语句) limit(此处为索引,15);
                事件：点“清空”              【FFS_LogRuleMac_Cls   】
                    <= 日志管理-MAC黑名单-清空[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-MAC黑名单-清空-成功[2]                                                                            C
                    => 日志管理-MAC黑名单-清空-失败[2]，失败原因[1]

                    接口定义：数据库sec_log.db，log表
                        delete from log where caption like "%MAC黑名单%";
                事件：点“删除”              【FFS_LogRuleMac_Del   】
                    <= 日志管理-MAC黑名单-删除[2]，数据库ID[4]                                                                    S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-MAC黑名单-删除-成功[2]                                                                            C
                    => 日志管理-MAC黑名单-删除-失败[2]，失败原因[1]

                    接口定义：删除数据库中表对应项
                事件：点“导出”              【FFS_LogRuleMac_Export】
                    <= 日志管理-MAC黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 日志管理-MAC黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 日志管理-MAC黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 日志管理-MAC黑名单-导出-失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%MAC黑名单%"                                                        C
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                               S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注：
                    客户端数据库文件sec_log.db，log表
                    IP地址为4个字节
            IP黑名单
                事件：刷新 / 点指定页数       【FFS_LogRuleIp_List  】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 日志管理-IP黑名单-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 日志管理-IP黑名单-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    => 日志管理-IP黑名单-获取失败[2]，失败原因[1]
                                                                                                                                                      C
                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%IP黑名单%" limit(此处为索引,15);
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    服务端注意：如果收到的数据包中：规则ID为-1，则在界面上填无                                                                         S
                事件：点“查询”              【FFS_LogRuleIp_Query 】
                    <= 日志管理-IP黑名单-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                        备注：索引根据当前页数算出，数量=15（每页15条）
                              查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                        字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                              数量：=15
                              时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                              源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                              目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                              规则ID：如果查询中不包含规则ID，则规则ID为0xffffffff，否则为规则ID指定值
                              标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                              内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本              S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                C
                        查询成功：=> 日志管理-IP黑名单-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                        查询失败：=> 日志管理-IP黑名单-查询失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%IP黑名单%" and (.........此处填查询语句) limit(此处为索引,15);
                事件：点“清空”              【FFS_LogRuleIp_Cls   】
                    <= 日志管理-IP黑名单-清空[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-IP黑名单-清空-成功[2]                                                                            C
                    => 日志管理-IP黑名单-清空-失败[2]，失败原因[1]

                    接口定义：数据库sec_log.db，log表
                        delete from log where caption like "%IP黑名单%";
                事件：点“删除”              【FFS_LogRuleIp_Del   】
                    <= 日志管理-IP黑名单-删除[2]，数据库ID[4]                                                                    S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-IP黑名单-删除-成功[2]                                                                            C
                    => 日志管理-IP黑名单-删除-失败[2]，失败原因[1]

                    接口定义：删除数据库中表对应项
                事件：点“导出”              【FFS_LogRuleIp_Export】
                    <= 日志管理-IP黑名单-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 日志管理-IP黑名单-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 日志管理-IP黑名单-导出-成功-无数据[2]，文件分配符[25]
                    => 日志管理-IP黑名单-导出-失败[2]，失败原因[1]
                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%IP黑名单%"
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                              S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注：
                    客户端数据库文件sec_log.db，log表
                    IP地址为4个字节
            安全域
                事件：刷新 / 点指定页数       【FFS_LogRuleSz_List  】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 日志管理-安全域-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 日志管理-安全域-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    => 日志管理-安全域-获取失败[2]，失败原因[1]
                                                                                                                                                    C
                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%安全域%" limit(此处为索引,15);
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    服务端注意：如果收到的数据包中：源IP/目的IP为0，则在界面上填无，规则ID为-1，则在界面上填无                                       S
                事件：点“查询”              【FFS_LogRuleSz_Query 】
                    <= 日志管理-安全域-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                        备注：索引根据当前页数算出，数量=15（每页15条）
                              查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                        字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                              数量：=15
                              时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                              源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                              目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                              规则ID：如果查询中不包含规则ID，则规则ID为0xffffffff，否则为规则ID指定值
                              标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                              内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本            S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分              C
                        查询成功：=> 日志管理-安全域-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                        查询失败：=> 日志管理-安全域-查询失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%安全域%" and (.........此处填查询语句) limit(此处为索引,15);
                事件：点“清空”              【FFS_LogRuleSz_Cls   】
                    <= 日志管理-安全域-清空[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-安全域-清空-成功[2]                                                                            C
                    => 日志管理-安全域-清空-失败[2]，失败原因[1]

                    接口定义：数据库sec_log.db，log表
                        delete from log where caption like "%安全域%";
                事件：点“删除”              【FFS_LogRuleSz_Del   】
                    <= 日志管理-安全域-删除[2]，数据库ID[4]                                                                    S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-安全域-删除-成功[2]                                                                            C
                    => 日志管理-安全域-删除-失败[2]，失败原因[1]

                    接口定义：删除数据库中表对应项
                事件：点“导出”              【FFS_LogRuleSz_Export】
                    <= 日志管理-安全域-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 日志管理-安全域-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 日志管理-安全域-导出-成功-无数据[2]，文件分配符[25]
                    => 日志管理-安全域-导出-失败[2]，失败原因[1]                                                               C

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%安全域%"
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                             S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注：
                    客户端数据库文件sec_log.db，log表
                    IP地址为4个字节
            TCP
                事件：刷新 / 点指定页数       【FFS_LogRuleTcp_List  】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 日志管理-TCP-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 日志管理-TCP-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    => 日志管理-TCP-获取失败[2]，失败原因[1]
                                                                                                                                                 C
                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%tcp黑名单%" or caption like "%tcp白名单%" limit(此处为索引,15);
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    服务端注意：如果收到的数据包中：源IP/目的IP为0，则在界面上填无，规则ID为-1，则在界面上填无                                   S
                事件：点“查询”              【FFS_LogRuleTcp_Query 】
                    <= 日志管理-TCP-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                        备注：索引根据当前页数算出，数量=15（每页15条）
                              查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                        字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                              数量：=15
                              时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                              源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                              目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                              规则ID：如果查询中不包含规则ID，则规则ID为0xffffffff，否则为规则ID指定值
                              标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                              内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分             C
                        查询成功：=> 日志管理-TCP-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                        查询失败：=> 日志管理-TCP-查询失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where (caption like "%tcp黑名单%" or caption like "%tcp白名单%") and (.........此处填查询语句) limit(此处为索引,15);
                事件：点“清空”              【FFS_LogRuleTcp_Cls   】
                    <= 日志管理-TCP-清空[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-TCP-清空-成功[2]                                                                            C
                    => 日志管理-TCP-清空-失败[2]，失败原因[1]

                    接口定义：数据库sec_log.db，log表
                        delete from log where caption like "%tcp黑名单%" or caption like "%tcp白名单%";
                事件：点“删除”              【FFS_LogRuleTcp_Del   】
                    <= 日志管理-TCP-删除[2]，数据库ID[4]                                                                    S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-TCP-删除-成功[2]                                                                            C
                    => 日志管理-TCP-删除-失败[2]，失败原因[1]

                    接口定义：删除数据库中表对应项
                事件：点“导出”              【FFS_LogRuleTcp_Export】
                    <= 日志管理-TCP-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 日志管理-TCP-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 日志管理-TCP-导出-成功-无数据[2]，文件分配符[25]
                    => 日志管理-TCP-导出-失败[2]，失败原因[1]
                                                                                                                            C
                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%tcp黑名单%" or caption like "%tcp白名单%"
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                         S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注：
                    客户端数据库文件sec_log.db，log表
                    IP地址为4个字节
            UDP
                事件：刷新 / 点指定页数       【FFS_LogRuleUdp_List  】
                    服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                    <= 日志管理-UDP-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                        备注：索引根据当前页数算出，数量=15（每页15条）
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    => 日志管理-UDP-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    => 日志管理-UDP-获取失败[2]，失败原因[1]
                                                                                                                                                C
                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%udp黑名单%" or caption like "%udp白名单%" limit(此处为索引,15);
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    服务端注意：如果收到的数据包中：源IP/目的IP为0，则在界面上填无，规则ID为-1，则在界面上填无                                    S
                事件：点“查询”              【FFS_LogRuleUcp_Query 】
                    <= 日志管理-UDP-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                        备注：索引根据当前页数算出，数量=15（每页15条）
                              查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                        字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                              数量：=15
                              时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                              源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                              目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                              规则ID：如果查询中不包含规则ID，则规则ID为0xffffffff，否则为规则ID指定值
                              标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                              内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本           S
                    >------------------------------------------------------------------------------------------------------------------------------------------
                    客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分             C
                        查询成功：=> 日志管理-UDP-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                        查询失败：=> 日志管理-UDP-查询失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where (caption like "%udp黑名单%" or caption like "%udp白名单%") and (.........此处填查询语句) limit(此处为索引,15);
                事件：点“清空”              【FFS_LogRuleUdp_Cls   】
                    <= 日志管理-UDP-清空[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-UDP-清空-成功[2]                                                                            C
                    => 日志管理-UDP-清空-失败[2]，失败原因[1]

                    接口定义：数据库sec_log.db，log表
                        delete from log where caption like "%udp黑名单%" or caption like "%udp白名单%";
                事件：点“删除”              【FFS_LogRuleUdp_Del   】
                    <= 日志管理-UDP-删除[2]，数据库ID[4]                                                                    S
                    >-----------------------------------------------------------------------------------------------------------------
                    => 日志管理-UDP-删除-成功[2]                                                                            C
                    => 日志管理-UDP-删除-失败[2]，失败原因[1]

                    接口定义：删除数据库中表对应项
                事件：点“导出”              【FFS_LogRuleUdp_Export】
                    <= 日志管理-UDP-导出[2]                                                                                 S
                    >-----------------------------------------------------------------------------------------------------------------
                    客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                    => 日志管理-UDP-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                        备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                    => 日志管理-UDP-导出-成功-无数据[2]，文件分配符[25]
                    => 日志管理-UDP-导出-失败[2]，失败原因[1]

                    接口定义：用sqlite读数据库sec_log.db，log表
                        select * from log where caption like "%udp黑名单%" or caption like "%udp白名单%"                      C
                    >-----------------------------------------------------------------------------------------------------------------
                    服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                    如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
                备注：
                    客户端数据库文件sec_log.db，log表
                    IP地址为4个字节
        工控白名单告警
            事件：刷新 / 点指定页数       【FFS_LogRuleIndWl_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-工控白名单告警-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-工控白名单告警-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控白名单告警-获取失败[2]，失败原因[1]
                                                                                                                                                        C
                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%modbus-tcp 白%" or caption like "%iec104 白%" or caption like "%dnp3 白%" or caption like "%s7 白%" or caption like "%opc 白%" limit(此处为索引,15);
                >------------------------------------------------------------------------------------------------------------------------------------------
                服务端注意：如果收到的数据包中：源IP/目的IP为0，则在界面上填无                                    S
            事件：点“查询”              【FFS_LogRuleIndWl_Query 】
                <= 日志管理-工控白名单告警-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                          目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                    C
                    查询成功：=> 日志管理-工控白名单告警-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-工控白名单告警-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where (caption like "%modbus-tcp 白%" or caption like "%iec104 白%" or caption like "%dnp3 白%" or caption like "%s7 白%" or caption like "%opc 白%") and (.........此处填查询语句) limit(此处为索引,15);
            事件：点“清空”              【FFS_LogRuleIndWl_Cls   】
                <= 日志管理-工控白名单告警-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-工控白名单告警-清空-成功[2]                                                                            C
                => 日志管理-工控白名单告警-清空-失败[2]，失败原因[1]

                接口定义：数据库sec_log.db，log表
                    delete from log where caption like "%modbus-tcp 白%" or caption like "%iec104 白%" or caption like "%dnp3 白%" or caption like "%s7 白%" or caption like "%opc 白%";
            事件：点“删除”              【FFS_LogRuleIndWl_Del   】
                <= 日志管理-工控白名单告警-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-工控白名单告警-删除-成功[2]                                                                            C
                => 日志管理-工控白名单告警-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogRuleIndWl_Export】
                <= 日志管理-工控白名单告警-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-工控白名单告警-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-工控白名单告警-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-工控白名单告警-导出-失败[2]，失败原因[1]                                                     C

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%modbus-tcp 白%" or caption like "%iec104 白%" or caption like "%dnp3 白%" or caption like "%s7 白%" or caption like "%opc 白%"
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            备注：
                客户端数据库文件sec_log.db，log表
                IP地址为4个字节
        工控黑名单告警
            事件：刷新 / 点指定页数       【FFS_LogRuleIndBl_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-工控黑名单告警-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-工控黑名单告警-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控黑名单告警-获取失败[2]，失败原因[1]
                                                                                                                                                        C
                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%modbus-tcp 黑%" or caption like "%iec104 黑%" or caption like "%dnp3 黑%" or caption like "%s7 黑%" or caption like "%opc 黑%" limit(此处为索引,15);
                >------------------------------------------------------------------------------------------------------------------------------------------
                服务端注意：如果收到的数据包中：源IP/目的IP为0，则在界面上填无
            事件：点“查询”              【FFS_LogRuleIndBl_Query 】
                <= 日志管理-工控黑名单告警-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                          目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                          规则ID：如果查询中不包含规则ID，则规则ID为0xffffffff，否则为规则ID指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                    C
                    查询成功：=> 日志管理-工控黑名单告警-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，规则ID[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-工控黑名单告警-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where (caption like "%modbus-tcp 黑%" or caption like "%iec104 黑%" or caption like "%dnp3 黑%" or caption like "%s7 黑%" or caption like "%opc 黑%") and (.........此处填查询语句) limit(此处为索引,15);
            事件：点“清空”              【FFS_LogRuleIndBl_Cls   】
                <= 日志管理-工控黑名单告警-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-工控黑名单告警-清空-成功[2]                                                                            C
                => 日志管理-工控黑名单告警-清空-失败[2]，失败原因[1]

                接口定义：数据库sec_log.db，log表
                    delete from log where caption like "%modbus-tcp 黑%" or caption like "%iec104 黑%" or caption like "%dnp3 黑%" or caption like "%s7 黑%" or caption like "%opc 黑%";
            事件：点“删除”              【FFS_LogRuleIndBl_Del   】
                <= 日志管理-工控黑名单告警-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-工控黑名单告警-删除-成功[2]                                                                            C
                => 日志管理-工控黑名单告警-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogRuleIndBl_Export】
                <= 日志管理-工控黑名单告警-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-工控黑名单告警-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-工控黑名单告警-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-工控黑名单告警-导出-失败[2]，失败原因[1]                                                     C

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%modbus-tcp 黑%" or caption like "%iec104 黑%" or caption like "%dnp3 黑%" or caption like "%s7 黑%" or caption like "%opc 黑%"
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            备注：
                客户端数据库文件sec_log.db，log表
                IP地址为4个字节
        工控协议规约告警
            事件：刷新 / 点指定页数       【FFS_LogRuleIndEx_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-工控协议规约告警-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-工控协议规约告警-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-工控协议规约告警-获取失败[2]，失败原因[1]
                                                                                                                                                        C
                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%Modbus-TCP 包异常%" or caption like "%IEC104 包异常%" or caption like "%DNP3 包异常%" or caption like "%S7 包异常%" or caption like "%OPC 包异常%" limit(此处为索引,15);
                >------------------------------------------------------------------------------------------------------------------------------------------
                服务端注意：如果收到的数据包中：源IP/目的IP为0，则在界面上填无
            事件：点“查询”              【FFS_LogRuleIndEx_Query 】
                <= 日志管理-工控协议规约告警-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                          目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                    C
                    查询成功：=> 日志管理-工控协议规约告警-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-工控协议规约告警-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where (caption like "%Modbus-TCP 包异常%" or caption like "%IEC104 包异常%" or caption like "%DNP3 包异常%" or caption like "%S7 包异常%" or caption like "%OPC 包异常%") and (.........此处填查询语句) limit(此处为索引,15);
            事件：点“清空”              【FFS_LogRuleIndEx_Cls   】
                <= 日志管理-工控协议规约告警-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-工控协议规约告警-清空-成功[2]                                                                            C
                => 日志管理-工控协议规约告警-清空-失败[2]，失败原因[1]

                接口定义：数据库sec_log.db，log表
                    delete from log where caption like "%Modbus-TCP 包异常%" or caption like "%IEC104 包异常%" or caption like "%DNP3 包异常%" or caption like "%S7 包异常%" or caption like "%OPC 包异常%";
            事件：点“删除”              【FFS_LogRuleIndEx_Del   】
                <= 日志管理-工控协议规约告警-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-工控协议规约告警-删除-成功[2]                                                                            C
                => 日志管理-工控协议规约告警-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogRuleIndEx_Export】
                <= 日志管理-工控协议规约告警-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-工控协议规约告警-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-工控协议规约告警-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-工控协议规约告警-导出-失败[2]，失败原因[1]                                                     C

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%Modbus-TCP 包异常%" or caption like "%IEC104 包异常%" or caption like "%DNP3 包异常%" or caption like "%S7 包异常%" or caption like "%OPC 包异常%"
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            备注：
                客户端数据库文件sec_log.db，log表
                IP地址为4个字节
        地址欺骗日志
            事件：刷新 / 点指定页数       【FFS_LogArp_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-地址欺骗日志-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-地址欺骗日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-地址欺骗日志-获取失败[2]，失败原因[1]
                                                                                                                                                        C
                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%非法的ARP%" limit(此处为索引,15);
            事件：点“查询”              【FFS_LogArp_Query 】
                <= 日志管理-地址欺骗日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                    C
                    查询成功：=> 日志管理-地址欺骗日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-地址欺骗日志-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where (caption like "%非法的ARP%") and (.........此处填查询语句) limit(此处为索引,15);
            事件：点“清空”              【FFS_LogArp_Cls   】
                <= 日志管理-地址欺骗日志-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-地址欺骗日志-清空-成功[2]                                                                            C
                => 日志管理-地址欺骗日志-清空-失败[2]，失败原因[1]

                接口定义：数据库sec_log.db，log表
                    delete from log where caption like "%非法的ARP%";
            事件：点“删除”              【FFS_LogArp_Del   】
                <= 日志管理-地址欺骗日志-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-地址欺骗日志-删除-成功[2]                                                                            C
                => 日志管理-地址欺骗日志-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogArp_Export】
                <= 日志管理-地址欺骗日志-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-地址欺骗日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-地址欺骗日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-地址欺骗日志-导出-失败[2]，失败原因[1]                                                     C

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%非法的ARP%"
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            备注：
                客户端数据库文件sec_log.db，log表
        攻击日志
            事件：刷新 / 点指定页数       【FFS_LogAttack_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-攻击日志-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-攻击日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-攻击日志-获取失败[2]，失败原因[1]
                                                                                                                                                        C
                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%攻击%" limit(此处为索引,15);
                >------------------------------------------------------------------------------------------------------------------------------------------
                服务端注意：如果收到的数据包中：源IP/目的IP为0，则在界面上填无，规则ID为-1，则在界面上填无                                              S
            事件：点“查询”              【FFS_LogAttack_Query 】
                <= 日志管理-攻击日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          源IP：如果查询中不包含源IP，则全部为0xff，否则为源IP指定值
                          目的IP：如果查询中不包含目的IP，则全部为0xff，否则为目的IP指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                    C
                    查询成功：=> 日志管理-攻击日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，源IP[4]，目的IP[4]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-攻击日志-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
            事件：点“清空”              【FFS_LogAttack_Cls   】
                <= 日志管理-攻击日志-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-攻击日志-清空-成功[2]                                                                            C
                => 日志管理-攻击日志-清空-失败[2]，失败原因[1]

                接口定义：数据库sec_log.db，log表
                    delete from log where caption like "%攻击%";
            事件：点“删除”              【FFS_LogAttack_Del   】
                <= 日志管理-攻击日志-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-攻击日志-删除-成功[2]                                                                            C
                => 日志管理-攻击日志-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogAttack_Export】
                <= 日志管理-攻击日志-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-攻击日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-攻击日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-攻击日志-导出-失败[2]，失败原因[1]                                                     C

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%攻击%"
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
        网关运行日志
            事件：刷新 / 点指定页数       【FFS_LogRun_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-网关运行日志-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-网关运行日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-网关运行日志-获取失败[2]，失败原因[1]
                                                                                                                                                        C
                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%设备%" limit(此处为索引,15);
            事件：点“查询”              【FFS_LogRun_Query 】
                <= 日志管理-网关运行日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                    C
                    查询成功：=> 日志管理-网关运行日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-网关运行日志-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where (caption like "%设备%") and (.........此处填查询语句) limit(此处为索引,15);
            事件：点“清空”              【FFS_LogRun_Cls   】
                <= 日志管理-网关运行日志-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-网关运行日志-清空-成功[2]                                                                            C
                => 日志管理-网关运行日志-清空-失败[2]，失败原因[1]

                接口定义：数据库sec_log.db，log表
                    delete from log where caption like "%设备%";
            事件：点“删除”              【FFS_LogRun_Del   】
                <= 日志管理-网关运行日志-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-网关运行日志-删除-成功[2]                                                                            C
                => 日志管理-网关运行日志-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogRun_Export】
                <= 日志管理-网关运行日志-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-网关运行日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-网关运行日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-网关运行日志-导出-失败[2]，失败原因[1]                                                     C

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "%设备%"
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            备注：
                客户端数据库文件sec_log.db，log表
        系统日志
            事件：刷新 / 点指定页数       【FFS_LogSys_List  】
                服务端判断当前如果处于查询后的点击指定页数状态，则执行[事件：点“查询”]，否则继续
                <= 日志管理-系统日志-获取[2]，起始索引(从0开始)[4]，数量[4]                                                                       S
                    备注：索引根据当前页数算出，数量=15（每页15条）
                >------------------------------------------------------------------------------------------------------------------------------------------
                => 日志管理-系统日志-获取结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                => 日志管理-系统日志-获取失败[2]，失败原因[1]
                                                                                                                                                        C
                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "[系统]%" limit(此处为索引,15);
            事件：点“查询”              【FFS_LogSys_Query 】
                <= 日志管理-系统日志-查询[2]，起始索引(从0开始)[4]，数量[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]
                    备注：索引根据当前页数算出，数量=15（每页15条）
                          查询过程有2种：1.单一查询（只查一个字段） 2.复合查询（多字段一起查）；单一查询在对话框中只填写一个字段，复合查询填写多个字段
                    字段：起始索引：如果这是点查询按钮（而不是点查询后切换页码），则起始索引为0；如果是切换页码，则通过页数计算响应索引
                          数量：=15
                          时间：如果查询中不包含时间，则全部为0，否则为时间指定值
                          标题长度、标题：如果查询中不包含标题字符串，则字符串长度为0，并且没有标题字段；否则为具体标题长度和标题内容
                          内容长度、内容：如果查询中不包含内容字符串，则字符串长度为0，并且没有内容字段；否则为具体内容长度和内容文本                  S
                >------------------------------------------------------------------------------------------------------------------------------------------
                客户端收到包后，根据数据包内容构造查询sql语句，数据包内容可能表示这是单一查询或复合查询，见如上服务端"字段"定义部分                    C
                    查询成功：=> 日志管理-系统日志-查询结果[2]，起始索引(从0开始)[4]，数量[4]，{数据库ID[4]，时间[6t]，标题长度[2:c]，标题[c]，内容长度[2:t]，内容[t]}+
                    查询失败：=> 日志管理-系统日志-查询失败[2]，失败原因[1]

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where (caption like "[系统]%") and (.........此处填查询语句) limit(此处为索引,15);
            事件：点“清空”              【FFS_LogSys_Cls   】
                <= 日志管理-系统日志-清空[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-系统日志-清空-成功[2]                                                                            C
                => 日志管理-系统日志-清空-失败[2]，失败原因[1]

                接口定义：数据库sec_log.db，log表
                    delete from log where caption like "[系统]%";
            事件：点“删除”              【FFS_LogSys_Del   】
                <= 日志管理-系统日志-删除[2]，数据库ID[4]                                                                    S
                >-----------------------------------------------------------------------------------------------------------------
                => 日志管理-系统日志-删除-成功[2]                                                                            C
                => 日志管理-系统日志-删除-失败[2]，失败原因[1]

                接口定义：删除数据库中表对应项
            事件：点“导出”              【FFS_LogSys_Export】
                <= 日志管理-系统日志-导出[2]                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                客户端收到导出命令后，先在对应数据库中导出到一个临时文件，格式见《导出excel前自定义的临时文件格式说明》，然后将临时文件传送到服务端
                => 日志管理-系统日志-导出-成功-结果文件[2]，文件分配符[25]，标志位(正在传送0/最后一个包1)[1]，数据[last]
                    备注：参考《文件传送处理过程》；这个包是每个文件多次传送的，如1个10241字节的zlib压缩后的文件，先传10次，每次传1024字节数据，标志位为0。最后传1字节数据，标志位为1，表示传送完毕。如果文件不到1024字节（如500字节），那么直接传500字节数据，标志位为1
                => 日志管理-系统日志-导出-成功-无数据[2]，文件分配符[25]
                => 日志管理-系统日志-导出-失败[2]，失败原因[1]                                                     C

                接口定义：用sqlite读数据库sec_log.db，log表
                    select * from log where caption like "[系统]%"
                >-----------------------------------------------------------------------------------------------------------------
                服务端收到文件后，将传过来的文件转换成xls文件，并在浏览器端下载                                           S
                如果传过来的是失败，则弹框提示失败，见《失败原因对照表》
            备注：
                客户端数据库文件sec_log.db，log表
    系统设置
        功能设置
            事件：点“保存”              【FFS_Conf_Func】
                <= 系统设置-功能设置-保存[2]，DOS防护是否开启(开启1 关闭0)[1]，磁盘容量阈值(如果关闭则为0，MB为单位)[1]      S
                >-----------------------------------------------------------------------------------------------------------------
                => 系统设置-功能设置-保存-成功[2]                                                                            C
                => 系统设置-功能设置-保存-失败[2]，失败原因[1]

                接口定义：
                    DOS防护是否开启：
                        bool stub_dosdetect_on(void);
                        bool stub_dosdetect_off(void);
                    磁盘容量阈值：
                        bool stub_conf_diskfree_size(uint32_t size);    // size为MB
        告警级别设置
            事件：点“保存”              【FFS_Conf_Warnlevel】
                <= 系统设置-告警级别设置-保存[2]，MAC黑名单[1]，IP黑名单[1]，MAC安全域[1]，IP安全域[1]，传输层安全域[1]，TCP白名单[1]，TCP黑名单[1]，UDP白名单[1]，UDP黑名单[1]，MBTCP白名单[1]，MBTCP黑名单[1]，IEC104白名单[1]，IEC104黑名单[1]，DNP3白名单[1]，DNP3黑名单[1]，S7白名单[1]，S7黑名单[1]，OPC白名单[1]，OPC黑名单[1]
                    备注：以上都为告警级别（0无-8紧急）
                >-----------------------------------------------------------------------------------------------------------------
                => 系统设置-告警级别设置-保存-成功[2]                                                                            C
                => 系统设置-告警级别设置-保存-失败[2]，失败原因[1]

                接口定义：（具体函数自己对应）
                    bool stub_alarm_level_macbl(uint32_t level);
                    bool stub_alarm_level_ipbl(uint32_t level);
                    bool stub_alarm_level_safezone_l2(uint32_t level);
                    bool stub_alarm_level_safezone_l3(uint32_t level);
                    bool stub_alarm_level_safezone_l4(uint32_t level);
                    bool stub_alarm_level_baseline(uint32_t level);
                    bool stub_alarm_level_noflow(uint32_t level);
                    bool stub_alarm_level_tcp_bl(uint32_t level);
                    bool stub_alarm_level_tcp_wl(uint32_t level);
                    bool stub_alarm_level_udp_bl(uint32_t level);
                    bool stub_alarm_level_udp_wl(uint32_t level);
                    bool stub_alarm_level_mbtcp_bl(uint32_t level);
                    bool stub_alarm_level_mbtcp_wl(uint32_t level);
                    bool stub_alarm_level_iec104_bl(uint32_t level);
                    bool stub_alarm_level_iec104_wl(uint32_t level);
                    bool stub_alarm_level_dnp3_bl(uint32_t level);
                    bool stub_alarm_level_dnp3_wl(uint32_t level);
                    bool stub_alarm_level_s7_bl(uint32_t level);
                    bool stub_alarm_level_s7_wl(uint32_t level);
                    bool stub_alarm_level_opc_bl(uint32_t level);
                    bool stub_alarm_level_opc_wl(uint32_t level);
            事件：点“恢复默认”
                web界面上所有告警类型都选中“错误”
        告警邮箱设置
            事件：点“保存”              【FFS_Conf_AlarmEmail】
                <= 系统设置-告警邮箱设置-保存[2]，发件邮箱长度[2:s]，发件邮箱[s]，收件邮箱长度[2:r]，收件邮箱[r]，发件密码长度[2:p]，发件密码[p]
                                                                                                                                 S
                >-----------------------------------------------------------------------------------------------------------------
                => 系统设置-告警邮箱设置-保存-成功[2]                                                                            C
                => 系统设置-告警邮箱设置-保存-失败[2]，失败原因[1]

                接口定义：bool stub_alarm_email_set(char *from_ptr,char *from_password_ptr,char *to_ptr);
            事件：发测试邮件
                php调用外部util.so动态库，接口定义：bool send_email(char *from_ptr,char *from_password_ptr,char *to_ptr)

======================================================================================================================================================================================
5.客户端=>服务端 操作码表及回调函数表 （共792个）
======================================================================================================================================================================================

    操作中文描述                                            操作码                                  回调函数名
    --------------------------------------------------------------------------------------------------------------
    设备上线                                                OPFC_Connect                               FFC_Connect
    性能监控                                                OPFC_Monitor                               FFC_Monitor
    网关管理-内容                                           OPFC_Manage_Ret                            FFC_Manage_Ret
    网关管理-失败                                           OPFC_Manage_Err                            FFC_Manage_Err
    网关管理-模式设置-成功                                  OPFC_Manage_ModeSet_Ok                     FFC_Manage_ModeSet_Ok
    网关管理-模式设置-失败                                  OPFC_Manage_ModeSet_Err                    FFC_Manage_ModeSet_Err
    基本规则管理-ARP规则-内容                               OPFC_RuleArp_List_Ret                      FFC_RuleArp_List_Ret
    基本规则管理-ARP规则-失败                               OPFC_RuleArp_List_Err                      FFC_RuleArp_List_Err
    基本规则管理-ARP规则-添加-成功                          OPFC_RuleArp_Add_Ok                        FFC_RuleArp_Add_Ok
    基本规则管理-ARP规则-添加-失败                          OPFC_RuleArp_Add_Err                       FFC_RuleArp_Add_Err
    基本规则管理-ARP规则-激活全部-成功                      OPFC_RuleArp_Enable_Ok                     FFC_RuleArp_Enable_Ok
    基本规则管理-ARP规则-激活全部-失败                      OPFC_RuleArp_Enable_Err                    FFC_RuleArp_Enable_Err
    基本规则管理-ARP规则-禁用全部-成功                      OPFC_RuleArp_Disable_Ok                    FFC_RuleArp_Disable_Ok
    基本规则管理-ARP规则-禁用全部-失败                      OPFC_RuleArp_Disable_Err                   FFC_RuleArp_Disable_Err
    基本规则管理-ARP规则-全部删除-成功                      OPFC_RuleArp_Cls_Ok                        FFC_RuleArp_Cls_Ok
    基本规则管理-ARP规则-全部删除-失败                      OPFC_RuleArp_Cls_Err                       FFC_RuleArp_Cls_Err
    基本规则管理-ARP规则-编辑-成功                          OPFC_RuleArp_Edit_Ok                       FFC_RuleArp_Edit_Ok
    基本规则管理-ARP规则-编辑-失败                          OPFC_RuleArp_Edit_Err                      FFC_RuleArp_Edit_Err
    基本规则管理-ARP规则-删除-成功                          OPFC_RuleArp_Del_Ok                        FFC_RuleArp_Del_Ok
    基本规则管理-ARP规则-删除-失败                          OPFC_RuleArp_Del_Err                       FFC_RuleArp_Del_Err
    基本规则管理-Mac黑名单-内容                             OPFC_RuleMac_List_Ret                      FFC_RuleMac_List_Ret
    基本规则管理-Mac黑名单-失败                             OPFC_RuleMac_List_Err                      FFC_RuleMac_List_Err
    基本规则管理-Mac黑名单-添加-成功                        OPFC_RuleMac_Add_Ok                        FFC_RuleMac_Add_Ok
    基本规则管理-Mac黑名单-添加-失败                        OPFC_RuleMac_Add_Err                       FFC_RuleMac_Add_Err
    基本规则管理-MAC黑名单-全部删除-成功                    OPFC_RuleMac_Cls_Ok                        FFC_RuleMac_Cls_Ok
    基本规则管理-MAC黑名单-全部删除-失败                    OPFC_RuleMac_Cls_Err                       FFC_RuleMac_Cls_Err
    基本规则管理-MAC黑名单-激活全部-成功                    OPFC_RuleMac_Enable_Ok                     FFC_RuleMac_Enable_Ok
    基本规则管理-MAC黑名单-激活全部-失败                    OPFC_RuleMac_Enable_Err                    FFC_RuleMac_Enable_Err
    基本规则管理-MAC黑名单-禁用全部-成功                    OPFC_RuleMac_Disable_Ok                    FFC_RuleMac_Disable_Ok
    基本规则管理-MAC黑名单-禁用全部-失败                    OPFC_RuleMac_Disable_Err                   FFC_RuleMac_Disable_Err
    基本规则管理-MAC黑名单-编辑-成功                        OPFC_RuleMac_Edit_Ok                       FFC_RuleMac_Edit_Ok
    基本规则管理-MAC黑名单-编辑-失败                        OPFC_RuleMac_Edit_Err                      FFC_RuleMac_Edit_Err
    基本规则管理-MAC黑名单-删除-成功                        OPFC_RuleMac_Del_Ok                        FFC_RuleMac_Del_Ok
    基本规则管理-MAC黑名单-删除-失败                        OPFC_RuleMac_Del_Err                       FFC_RuleMac_Del_Err
    基本规则管理-Ip黑名单-内容                              OPFC_RuleIp_List_Ret                       FFC_RuleIp_List_Ret
    基本规则管理-Ip黑名单-失败                              OPFC_RuleIp_List_Err                       FFC_RuleIp_List_Err
    基本规则管理-Ip黑名单-添加-成功                         OPFC_RuleIp_Add_Ok                         FFC_RuleIp_Add_Ok
    基本规则管理-Ip黑名单-添加-失败                         OPFC_RuleIp_Add_Err                        FFC_RuleIp_Add_Err
    基本规则管理-Ip黑名单-全部删除-成功                     OPFC_RuleIp_Cls_Ok                         FFC_RuleIp_Cls_Ok
    基本规则管理-Ip黑名单-全部删除-失败                     OPFC_RuleIp_Cls_Err                        FFC_RuleIp_Cls_Err
    基本规则管理-Ip黑名单-激活全部-成功                     OPFC_RuleIp_Enable_Ok                      FFC_RuleIp_Enable_Ok
    基本规则管理-Ip黑名单-激活全部-失败                     OPFC_RuleIp_Enable_Err                     FFC_RuleIp_Enable_Err
    基本规则管理-Ip黑名单-禁用全部-成功                     OPFC_RuleIp_Disable_Ok                     FFC_RuleIp_Disable_Ok
    基本规则管理-Ip黑名单-禁用全部-失败                     OPFC_RuleIp_Disable_Err                    FFC_RuleIp_Disable_Err
    基本规则管理-Ip黑名单-编辑-成功                         OPFC_RuleIp_Edit_Ok                        FFC_RuleIp_Edit_Ok
    基本规则管理-Ip黑名单-编辑-失败                         OPFC_RuleIp_Edit_Err                       FFC_RuleIp_Edit_Err
    基本规则管理-Ip黑名单-删除-成功                         OPFC_RuleIp_Del_Ok                         FFC_RuleIp_Del_Ok
    基本规则管理-Ip黑名单-删除-失败                         OPFC_RuleIp_Del_Err                        FFC_RuleIp_Del_Err
    基本规则管理-IP用户自定义-内容                          OPFC_RuleIpAu_List_Ret                     FFC_RuleIpAu_List_Ret
    基本规则管理-IP用户自定义-失败                          OPFC_RuleIpAu_List_Err                     FFC_RuleIpAu_List_Err
    基本规则管理-IP用户自定义-添加-成功                     OPFC_RuleIpAu_Add_Ok                       FFC_RuleIpAu_Add_Ok
    基本规则管理-IP用户自定义-添加-失败                     OPFC_RuleIpAu_Add_Err                      FFC_RuleIpAu_Add_Err
    基本规则管理-IP用户自定义-全部删除-成功                 OPFC_RuleIpAu_Cls_Ok                       FFC_RuleIpAu_Cls_Ok
    基本规则管理-IP用户自定义-全部删除-失败                 OPFC_RuleIpAu_Cls_Err                      FFC_RuleIpAu_Cls_Err
    基本规则管理-IP用户自定义-编辑-成功                     OPFC_RuleIpAu_Edit_Ok                      FFC_RuleIpAu_Edit_Ok
    基本规则管理-IP用户自定义-编辑-失败                     OPFC_RuleIpAu_Edit_Err                     FFC_RuleIpAu_Edit_Err
    基本规则管理-IP用户自定义-删除-成功                     OPFC_RuleIpAu_Del_Ok                       FFC_RuleIpAu_Del_Ok
    基本规则管理-IP用户自定义-删除-失败                     OPFC_RuleIpAu_Del_Err                      FFC_RuleIpAu_Del_Err
    基本规则管理-优先级配置-内容                            OPFC_RuleSzPri_List_Ret                    FFC_RuleSzPri_List_Ret
    基本规则管理-优先级配置-失败                            OPFC_RuleSzPri_List_Err                    FFC_RuleSzPri_List_Err
    基本规则管理-优先级配置-添加-成功                       OPFC_RuleSzPri_Add_Ok                      FFC_RuleSzPri_Add_Ok
    基本规则管理-优先级配置-添加-失败                       OPFC_RuleSzPri_Add_Err                     FFC_RuleSzPri_Add_Err
    基本规则管理-优先级配置-全部删除-成功                   OPFC_RuleSzPri_Cls_Ok                      FFC_RuleSzPri_Cls_Ok
    基本规则管理-优先级配置-全部删除-失败                   OPFC_RuleSzPri_Cls_Err                     FFC_RuleSzPri_Cls_Err
    基本规则管理-优先级配置-编辑-成功                       OPFC_RuleSzPri_Edit_Ok                     FFC_RuleSzPri_Edit_Ok
    基本规则管理-优先级配置-编辑-失败                       OPFC_RuleSzPri_Edit_Err                    FFC_RuleSzPri_Edit_Err
    基本规则管理-优先级配置-删除-成功                       OPFC_RuleSzPri_Del_Ok                      FFC_RuleSzPri_Del_Ok
    基本规则管理-优先级配置-删除-失败                       OPFC_RuleSzPri_Del_Err                     FFC_RuleSzPri_Del_Err
    基本规则管理-MAC安全域-内容                             OPFC_RuleSzMac_List_Ret                    FFC_RuleSzMac_List_Ret
    基本规则管理-MAC安全域-失败                             OPFC_RuleSzMac_List_Err                    FFC_RuleSzMac_List_Err
    基本规则管理-MAC安全域-添加-成功                        OPFC_RuleSzMac_Add_Ok                      FFC_RuleSzMac_Add_Ok
    基本规则管理-MAC安全域-添加-失败                        OPFC_RuleSzMac_Add_Err                     FFC_RuleSzMac_Add_Err
    基本规则管理-MAC安全域-全部删除-成功                    OPFC_RuleSzMac_Cls_Ok                      FFC_RuleSzMac_Cls_Ok
    基本规则管理-MAC安全域-全部删除-失败                    OPFC_RuleSzMac_Cls_Err                     FFC_RuleSzMac_Cls_Err
    基本规则管理-MAC安全域-激活全部-成功                    OPFC_RuleSzMac_Enable_Ok                   FFC_RuleSzMac_Enable_Ok
    基本规则管理-MAC安全域-激活全部-失败                    OPFC_RuleSzMac_Enable_Err                  FFC_RuleSzMac_Enable_Err
    基本规则管理-MAC安全域-禁用全部-成功                    OPFC_RuleSzMac_Disable_Ok                  FFC_RuleSzMac_Disable_Ok
    基本规则管理-MAC安全域-禁用全部-失败                    OPFC_RuleSzMac_Disable_Err                 FFC_RuleSzMac_Disable_Err
    基本规则管理-MAC安全域-编辑-成功                        OPFC_RuleSzMac_Edit_Ok                     FFC_RuleSzMac_Edit_Ok
    基本规则管理-MAC安全域-编辑-失败                        OPFC_RuleSzMac_Edit_Err                    FFC_RuleSzMac_Edit_Err
    基本规则管理-MAC安全域-删除-成功                        OPFC_RuleSzMac_Del_Ok                      FFC_RuleSzMac_Del_Ok
    基本规则管理-MAC安全域-删除-失败                        OPFC_RuleSzMac_Del_Err                     FFC_RuleSzMac_Del_Err
    基本规则管理-IP安全域-内容                              OPFC_RuleSzIp_List_Ret                     FFC_RuleSzIp_List_Ret
    基本规则管理-IP安全域-失败                              OPFC_RuleSzIp_List_Err                     FFC_RuleSzIp_List_Err
    基本规则管理-IP安全域-添加-成功                         OPFC_RuleSzIp_Add_Ok                       FFC_RuleSzIp_Add_Ok
    基本规则管理-IP安全域-添加-失败                         OPFC_RuleSzIp_Add_Err                      FFC_RuleSzIp_Add_Err
    基本规则管理-IP安全域-全部删除-成功                     OPFC_RuleSzIp_Cls_Ok                       FFC_RuleSzIp_Cls_Ok
    基本规则管理-IP安全域-全部删除-失败                     OPFC_RuleSzIp_Cls_Err                      FFC_RuleSzIp_Cls_Err
    基本规则管理-IP安全域-激活全部-成功                     OPFC_RuleSzIp_Enable_Ok                    FFC_RuleSzIp_Enable_Ok
    基本规则管理-IP安全域-激活全部-失败                     OPFC_RuleSzIp_Enable_Err                   FFC_RuleSzIp_Enable_Err
    基本规则管理-IP安全域-禁用全部-成功                     OPFC_RuleSzIp_Disable_Ok                   FFC_RuleSzIp_Disable_Ok
    基本规则管理-IP安全域-禁用全部-失败                     OPFC_RuleSzIp_Disable_Err                  FFC_RuleSzIp_Disable_Err
    基本规则管理-IP安全域-编辑-成功                         OPFC_RuleSzIp_Edit_Ok                      FFC_RuleSzIp_Edit_Ok
    基本规则管理-IP安全域-编辑-失败                         OPFC_RuleSzIp_Edit_Err                     FFC_RuleSzIp_Edit_Err
    基本规则管理-IP安全域-删除-成功                         OPFC_RuleSzIp_Del_Ok                       FFC_RuleSzIp_Del_Ok
    基本规则管理-IP安全域-删除-失败                         OPFC_RuleSzIp_Del_Err                      FFC_RuleSzIp_Del_Err
    基本规则管理-传输层安全域-内容                          OPFC_RuleSzTrans_List_Ret                  FFC_RuleSzTrans_List_Ret
    基本规则管理-传输层安全域-失败                          OPFC_RuleSzTrans_List_Err                  FFC_RuleSzTrans_List_Err
    基本规则管理-传输层安全域-添加-成功                     OPFC_RuleSzTrans_Add_Ok                    FFC_RuleSzTrans_Add_Ok
    基本规则管理-传输层安全域-添加-失败                     OPFC_RuleSzTrans_Add_Err                   FFC_RuleSzTrans_Add_Err
    基本规则管理-传输层安全域-全部删除-成功                 OPFC_RuleSzTrans_Cls_Ok                    FFC_RuleSzTrans_Cls_Ok
    基本规则管理-传输层安全域-全部删除-失败                 OPFC_RuleSzTrans_Cls_Err                   FFC_RuleSzTrans_Cls_Err
    基本规则管理-传输层安全域-激活全部-成功                 OPFC_RuleSzTrans_Enable_Ok                 FFC_RuleSzTrans_Enable_Ok
    基本规则管理-传输层安全域-激活全部-失败                 OPFC_RuleSzTrans_Enable_Err                FFC_RuleSzTrans_Enable_Err
    基本规则管理-传输层安全域-禁用全部-成功                 OPFC_RuleSzTrans_Disable_Ok                FFC_RuleSzTrans_Disable_Ok
    基本规则管理-传输层安全域-禁用全部-失败                 OPFC_RuleSzTrans_Disable_Err               FFC_RuleSzTrans_Disable_Err
    基本规则管理-传输层安全域-编辑-成功                     OPFC_RuleSzTrans_Edit_Ok                   FFC_RuleSzTrans_Edit_Ok
    基本规则管理-传输层安全域-编辑-失败                     OPFC_RuleSzTrans_Edit_Err                  FFC_RuleSzTrans_Edit_Err
    基本规则管理-传输层安全域-删除-成功                     OPFC_RuleSzTrans_Del_Ok                    FFC_RuleSzTrans_Del_Ok
    基本规则管理-传输层安全域-删除-失败                     OPFC_RuleSzTrans_Del_Err                   FFC_RuleSzTrans_Del_Err
    基本规则管理-TCP黑名单-内容                             OPFC_RuleTcpBl_List_Ret                    FFC_RuleTcpBl_List_Ret
    基本规则管理-TCP黑名单-失败                             OPFC_RuleTcpBl_List_Err                    FFC_RuleTcpBl_List_Err
    基本规则管理-TCP黑名单-添加-成功                        OPFC_RuleTcpBl_Add_Ok                      FFC_RuleTcpBl_Add_Ok
    基本规则管理-TCP黑名单-添加-失败                        OPFC_RuleTcpBl_Add_Err                     FFC_RuleTcpBl_Add_Err
    基本规则管理-TCP黑名单-全部删除-成功                    OPFC_RuleTcpBl_Cls_Ok                      FFC_RuleTcpBl_Cls_Ok
    基本规则管理-TCP黑名单-全部删除-失败                    OPFC_RuleTcpBl_Cls_Err                     FFC_RuleTcpBl_Cls_Err
    基本规则管理-TCP黑名单-激活全部-成功                    OPFC_RuleTcpBl_Enable_Ok                   FFC_RuleTcpBl_Enable_Ok
    基本规则管理-TCP黑名单-激活全部-失败                    OPFC_RuleTcpBl_Enable_Err                  FFC_RuleTcpBl_Enable_Err
    基本规则管理-TCP黑名单-禁用全部-成功                    OPFC_RuleTcpBl_Disable_Ok                  FFC_RuleTcpBl_Disable_Ok
    基本规则管理-TCP黑名单-禁用全部-失败                    OPFC_RuleTcpBl_Disable_Err                 FFC_RuleTcpBl_Disable_Err
    基本规则管理-TCP黑名单-编辑-成功                        OPFC_RuleTcpBl_Edit_Ok                     FFC_RuleTcpBl_Edit_Ok
    基本规则管理-TCP黑名单-编辑-失败                        OPFC_RuleTcpBl_Edit_Err                    FFC_RuleTcpBl_Edit_Err
    基本规则管理-TCP黑名单-删除-成功                        OPFC_RuleTcpBl_Del_Ok                      FFC_RuleTcpBl_Del_Ok
    基本规则管理-TCP黑名单-删除-失败                        OPFC_RuleTcpBl_Del_Err                     FFC_RuleTcpBl_Del_Err
    基本规则管理-单条-TCP黑名单-导入-成功                   OPFC_RuleTcpBl_Import_One_Ok               FFC_RuleTcpBl_Import_One_Ok
    基本规则管理-单条-TCP黑名单-导入-失败                   OPFC_RuleTcpBl_Import_One_Err              FFC_RuleTcpBl_Import_One_Err
    基本规则管理-所有-TCP黑名单-导入-成功                   OPFC_RuleTcpBl_Import_All_Ok               FFC_RuleTcpBl_Import_All_Ok
    基本规则管理-所有-TCP黑名单-导入-失败                   OPFC_RuleTcpBl_Import_All_Err              FFC_RuleTcpBl_Import_All_Err
    基本规则管理-TCP黑名单-导出-内容                        OPFC_RuleTcpBl_Export_Ret                  FFC_RuleTcpBl_Export_Ret
    基本规则管理-TCP黑名单-导出-空                          OPFC_RuleTcpBl_Export_Empty                FFC_RuleTcpBl_Export_Empty
    基本规则管理-TCP黑名单-导出-失败                        OPFC_RuleTcpBl_Export_Err                  FFC_RuleTcpBl_Export_Err
    基本规则管理-TCP白名单-内容                             OPFC_RuleTcpWl_List_Ret                    FFC_RuleTcpWl_List_Ret
    基本规则管理-TCP白名单-失败                             OPFC_RuleTcpWl_List_Err                    FFC_RuleTcpWl_List_Err
    基本规则管理-TCP白名单-添加-成功                        OPFC_RuleTcpWl_Add_Ok                      FFC_RuleTcpWl_Add_Ok
    基本规则管理-TCP白名单-添加-失败                        OPFC_RuleTcpWl_Add_Err                     FFC_RuleTcpWl_Add_Err
    基本规则管理-TCP白名单-全部删除-成功                    OPFC_RuleTcpWl_Cls_Ok                      FFC_RuleTcpWl_Cls_Ok
    基本规则管理-TCP白名单-全部删除-失败                    OPFC_RuleTcpWl_Cls_Err                     FFC_RuleTcpWl_Cls_Err
    基本规则管理-TCP白名单-激活全部-成功                    OPFC_RuleTcpWl_Enable_Ok                   FFC_RuleTcpWl_Enable_Ok
    基本规则管理-TCP白名单-激活全部-失败                    OPFC_RuleTcpWl_Enable_Err                  FFC_RuleTcpWl_Enable_Err
    基本规则管理-TCP白名单-禁用全部-成功                    OPFC_RuleTcpWl_Disable_Ok                  FFC_RuleTcpWl_Disable_Ok
    基本规则管理-TCP白名单-禁用全部-失败                    OPFC_RuleTcpWl_Disable_Err                 FFC_RuleTcpWl_Disable_Err
    基本规则管理-TCP白名单-编辑-成功                        OPFC_RuleTcpWl_Edit_Ok                     FFC_RuleTcpWl_Edit_Ok
    基本规则管理-TCP白名单-编辑-失败                        OPFC_RuleTcpWl_Edit_Err                    FFC_RuleTcpWl_Edit_Err
    基本规则管理-TCP白名单-删除-成功                        OPFC_RuleTcpWl_Del_Ok                      FFC_RuleTcpWl_Del_Ok
    基本规则管理-TCP白名单-删除-失败                        OPFC_RuleTcpWl_Del_Err                     FFC_RuleTcpWl_Del_Err
    基本规则管理-单条-TCP白名单-导入-成功                   OPFC_RuleTcpWl_Import_One_Ok               FFC_RuleTcpWl_Import_One_Ok
    基本规则管理-单条-TCP白名单-导入-失败                   OPFC_RuleTcpWl_Import_One_Err              FFC_RuleTcpWl_Import_One_Err
    基本规则管理-所有-TCP白名单-导入-成功                   OPFC_RuleTcpWl_Import_All_Ok               FFC_RuleTcpWl_Import_All_Ok
    基本规则管理-所有-TCP白名单-导入-失败                   OPFC_RuleTcpWl_Import_All_Err              FFC_RuleTcpWl_Import_All_Err
    基本规则管理-TCP白名单-导出-内容                        OPFC_RuleTcpWl_Export_Ret                  FFC_RuleTcpWl_Export_Ret
    基本规则管理-TCP白名单-导出-空                          OPFC_RuleTcpWl_Export_Empty                FFC_RuleTcpWl_Export_Empty
    基本规则管理-TCP白名单-导出-失败                        OPFC_RuleTcpWl_Export_Err                  FFC_RuleTcpWl_Export_Err
    基本规则管理-TCP无条件信任-内容                         OPFC_RuleTcpTrust_List_Ret                 FFC_RuleTcpTrust_List_Ret
    基本规则管理-TCP无条件信任-失败                         OPFC_RuleTcpTrust_List_Err                 FFC_RuleTcpTrust_List_Err
    基本规则管理-TCP无条件信任-添加-成功                    OPFC_RuleTcpTrust_Add_Ok                   FFC_RuleTcpTrust_Add_Ok
    基本规则管理-TCP无条件信任-添加-失败                    OPFC_RuleTcpTrust_Add_Err                  FFC_RuleTcpTrust_Add_Err
    基本规则管理-TCP无条件信任-全部删除-成功                OPFC_RuleTcpTrust_Cls_Ok                   FFC_RuleTcpTrust_Cls_Ok
    基本规则管理-TCP无条件信任-全部删除-失败                OPFC_RuleTcpTrust_Cls_Err                  FFC_RuleTcpTrust_Cls_Err
    基本规则管理-TCP无条件信任-激活全部-成功                OPFC_RuleTcpTrust_Enable_Ok                FFC_RuleTcpTrust_Enable_Ok
    基本规则管理-TCP无条件信任-激活全部-失败                OPFC_RuleTcpTrust_Enable_Err               FFC_RuleTcpTrust_Enable_Err
    基本规则管理-TCP无条件信任-禁用全部-成功                OPFC_RuleTcpTrust_Disable_Ok               FFC_RuleTcpTrust_Disable_Ok
    基本规则管理-TCP无条件信任-禁用全部-失败                OPFC_RuleTcpTrust_Disable_Err              FFC_RuleTcpTrust_Disable_Err
    基本规则管理-TCP无条件信任-编辑-成功                    OPFC_RuleTcpTrust_Edit_Ok                  FFC_RuleTcpTrust_Edit_Ok
    基本规则管理-TCP无条件信任-编辑-失败                    OPFC_RuleTcpTrust_Edit_Err                 FFC_RuleTcpTrust_Edit_Err
    基本规则管理-TCP无条件信任-删除-成功                    OPFC_RuleTcpTrust_Del_Ok                   FFC_RuleTcpTrust_Del_Ok
    基本规则管理-TCP无条件信任-删除-失败                    OPFC_RuleTcpTrust_Del_Err                  FFC_RuleTcpTrust_Del_Err
    基本规则管理-单条-TCP无条件信任-导入-成功               OPFC_RuleTcpTrust_Import_One_Ok            FFC_RuleTcpTrust_Import_One_Ok
    基本规则管理-单条-TCP无条件信任-导入-失败               OPFC_RuleTcpTrust_Import_One_Err           FFC_RuleTcpTrust_Import_One_Err
    基本规则管理-所有-TCP无条件信任-导入-成功               OPFC_RuleTcpTrust_Import_All_Ok            FFC_RuleTcpTrust_Import_All_Ok
    基本规则管理-所有-TCP无条件信任-导入-失败               OPFC_RuleTcpTrust_Import_All_Err           FFC_RuleTcpTrust_Import_All_Err
    基本规则管理-TCP无条件信任-导出-内容                    OPFC_RuleTcpTrust_Export_Ret               FFC_RuleTcpTrust_Export_Ret
    基本规则管理-TCP无条件信任-导出-空                      OPFC_RuleTcpTrust_Export_Empty             FFC_RuleTcpTrust_Export_Empty
    基本规则管理-TCP无条件信任-导出-失败                    OPFC_RuleTcpTrust_Export_Err               FFC_RuleTcpTrust_Export_Err
    基本规则管理-TCP用户自定义-内容                         OPFC_RuleTcpAu_List_Ret                    FFC_RuleTcpAu_List_Ret
    基本规则管理-TCP用户自定义-失败                         OPFC_RuleTcpAu_List_Err                    FFC_RuleTcpAu_List_Err
    基本规则管理-TCP用户自定义-添加-成功                    OPFC_RuleTcpAu_Add_Ok                      FFC_RuleTcpAu_Add_Ok
    基本规则管理-TCP用户自定义-添加-失败                    OPFC_RuleTcpAu_Add_Err                     FFC_RuleTcpAu_Add_Err
    基本规则管理-TCP用户自定义-全部删除-成功                OPFC_RuleTcpAu_Cls_Ok                      FFC_RuleTcpAu_Cls_Ok
    基本规则管理-TCP用户自定义-全部删除-失败                OPFC_RuleTcpAu_Cls_Err                     FFC_RuleTcpAu_Cls_Err
    基本规则管理-TCP用户自定义-激活全部-成功                OPFC_RuleTcpAu_Enable_Ok                   FFC_RuleTcpAu_Enable_Ok
    基本规则管理-TCP用户自定义-激活全部-失败                OPFC_RuleTcpAu_Enable_Err                  FFC_RuleTcpAu_Enable_Err
    基本规则管理-TCP用户自定义-禁用全部-成功                OPFC_RuleTcpAu_Disable_Ok                  FFC_RuleTcpAu_Disable_Ok
    基本规则管理-TCP用户自定义-禁用全部-失败                OPFC_RuleTcpAu_Disable_Err                 FFC_RuleTcpAu_Disable_Err
    基本规则管理-TCP用户自定义-编辑-成功                    OPFC_RuleTcpAu_Edit_Ok                     FFC_RuleTcpAu_Edit_Ok
    基本规则管理-TCP用户自定义-编辑-失败                    OPFC_RuleTcpAu_Edit_Err                    FFC_RuleTcpAu_Edit_Err
    基本规则管理-TCP用户自定义-删除-成功                    OPFC_RuleTcpAu_Del_Ok                      FFC_RuleTcpAu_Del_Ok
    基本规则管理-TCP用户自定义-删除-失败                    OPFC_RuleTcpAu_Del_Err                     FFC_RuleTcpAu_Del_Err
    基本规则管理-单条-TCP用户自定义-导入-成功               OPFC_RuleTcpAu_Import_One_Ok               FFC_RuleTcpAu_Import_One_Ok
    基本规则管理-单条-TCP用户自定义-导入-失败               OPFC_RuleTcpAu_Import_One_Err              FFC_RuleTcpAu_Import_One_Err
    基本规则管理-所有-TCP用户自定义-导入-成功               OPFC_RuleTcpAu_Import_All_Ok               FFC_RuleTcpAu_Import_All_Ok
    基本规则管理-所有-TCP用户自定义-导入-失败               OPFC_RuleTcpAu_Import_All_Err              FFC_RuleTcpAu_Import_All_Err
    基本规则管理-TCP用户自定义-导出-内容                    OPFC_RuleTcpAu_Export_Ret                  FFC_RuleTcpAu_Export_Ret
    基本规则管理-TCP用户自定义-导出-空                      OPFC_RuleTcpAu_Export_Empty                FFC_RuleTcpAu_Export_Empty
    基本规则管理-TCP用户自定义-导出-失败                    OPFC_RuleTcpAu_Export_Err                  FFC_RuleTcpAu_Export_Err
    基本规则管理-UDP黑名单-内容                             OPFC_RuleUdpBl_List_Ret                    FFC_RuleUdpBl_List_Ret
    基本规则管理-UDP黑名单-失败                             OPFC_RuleUdpBl_List_Err                    FFC_RuleUdpBl_List_Err
    基本规则管理-UDP黑名单-添加-成功                        OPFC_RuleUdpBl_Add_Ok                      FFC_RuleUdpBl_Add_Ok
    基本规则管理-UDP黑名单-添加-失败                        OPFC_RuleUdpBl_Add_Err                     FFC_RuleUdpBl_Add_Err
    基本规则管理-UDP黑名单-全部删除-成功                    OPFC_RuleUdpBl_Cls_Ok                      FFC_RuleUdpBl_Cls_Ok
    基本规则管理-UDP黑名单-全部删除-失败                    OPFC_RuleUdpBl_Cls_Err                     FFC_RuleUdpBl_Cls_Err
    基本规则管理-UDP黑名单-激活全部-成功                    OPFC_RuleUdpBl_Enable_Ok                   FFC_RuleUdpBl_Enable_Ok
    基本规则管理-UDP黑名单-激活全部-失败                    OPFC_RuleUdpBl_Enable_Err                  FFC_RuleUdpBl_Enable_Err
    基本规则管理-UDP黑名单-禁用全部-成功                    OPFC_RuleUdpBl_Disable_Ok                  FFC_RuleUdpBl_Disable_Ok
    基本规则管理-UDP黑名单-禁用全部-失败                    OPFC_RuleUdpBl_Disable_Err                 FFC_RuleUdpBl_Disable_Err
    基本规则管理-UDP黑名单-编辑-成功                        OPFC_RuleUdpBl_Edit_Ok                     FFC_RuleUdpBl_Edit_Ok
    基本规则管理-UDP黑名单-编辑-失败                        OPFC_RuleUdpBl_Edit_Err                    FFC_RuleUdpBl_Edit_Err
    基本规则管理-UDP黑名单-删除-成功                        OPFC_RuleUdpBl_Del_Ok                      FFC_RuleUdpBl_Del_Ok
    基本规则管理-UDP黑名单-删除-失败                        OPFC_RuleUdpBl_Del_Err                     FFC_RuleUdpBl_Del_Err
    基本规则管理-单条-UDP黑名单-导入-成功                   OPFC_RuleUdpBl_Import_One_Ok               FFC_RuleUdpBl_Import_One_Ok
    基本规则管理-单条-UDP黑名单-导入-失败                   OPFC_RuleUdpBl_Import_One_Err              FFC_RuleUdpBl_Import_One_Err
    基本规则管理-所有-UDP黑名单-导入-成功                   OPFC_RuleUdpBl_Import_All_Ok               FFC_RuleUdpBl_Import_All_Ok
    基本规则管理-所有-UDP黑名单-导入-失败                   OPFC_RuleUdpBl_Import_All_Err              FFC_RuleUdpBl_Import_All_Err
    基本规则管理-UDP黑名单-导出-内容                        OPFC_RuleUdpBl_Export_Ret                  FFC_RuleUdpBl_Export_Ret
    基本规则管理-UDP黑名单-导出-空                          OPFC_RuleUdpBl_Export_Empty                FFC_RuleUdpBl_Export_Empty
    基本规则管理-UDP黑名单-导出-失败                        OPFC_RuleUdpBl_Export_Err                  FFC_RuleUdpBl_Export_Err
    基本规则管理-UDP白名单-内容                             OPFC_RuleUdpWl_List_Ret                    FFC_RuleUdpWl_List_Ret
    基本规则管理-UDP白名单-失败                             OPFC_RuleUdpWl_List_Err                    FFC_RuleUdpWl_List_Err
    基本规则管理-UDP白名单-添加-成功                        OPFC_RuleUdpWl_Add_Ok                      FFC_RuleUdpWl_Add_Ok
    基本规则管理-UDP白名单-添加-失败                        OPFC_RuleUdpWl_Add_Err                     FFC_RuleUdpWl_Add_Err
    基本规则管理-UDP白名单-全部删除-成功                    OPFC_RuleUdpWl_Cls_Ok                      FFC_RuleUdpWl_Cls_Ok
    基本规则管理-UDP白名单-全部删除-失败                    OPFC_RuleUdpWl_Cls_Err                     FFC_RuleUdpWl_Cls_Err
    基本规则管理-UDP白名单-激活全部-成功                    OPFC_RuleUdpWl_Enable_Ok                   FFC_RuleUdpWl_Enable_Ok
    基本规则管理-UDP白名单-激活全部-失败                    OPFC_RuleUdpWl_Enable_Err                  FFC_RuleUdpWl_Enable_Err
    基本规则管理-UDP白名单-禁用全部-成功                    OPFC_RuleUdpWl_Disable_Ok                  FFC_RuleUdpWl_Disable_Ok
    基本规则管理-UDP白名单-禁用全部-失败                    OPFC_RuleUdpWl_Disable_Err                 FFC_RuleUdpWl_Disable_Err
    基本规则管理-UDP白名单-编辑-成功                        OPFC_RuleUdpWl_Edit_Ok                     FFC_RuleUdpWl_Edit_Ok
    基本规则管理-UDP白名单-编辑-失败                        OPFC_RuleUdpWl_Edit_Err                    FFC_RuleUdpWl_Edit_Err
    基本规则管理-UDP白名单-删除-成功                        OPFC_RuleUdpWl_Del_Ok                      FFC_RuleUdpWl_Del_Ok
    基本规则管理-UDP白名单-删除-失败                        OPFC_RuleUdpWl_Del_Err                     FFC_RuleUdpWl_Del_Err
    基本规则管理-单条-UDP白名单-导入-成功                   OPFC_RuleUdpWl_Import_One_Ok               FFC_RuleUdpWl_Import_One_Ok
    基本规则管理-单条-UDP白名单-导入-失败                   OPFC_RuleUdpWl_Import_One_Err              FFC_RuleUdpWl_Import_One_Err
    基本规则管理-所有-UDP白名单-导入-成功                   OPFC_RuleUdpWl_Import_All_Ok               FFC_RuleUdpWl_Import_All_Ok
    基本规则管理-所有-UDP白名单-导入-失败                   OPFC_RuleUdpWl_Import_All_Err              FFC_RuleUdpWl_Import_All_Err
    基本规则管理-UDP白名单-导出-内容                        OPFC_RuleUdpWl_Export_Ret                  FFC_RuleUdpWl_Export_Ret
    基本规则管理-UDP白名单-导出-空                          OPFC_RuleUdpWl_Export_Empty                FFC_RuleUdpWl_Export_Empty
    基本规则管理-UDP白名单-导出-失败                        OPFC_RuleUdpWl_Export_Err                  FFC_RuleUdpWl_Export_Err
    基本规则管理-UDP无条件信任-内容                         OPFC_RuleUdpTrust_List_Ret                 FFC_RuleUdpTrust_List_Ret
    基本规则管理-UDP无条件信任-失败                         OPFC_RuleUdpTrust_List_Err                 FFC_RuleUdpTrust_List_Err
    基本规则管理-UDP无条件信任-添加-成功                    OPFC_RuleUdpTrust_Add_Ok                   FFC_RuleUdpTrust_Add_Ok
    基本规则管理-UDP无条件信任-添加-失败                    OPFC_RuleUdpTrust_Add_Err                  FFC_RuleUdpTrust_Add_Err
    基本规则管理-UDP无条件信任-全部删除-成功                OPFC_RuleUdpTrust_Cls_Ok                   FFC_RuleUdpTrust_Cls_Ok
    基本规则管理-UDP无条件信任-全部删除-失败                OPFC_RuleUdpTrust_Cls_Err                  FFC_RuleUdpTrust_Cls_Err
    基本规则管理-UDP无条件信任-激活全部-成功                OPFC_RuleUdpTrust_Enable_Ok                FFC_RuleUdpTrust_Enable_Ok
    基本规则管理-UDP无条件信任-激活全部-失败                OPFC_RuleUdpTrust_Enable_Err               FFC_RuleUdpTrust_Enable_Err
    基本规则管理-UDP无条件信任-禁用全部-成功                OPFC_RuleUdpTrust_Disable_Ok               FFC_RuleUdpTrust_Disable_Ok
    基本规则管理-UDP无条件信任-禁用全部-失败                OPFC_RuleUdpTrust_Disable_Err              FFC_RuleUdpTrust_Disable_Err
    基本规则管理-UDP无条件信任-编辑-成功                    OPFC_RuleUdpTrust_Edit_Ok                  FFC_RuleUdpTrust_Edit_Ok
    基本规则管理-UDP无条件信任-编辑-失败                    OPFC_RuleUdpTrust_Edit_Err                 FFC_RuleUdpTrust_Edit_Err
    基本规则管理-UDP无条件信任-删除-成功                    OPFC_RuleUdpTrust_Del_Ok                   FFC_RuleUdpTrust_Del_Ok
    基本规则管理-UDP无条件信任-删除-失败                    OPFC_RuleUdpTrust_Del_Err                  FFC_RuleUdpTrust_Del_Err
    基本规则管理-单条-UDP无条件信任-导入-成功               OPFC_RuleUdpTrust_Import_One_Ok            FFC_RuleUdpTrust_Import_One_Ok
    基本规则管理-单条-UDP无条件信任-导入-失败               OPFC_RuleUdpTrust_Import_One_Err           FFC_RuleUdpTrust_Import_One_Err
    基本规则管理-所有-UDP无条件信任-导入-成功               OPFC_RuleUdpTrust_Import_All_Ok            FFC_RuleUdpTrust_Import_All_Ok
    基本规则管理-所有-UDP无条件信任-导入-失败               OPFC_RuleUdpTrust_Import_All_Err           FFC_RuleUdpTrust_Import_All_Err
    基本规则管理-UDP无条件信任-导出-内容                    OPFC_RuleUdpTrust_Export_Ret               FFC_RuleUdpTrust_Export_Ret
    基本规则管理-UDP无条件信任-导出-空                      OPFC_RuleUdpTrust_Export_Empty             FFC_RuleUdpTrust_Export_Empty
    基本规则管理-UDP无条件信任-导出-失败                    OPFC_RuleUdpTrust_Export_Err               FFC_RuleUdpTrust_Export_Err
    基本规则管理-UDP用户自定义-内容                         OPFC_RuleUdpAu_List_Ret                    FFC_RuleUdpAu_List_Ret
    基本规则管理-UDP用户自定义-失败                         OPFC_RuleUdpAu_List_Err                    FFC_RuleUdpAu_List_Err
    基本规则管理-UDP用户自定义-添加-成功                    OPFC_RuleUdpAu_Add_Ok                      FFC_RuleUdpAu_Add_Ok
    基本规则管理-UDP用户自定义-添加-失败                    OPFC_RuleUdpAu_Add_Err                     FFC_RuleUdpAu_Add_Err
    基本规则管理-UDP用户自定义-全部删除-成功                OPFC_RuleUdpAu_Cls_Ok                      FFC_RuleUdpAu_Cls_Ok
    基本规则管理-UDP用户自定义-全部删除-失败                OPFC_RuleUdpAu_Cls_Err                     FFC_RuleUdpAu_Cls_Err
    基本规则管理-UDP用户自定义-激活全部-成功                OPFC_RuleUdpAu_Enable_Ok                   FFC_RuleUdpAu_Enable_Ok
    基本规则管理-UDP用户自定义-激活全部-失败                OPFC_RuleUdpAu_Enable_Err                  FFC_RuleUdpAu_Enable_Err
    基本规则管理-UDP用户自定义-禁用全部-成功                OPFC_RuleUdpAu_Disable_Ok                  FFC_RuleUdpAu_Disable_Ok
    基本规则管理-UDP用户自定义-禁用全部-失败                OPFC_RuleUdpAu_Disable_Err                 FFC_RuleUdpAu_Disable_Err
    基本规则管理-UDP用户自定义-编辑-成功                    OPFC_RuleUdpAu_Edit_Ok                     FFC_RuleUdpAu_Edit_Ok
    基本规则管理-UDP用户自定义-编辑-失败                    OPFC_RuleUdpAu_Edit_Err                    FFC_RuleUdpAu_Edit_Err
    基本规则管理-UDP用户自定义-删除-成功                    OPFC_RuleUdpAu_Del_Ok                      FFC_RuleUdpAu_Del_Ok
    基本规则管理-UDP用户自定义-删除-失败                    OPFC_RuleUdpAu_Del_Err                     FFC_RuleUdpAu_Del_Err
    基本规则管理-单条-UDP用户自定义-导入-成功               OPFC_RuleUdpAu_Import_One_Ok               FFC_RuleUdpAu_Import_One_Ok
    基本规则管理-单条-UDP用户自定义-导入-失败               OPFC_RuleUdpAu_Import_One_Err              FFC_RuleUdpAu_Import_One_Err
    基本规则管理-所有-UDP用户自定义-导入-成功               OPFC_RuleUdpAu_Import_All_Ok               FFC_RuleUdpAu_Import_All_Ok
    基本规则管理-所有-UDP用户自定义-导入-失败               OPFC_RuleUdpAu_Import_All_Err              FFC_RuleUdpAu_Import_All_Err
    基本规则管理-UDP用户自定义-导出-内容                    OPFC_RuleUdpAu_Export_Ret                  FFC_RuleUdpAu_Export_Ret
    基本规则管理-UDP用户自定义-导出-空                      OPFC_RuleUdpAu_Export_Empty                FFC_RuleUdpAu_Export_Empty
    基本规则管理-UDP用户自定义-导出-失败                    OPFC_RuleUdpAu_Export_Err                  FFC_RuleUdpAu_Export_Err
    工控规则管理-ModbusTCP黑名单-内容                       OPFC_RuleModbusBl_List_Ret                 FFC_RuleModbusBl_List_Ret
    工控规则管理-ModbusTCP黑名单-失败                       OPFC_RuleModbusBl_List_Err                 FFC_RuleModbusBl_List_Err
    工控规则管理-ModbusTCP黑名单-添加-成功                  OPFC_RuleModbusBl_Add_Ok                   FFC_RuleModbusBl_Add_Ok
    工控规则管理-ModbusTCP黑名单-添加-失败                  OPFC_RuleModbusBl_Add_Err                  FFC_RuleModbusBl_Add_Err
    工控规则管理-ModbusTCP黑名单-全部删除-成功              OPFC_RuleModbusBl_Cls_Ok                   FFC_RuleModbusBl_Cls_Ok
    工控规则管理-ModbusTCP黑名单-全部删除-失败              OPFC_RuleModbusBl_Cls_Err                  FFC_RuleModbusBl_Cls_Err
    工控规则管理-ModbusTCP黑名单-激活全部-成功              OPFC_RuleModbusBl_Enable_Ok                FFC_RuleModbusBl_Enable_Ok
    工控规则管理-ModbusTCP黑名单-激活全部-失败              OPFC_RuleModbusBl_Enable_Err               FFC_RuleModbusBl_Enable_Err
    工控规则管理-ModbusTCP黑名单-禁用全部-成功              OPFC_RuleModbusBl_Disable_Ok               FFC_RuleModbusBl_Disable_Ok
    工控规则管理-ModbusTCP黑名单-禁用全部-失败              OPFC_RuleModbusBl_Disable_Err              FFC_RuleModbusBl_Disable_Err
    工控规则管理-ModbusTCP黑名单-编辑-成功                  OPFC_RuleModbusBl_Edit_Ok                  FFC_RuleModbusBl_Edit_Ok
    工控规则管理-ModbusTCP黑名单-编辑-失败                  OPFC_RuleModbusBl_Edit_Err                 FFC_RuleModbusBl_Edit_Err
    工控规则管理-ModbusTCP黑名单-删除-成功                  OPFC_RuleModbusBl_Del_Ok                   FFC_RuleModbusBl_Del_Ok
    工控规则管理-ModbusTCP黑名单-删除-失败                  OPFC_RuleModbusBl_Del_Err                  FFC_RuleModbusBl_Del_Err
    工控规则管理-单条-ModbusTCP黑名单-导入-成功             OPFC_RuleModbusBl_Import_One_Ok            FFC_RuleModbusBl_Import_One_Ok
    工控规则管理-单条-ModbusTCP黑名单-导入-失败             OPFC_RuleModbusBl_Import_One_Err           FFC_RuleModbusBl_Import_One_Err
    工控规则管理-所有-ModbusTCP黑名单-导入-成功             OPFC_RuleModbusBl_Import_All_Ok            FFC_RuleModbusBl_Import_All_Ok
    工控规则管理-所有-ModbusTCP黑名单-导入-失败             OPFC_RuleModbusBl_Import_All_Err           FFC_RuleModbusBl_Import_All_Err
    工控规则管理-ModbusTCP黑名单-导出-内容                  OPFC_RuleModbusBl_Export_Ret               FFC_RuleModbusBl_Export_Ret
    工控规则管理-ModbusTCP黑名单-导出-空                    OPFC_RuleModbusBl_Export_Empty             FFC_RuleModbusBl_Export_Empty
    工控规则管理-ModbusTCP黑名单-导出-失败                  OPFC_RuleModbusBl_Export_Err               FFC_RuleModbusBl_Export_Err
    工控规则管理-ModbusTCP白名单-内容                       OPFC_RuleModbusWl_List_Ret                 FFC_RuleModbusWl_List_Ret
    工控规则管理-ModbusTCP白名单-失败                       OPFC_RuleModbusWl_List_Err                 FFC_RuleModbusWl_List_Err
    工控规则管理-ModbusTCP白名单-添加-成功                  OPFC_RuleModbusWl_Add_Ok                   FFC_RuleModbusWl_Add_Ok
    工控规则管理-ModbusTCP白名单-添加-失败                  OPFC_RuleModbusWl_Add_Err                  FFC_RuleModbusWl_Add_Err
    工控规则管理-ModbusTCP白名单-全部删除-成功              OPFC_RuleModbusWl_Cls_Ok                   FFC_RuleModbusWl_Cls_Ok
    工控规则管理-ModbusTCP白名单-全部删除-失败              OPFC_RuleModbusWl_Cls_Err                  FFC_RuleModbusWl_Cls_Err
    工控规则管理-ModbusTCP白名单-激活全部-成功              OPFC_RuleModbusWl_Enable_Ok                FFC_RuleModbusWl_Enable_Ok
    工控规则管理-ModbusTCP白名单-激活全部-失败              OPFC_RuleModbusWl_Enable_Err               FFC_RuleModbusWl_Enable_Err
    工控规则管理-ModbusTCP白名单-禁用全部-成功              OPFC_RuleModbusWl_Disable_Ok               FFC_RuleModbusWl_Disable_Ok
    工控规则管理-ModbusTCP白名单-禁用全部-失败              OPFC_RuleModbusWl_Disable_Err              FFC_RuleModbusWl_Disable_Err
    工控规则管理-ModbusTCP白名单-编辑-成功                  OPFC_RuleModbusWl_Edit_Ok                  FFC_RuleModbusWl_Edit_Ok
    工控规则管理-ModbusTCP白名单-编辑-失败                  OPFC_RuleModbusWl_Edit_Err                 FFC_RuleModbusWl_Edit_Err
    工控规则管理-ModbusTCP白名单-删除-成功                  OPFC_RuleModbusWl_Del_Ok                   FFC_RuleModbusWl_Del_Ok
    工控规则管理-ModbusTCP白名单-删除-失败                  OPFC_RuleModbusWl_Del_Err                  FFC_RuleModbusWl_Del_Err
    工控规则管理-单条-ModbusTCP白名单-导入-成功             OPFC_RuleModbusWl_Import_One_Ok            FFC_RuleModbusWl_Import_One_Ok
    工控规则管理-单条-ModbusTCP白名单-导入-失败             OPFC_RuleModbusWl_Import_One_Err           FFC_RuleModbusWl_Import_One_Err
    工控规则管理-所有-ModbusTCP白名单-导入-成功             OPFC_RuleModbusWl_Import_All_Ok            FFC_RuleModbusWl_Import_All_Ok
    工控规则管理-所有-ModbusTCP白名单-导入-失败             OPFC_RuleModbusWl_Import_All_Err           FFC_RuleModbusWl_Import_All_Err
    工控规则管理-ModbusTCP白名单-导出-内容                  OPFC_RuleModbusWl_Export_Ret               FFC_RuleModbusWl_Export_Ret
    工控规则管理-ModbusTCP白名单-导出-空                    OPFC_RuleModbusWl_Export_Empty             FFC_RuleModbusWl_Export_Empty
    工控规则管理-ModbusTCP白名单-导出-失败                  OPFC_RuleModbusWl_Export_Err               FFC_RuleModbusWl_Export_Err
    工控规则管理-ModbusTCP用户自定义-内容                   OPFC_RuleModbusAu_List_Ret                 FFC_RuleModbusAu_List_Ret
    工控规则管理-ModbusTCP用户自定义-失败                   OPFC_RuleModbusAu_List_Err                 FFC_RuleModbusAu_List_Err
    工控规则管理-ModbusTCP用户自定义-添加-成功              OPFC_RuleModbusAu_Add_Ok                   FFC_RuleModbusAu_Add_Ok
    工控规则管理-ModbusTCP用户自定义-添加-失败              OPFC_RuleModbusAu_Add_Err                  FFC_RuleModbusAu_Add_Err
    工控规则管理-ModbusTCP用户自定义-全部删除-成功          OPFC_RuleModbusAu_Cls_Ok                   FFC_RuleModbusAu_Cls_Ok
    工控规则管理-ModbusTCP用户自定义-全部删除-失败          OPFC_RuleModbusAu_Cls_Err                  FFC_RuleModbusAu_Cls_Err
    工控规则管理-ModbusTCP用户自定义-激活全部-成功          OPFC_RuleModbusAu_Enable_Ok                FFC_RuleModbusAu_Enable_Ok
    工控规则管理-ModbusTCP用户自定义-激活全部-失败          OPFC_RuleModbusAu_Enable_Err               FFC_RuleModbusAu_Enable_Err
    工控规则管理-ModbusTCP用户自定义-禁用全部-成功          OPFC_RuleModbusAu_Disable_Ok               FFC_RuleModbusAu_Disable_Ok
    工控规则管理-ModbusTCP用户自定义-禁用全部-失败          OPFC_RuleModbusAu_Disable_Err              FFC_RuleModbusAu_Disable_Err
    工控规则管理-ModbusTCP用户自定义-编辑-成功              OPFC_RuleModbusAu_Edit_Ok                  FFC_RuleModbusAu_Edit_Ok
    工控规则管理-ModbusTCP用户自定义-编辑-失败              OPFC_RuleModbusAu_Edit_Err                 FFC_RuleModbusAu_Edit_Err
    工控规则管理-ModbusTCP用户自定义-删除-成功              OPFC_RuleModbusAu_Del_Ok                   FFC_RuleModbusAu_Del_Ok
    工控规则管理-ModbusTCP用户自定义-删除-失败              OPFC_RuleModbusAu_Del_Err                  FFC_RuleModbusAu_Del_Err
    工控规则管理-单条-ModbusTCP用户自定义-导入-成功         OPFC_RuleModbusAu_Import_One_Ok            FFC_RuleModbusAu_Import_One_Ok
    工控规则管理-单条-ModbusTCP用户自定义-导入-失败         OPFC_RuleModbusAu_Import_One_Err           FFC_RuleModbusAu_Import_One_Err
    工控规则管理-所有-ModbusTCP用户自定义-导入-成功         OPFC_RuleModbusAu_Import_All_Ok            FFC_RuleModbusAu_Import_All_Ok
    工控规则管理-所有-ModbusTCP用户自定义-导入-失败         OPFC_RuleModbusAu_Import_All_Err           FFC_RuleModbusAu_Import_All_Err
    工控规则管理-ModbusTCP用户自定义-导出-内容              OPFC_RuleModbusAu_Export_Ret               FFC_RuleModbusAu_Export_Ret
    工控规则管理-ModbusTCP用户自定义-导出-空                OPFC_RuleModbusAu_Export_Empty             FFC_RuleModbusAu_Export_Empty
    工控规则管理-ModbusTCP用户自定义-导出-失败              OPFC_RuleModbusAu_Export_Err               FFC_RuleModbusAu_Export_Err
    工控规则管理-IEC104黑名单-内容                          OPFC_RuleIec104Bl_List_Ret                 FFC_RuleIec104Bl_List_Ret
    工控规则管理-IEC104黑名单-失败                          OPFC_RuleIec104Bl_List_Err                 FFC_RuleIec104Bl_List_Err
    工控规则管理-IEC104黑名单-添加-成功                     OPFC_RuleIec104Bl_Add_Ok                   FFC_RuleIec104Bl_Add_Ok
    工控规则管理-IEC104黑名单-添加-失败                     OPFC_RuleIec104Bl_Add_Err                  FFC_RuleIec104Bl_Add_Err
    工控规则管理-IEC104黑名单-全部删除-成功                 OPFC_RuleIec104Bl_Cls_Ok                   FFC_RuleIec104Bl_Cls_Ok
    工控规则管理-IEC104黑名单-全部删除-失败                 OPFC_RuleIec104Bl_Cls_Err                  FFC_RuleIec104Bl_Cls_Err
    工控规则管理-IEC104黑名单-激活全部-成功                 OPFC_RuleIec104Bl_Enable_Ok                FFC_RuleIec104Bl_Enable_Ok
    工控规则管理-IEC104黑名单-激活全部-失败                 OPFC_RuleIec104Bl_Enable_Err               FFC_RuleIec104Bl_Enable_Err
    工控规则管理-IEC104黑名单-禁用全部-成功                 OPFC_RuleIec104Bl_Disable_Ok               FFC_RuleIec104Bl_Disable_Ok
    工控规则管理-IEC104黑名单-禁用全部-失败                 OPFC_RuleIec104Bl_Disable_Err              FFC_RuleIec104Bl_Disable_Err
    工控规则管理-IEC104黑名单-编辑-成功                     OPFC_RuleIec104Bl_Edit_Ok                  FFC_RuleIec104Bl_Edit_Ok
    工控规则管理-IEC104黑名单-编辑-失败                     OPFC_RuleIec104Bl_Edit_Err                 FFC_RuleIec104Bl_Edit_Err
    工控规则管理-IEC104黑名单-删除-成功                     OPFC_RuleIec104Bl_Del_Ok                   FFC_RuleIec104Bl_Del_Ok
    工控规则管理-IEC104黑名单-删除-失败                     OPFC_RuleIec104Bl_Del_Err                  FFC_RuleIec104Bl_Del_Err
    工控规则管理-单条-IEC104黑名单-导入-成功                OPFC_RuleIec104Bl_Import_One_Ok            FFC_RuleIec104Bl_Import_One_Ok
    工控规则管理-单条-IEC104黑名单-导入-失败                OPFC_RuleIec104Bl_Import_One_Err           FFC_RuleIec104Bl_Import_One_Err
    工控规则管理-所有-IEC104黑名单-导入-成功                OPFC_RuleIec104Bl_Import_All_Ok            FFC_RuleIec104Bl_Import_All_Ok
    工控规则管理-所有-IEC104黑名单-导入-失败                OPFC_RuleIec104Bl_Import_All_Err           FFC_RuleIec104Bl_Import_All_Err
    工控规则管理-IEC104黑名单-导出-内容                     OPFC_RuleIec104Bl_Export_Ret               FFC_RuleIec104Bl_Export_Ret
    工控规则管理-IEC104黑名单-导出-空                       OPFC_RuleIec104Bl_Export_Empty             FFC_RuleIec104Bl_Export_Empty
    工控规则管理-IEC104黑名单-导出-失败                     OPFC_RuleIec104Bl_Export_Err               FFC_RuleIec104Bl_Export_Err
    工控规则管理-IEC104白名单-内容                          OPFC_RuleIec104Wl_List_Ret                 FFC_RuleIec104Wl_List_Ret
    工控规则管理-IEC104白名单-失败                          OPFC_RuleIec104Wl_List_Err                 FFC_RuleIec104Wl_List_Err
    工控规则管理-IEC104白名单-添加-成功                     OPFC_RuleIec104Wl_Add_Ok                   FFC_RuleIec104Wl_Add_Ok
    工控规则管理-IEC104白名单-添加-失败                     OPFC_RuleIec104Wl_Add_Err                  FFC_RuleIec104Wl_Add_Err
    工控规则管理-IEC104白名单-全部删除-成功                 OPFC_RuleIec104Wl_Cls_Ok                   FFC_RuleIec104Wl_Cls_Ok
    工控规则管理-IEC104白名单-全部删除-失败                 OPFC_RuleIec104Wl_Cls_Err                  FFC_RuleIec104Wl_Cls_Err
    工控规则管理-IEC104白名单-激活全部-成功                 OPFC_RuleIec104Wl_Enable_Ok                FFC_RuleIec104Wl_Enable_Ok
    工控规则管理-IEC104白名单-激活全部-失败                 OPFC_RuleIec104Wl_Enable_Err               FFC_RuleIec104Wl_Enable_Err
    工控规则管理-IEC104白名单-禁用全部-成功                 OPFC_RuleIec104Wl_Disable_Ok               FFC_RuleIec104Wl_Disable_Ok
    工控规则管理-IEC104白名单-禁用全部-失败                 OPFC_RuleIec104Wl_Disable_Err              FFC_RuleIec104Wl_Disable_Err
    工控规则管理-IEC104白名单-编辑-成功                     OPFC_RuleIec104Wl_Edit_Ok                  FFC_RuleIec104Wl_Edit_Ok
    工控规则管理-IEC104白名单-编辑-失败                     OPFC_RuleIec104Wl_Edit_Err                 FFC_RuleIec104Wl_Edit_Err
    工控规则管理-IEC104白名单-删除-成功                     OPFC_RuleIec104Wl_Del_Ok                   FFC_RuleIec104Wl_Del_Ok
    工控规则管理-IEC104白名单-删除-失败                     OPFC_RuleIec104Wl_Del_Err                  FFC_RuleIec104Wl_Del_Err
    工控规则管理-单条-IEC104白名单-导入-成功                OPFC_RuleIec104Wl_Import_One_Ok            FFC_RuleIec104Wl_Import_One_Ok
    工控规则管理-单条-IEC104白名单-导入-失败                OPFC_RuleIec104Wl_Import_One_Err           FFC_RuleIec104Wl_Import_One_Err
    工控规则管理-所有-IEC104白名单-导入-成功                OPFC_RuleIec104Wl_Import_All_Ok            FFC_RuleIec104Wl_Import_All_Ok
    工控规则管理-所有-IEC104白名单-导入-失败                OPFC_RuleIec104Wl_Import_All_Err           FFC_RuleIec104Wl_Import_All_Err
    工控规则管理-IEC104白名单-导出-内容                     OPFC_RuleIec104Wl_Export_Ret               FFC_RuleIec104Wl_Export_Ret
    工控规则管理-IEC104白名单-导出-空                       OPFC_RuleIec104Wl_Export_Empty             FFC_RuleIec104Wl_Export_Empty
    工控规则管理-IEC104白名单-导出-失败                     OPFC_RuleIec104Wl_Export_Err               FFC_RuleIec104Wl_Export_Err
    工控规则管理-IEC104用户自定义-内容                      OPFC_RuleIec104Au_List_Ret                 FFC_RuleIec104Au_List_Ret
    工控规则管理-IEC104用户自定义-失败                      OPFC_RuleIec104Au_List_Err                 FFC_RuleIec104Au_List_Err
    工控规则管理-IEC104用户自定义-添加-成功                 OPFC_RuleIec104Au_Add_Ok                   FFC_RuleIec104Au_Add_Ok
    工控规则管理-IEC104用户自定义-添加-失败                 OPFC_RuleIec104Au_Add_Err                  FFC_RuleIec104Au_Add_Err
    工控规则管理-IEC104用户自定义-全部删除-成功             OPFC_RuleIec104Au_Cls_Ok                   FFC_RuleIec104Au_Cls_Ok
    工控规则管理-IEC104用户自定义-全部删除-失败             OPFC_RuleIec104Au_Cls_Err                  FFC_RuleIec104Au_Cls_Err
    工控规则管理-IEC104用户自定义-激活全部-成功             OPFC_RuleIec104Au_Enable_Ok                FFC_RuleIec104Au_Enable_Ok
    工控规则管理-IEC104用户自定义-激活全部-失败             OPFC_RuleIec104Au_Enable_Err               FFC_RuleIec104Au_Enable_Err
    工控规则管理-IEC104用户自定义-禁用全部-成功             OPFC_RuleIec104Au_Disable_Ok               FFC_RuleIec104Au_Disable_Ok
    工控规则管理-IEC104用户自定义-禁用全部-失败             OPFC_RuleIec104Au_Disable_Err              FFC_RuleIec104Au_Disable_Err
    工控规则管理-IEC104用户自定义-编辑-成功                 OPFC_RuleIec104Au_Edit_Ok                  FFC_RuleIec104Au_Edit_Ok
    工控规则管理-IEC104用户自定义-编辑-失败                 OPFC_RuleIec104Au_Edit_Err                 FFC_RuleIec104Au_Edit_Err
    工控规则管理-IEC104用户自定义-删除-成功                 OPFC_RuleIec104Au_Del_Ok                   FFC_RuleIec104Au_Del_Ok
    工控规则管理-IEC104用户自定义-删除-失败                 OPFC_RuleIec104Au_Del_Err                  FFC_RuleIec104Au_Del_Err
    工控规则管理-单条-IEC104用户自定义-导入-成功            OPFC_RuleIec104Au_Import_One_Ok            FFC_RuleIec104Au_Import_One_Ok
    工控规则管理-单条-IEC104用户自定义-导入-失败            OPFC_RuleIec104Au_Import_One_Err           FFC_RuleIec104Au_Import_One_Err
    工控规则管理-所有-IEC104用户自定义-导入-成功            OPFC_RuleIec104Au_Import_All_Ok            FFC_RuleIec104Au_Import_All_Ok
    工控规则管理-所有-IEC104用户自定义-导入-失败            OPFC_RuleIec104Au_Import_All_Err           FFC_RuleIec104Au_Import_All_Err
    工控规则管理-IEC104用户自定义-导出-内容                 OPFC_RuleIec104Au_Export_Ret               FFC_RuleIec104Au_Export_Ret
    工控规则管理-IEC104用户自定义-导出-空                   OPFC_RuleIec104Au_Export_Empty             FFC_RuleIec104Au_Export_Empty
    工控规则管理-IEC104用户自定义-导出-失败                 OPFC_RuleIec104Au_Export_Err               FFC_RuleIec104Au_Export_Err
    工控规则管理-DNP3黑名单-内容                            OPFC_RuleDnpBl_List_Ret                    FFC_RuleDnpBl_List_Ret
    工控规则管理-DNP3黑名单-失败                            OPFC_RuleDnpBl_List_Err                    FFC_RuleDnpBl_List_Err
    工控规则管理-DNP3黑名单-添加-成功                       OPFC_RuleDnpBl_Add_Ok                      FFC_RuleDnpBl_Add_Ok
    工控规则管理-DNP3黑名单-添加-失败                       OPFC_RuleDnpBl_Add_Err                     FFC_RuleDnpBl_Add_Err
    工控规则管理-DNP3黑名单-全部删除-成功                   OPFC_RuleDnpBl_Cls_Ok                      FFC_RuleDnpBl_Cls_Ok
    工控规则管理-DNP3黑名单-全部删除-失败                   OPFC_RuleDnpBl_Cls_Err                     FFC_RuleDnpBl_Cls_Err
    工控规则管理-DNP3黑名单-激活全部-成功                   OPFC_RuleDnpBl_Enable_Ok                   FFC_RuleDnpBl_Enable_Ok
    工控规则管理-DNP3黑名单-激活全部-失败                   OPFC_RuleDnpBl_Enable_Err                  FFC_RuleDnpBl_Enable_Err
    工控规则管理-DNP3黑名单-禁用全部-成功                   OPFC_RuleDnpBl_Disable_Ok                  FFC_RuleDnpBl_Disable_Ok
    工控规则管理-DNP3黑名单-禁用全部-失败                   OPFC_RuleDnpBl_Disable_Err                 FFC_RuleDnpBl_Disable_Err
    工控规则管理-DNP3黑名单-编辑-成功                       OPFC_RuleDnpBl_Edit_Ok                     FFC_RuleDnpBl_Edit_Ok
    工控规则管理-DNP3黑名单-编辑-失败                       OPFC_RuleDnpBl_Edit_Err                    FFC_RuleDnpBl_Edit_Err
    工控规则管理-DNP3黑名单-删除-成功                       OPFC_RuleDnpBl_Del_Ok                      FFC_RuleDnpBl_Del_Ok
    工控规则管理-DNP3黑名单-删除-失败                       OPFC_RuleDnpBl_Del_Err                     FFC_RuleDnpBl_Del_Err
    工控规则管理-单条-DNP3黑名单-导入-成功                  OPFC_RuleDnpBl_Import_One_Ok               FFC_RuleDnpBl_Import_One_Ok
    工控规则管理-单条-DNP3黑名单-导入-失败                  OPFC_RuleDnpBl_Import_One_Err              FFC_RuleDnpBl_Import_One_Err
    工控规则管理-所有-DNP3黑名单-导入-成功                  OPFC_RuleDnpBl_Import_All_Ok               FFC_RuleDnpBl_Import_All_Ok
    工控规则管理-所有-DNP3黑名单-导入-失败                  OPFC_RuleDnpBl_Import_All_Err              FFC_RuleDnpBl_Import_All_Err
    工控规则管理-DNP3黑名单-导出-内容                       OPFC_RuleDnpBl_Export_Ret                  FFC_RuleDnpBl_Export_Ret
    工控规则管理-DNP3黑名单-导出-空                         OPFC_RuleDnpBl_Export_Empty                FFC_RuleDnpBl_Export_Empty
    工控规则管理-DNP3黑名单-导出-失败                       OPFC_RuleDnpBl_Export_Err                  FFC_RuleDnpBl_Export_Err
    工控规则管理-DNP3白名单-内容                            OPFC_RuleDnpWl_List_Ret                    FFC_RuleDnpWl_List_Ret
    工控规则管理-DNP3白名单-失败                            OPFC_RuleDnpWl_List_Err                    FFC_RuleDnpWl_List_Err
    工控规则管理-DNP3白名单-添加-成功                       OPFC_RuleDnpWl_Add_Ok                      FFC_RuleDnpWl_Add_Ok
    工控规则管理-DNP3白名单-添加-失败                       OPFC_RuleDnpWl_Add_Err                     FFC_RuleDnpWl_Add_Err
    工控规则管理-DNP3白名单-全部删除-成功                   OPFC_RuleDnpWl_Cls_Ok                      FFC_RuleDnpWl_Cls_Ok
    工控规则管理-DNP3白名单-全部删除-失败                   OPFC_RuleDnpWl_Cls_Err                     FFC_RuleDnpWl_Cls_Err
    工控规则管理-DNP3白名单-激活全部-成功                   OPFC_RuleDnpWl_Enable_Ok                   FFC_RuleDnpWl_Enable_Ok
    工控规则管理-DNP3白名单-激活全部-失败                   OPFC_RuleDnpWl_Enable_Err                  FFC_RuleDnpWl_Enable_Err
    工控规则管理-DNP3白名单-禁用全部-成功                   OPFC_RuleDnpWl_Disable_Ok                  FFC_RuleDnpWl_Disable_Ok
    工控规则管理-DNP3白名单-禁用全部-失败                   OPFC_RuleDnpWl_Disable_Err                 FFC_RuleDnpWl_Disable_Err
    工控规则管理-DNP3白名单-编辑-成功                       OPFC_RuleDnpWl_Edit_Ok                     FFC_RuleDnpWl_Edit_Ok
    工控规则管理-DNP3白名单-编辑-失败                       OPFC_RuleDnpWl_Edit_Err                    FFC_RuleDnpWl_Edit_Err
    工控规则管理-DNP3白名单-删除-成功                       OPFC_RuleDnpWl_Del_Ok                      FFC_RuleDnpWl_Del_Ok
    工控规则管理-DNP3白名单-删除-失败                       OPFC_RuleDnpWl_Del_Err                     FFC_RuleDnpWl_Del_Err
    工控规则管理-单条-DNP3白名单-导入-成功                  OPFC_RuleDnpWl_Import_One_Ok               FFC_RuleDnpWl_Import_One_Ok
    工控规则管理-单条-DNP3白名单-导入-失败                  OPFC_RuleDnpWl_Import_One_Err              FFC_RuleDnpWl_Import_One_Err
    工控规则管理-所有-DNP3白名单-导入-成功                  OPFC_RuleDnpWl_Import_All_Ok               FFC_RuleDnpWl_Import_All_Ok
    工控规则管理-所有-DNP3白名单-导入-失败                  OPFC_RuleDnpWl_Import_All_Err              FFC_RuleDnpWl_Import_All_Err
    工控规则管理-DNP3白名单-导出-内容                       OPFC_RuleDnpWl_Export_Ret                  FFC_RuleDnpWl_Export_Ret
    工控规则管理-DNP3白名单-导出-空                         OPFC_RuleDnpWl_Export_Empty                FFC_RuleDnpWl_Export_Empty
    工控规则管理-DNP3白名单-导出-失败                       OPFC_RuleDnpWl_Export_Err                  FFC_RuleDnpWl_Export_Err
    工控规则管理-DNP3用户自定义-内容                        OPFC_RuleDnpAu_List_Ret                    FFC_RuleDnpAu_List_Ret
    工控规则管理-DNP3用户自定义-失败                        OPFC_RuleDnpAu_List_Err                    FFC_RuleDnpAu_List_Err
    工控规则管理-DNP3用户自定义-添加-成功                   OPFC_RuleDnpAu_Add_Ok                      FFC_RuleDnpAu_Add_Ok
    工控规则管理-DNP3用户自定义-添加-失败                   OPFC_RuleDnpAu_Add_Err                     FFC_RuleDnpAu_Add_Err
    工控规则管理-DNP3用户自定义-全部删除-成功               OPFC_RuleDnpAu_Cls_Ok                      FFC_RuleDnpAu_Cls_Ok
    工控规则管理-DNP3用户自定义-全部删除-失败               OPFC_RuleDnpAu_Cls_Err                     FFC_RuleDnpAu_Cls_Err
    工控规则管理-DNP3用户自定义-激活全部-成功               OPFC_RuleDnpAu_Enable_Ok                   FFC_RuleDnpAu_Enable_Ok
    工控规则管理-DNP3用户自定义-激活全部-失败               OPFC_RuleDnpAu_Enable_Err                  FFC_RuleDnpAu_Enable_Err
    工控规则管理-DNP3用户自定义-禁用全部-成功               OPFC_RuleDnpAu_Disable_Ok                  FFC_RuleDnpAu_Disable_Ok
    工控规则管理-DNP3用户自定义-禁用全部-失败               OPFC_RuleDnpAu_Disable_Err                 FFC_RuleDnpAu_Disable_Err
    工控规则管理-DNP3用户自定义-编辑-成功                   OPFC_RuleDnpAu_Edit_Ok                     FFC_RuleDnpAu_Edit_Ok
    工控规则管理-DNP3用户自定义-编辑-失败                   OPFC_RuleDnpAu_Edit_Err                    FFC_RuleDnpAu_Edit_Err
    工控规则管理-DNP3用户自定义-删除-成功                   OPFC_RuleDnpAu_Del_Ok                      FFC_RuleDnpAu_Del_Ok
    工控规则管理-DNP3用户自定义-删除-失败                   OPFC_RuleDnpAu_Del_Err                     FFC_RuleDnpAu_Del_Err
    工控规则管理-单条-DNP3用户自定义-导入-成功              OPFC_RuleDnpAu_Import_One_Ok               FFC_RuleDnpAu_Import_One_Ok
    工控规则管理-单条-DNP3用户自定义-导入-失败              OPFC_RuleDnpAu_Import_One_Err              FFC_RuleDnpAu_Import_One_Err
    工控规则管理-所有-DNP3用户自定义-导入-成功              OPFC_RuleDnpAu_Import_All_Ok               FFC_RuleDnpAu_Import_All_Ok
    工控规则管理-所有-DNP3用户自定义-导入-失败              OPFC_RuleDnpAu_Import_All_Err              FFC_RuleDnpAu_Import_All_Err
    工控规则管理-DNP3用户自定义-导出-内容                   OPFC_RuleDnpAu_Export_Ret                  FFC_RuleDnpAu_Export_Ret
    工控规则管理-DNP3用户自定义-导出-空                     OPFC_RuleDnpAu_Export_Empty                FFC_RuleDnpAu_Export_Empty
    工控规则管理-DNP3用户自定义-导出-失败                   OPFC_RuleDnpAu_Export_Err                  FFC_RuleDnpAu_Export_Err
    工控规则管理-S7黑名单-内容                              OPFC_RuleS7Bl_List_Ret                     FFC_RuleS7Bl_List_Ret
    工控规则管理-S7黑名单-失败                              OPFC_RuleS7Bl_List_Err                     FFC_RuleS7Bl_List_Err
    工控规则管理-S7黑名单-添加-成功                         OPFC_RuleS7Bl_Add_Ok                       FFC_RuleS7Bl_Add_Ok
    工控规则管理-S7黑名单-添加-失败                         OPFC_RuleS7Bl_Add_Err                      FFC_RuleS7Bl_Add_Err
    工控规则管理-S7黑名单-全部删除-成功                     OPFC_RuleS7Bl_Cls_Ok                       FFC_RuleS7Bl_Cls_Ok
    工控规则管理-S7黑名单-全部删除-失败                     OPFC_RuleS7Bl_Cls_Err                      FFC_RuleS7Bl_Cls_Err
    工控规则管理-S7黑名单-激活全部-成功                     OPFC_RuleS7Bl_Enable_Ok                    FFC_RuleS7Bl_Enable_Ok
    工控规则管理-S7黑名单-激活全部-失败                     OPFC_RuleS7Bl_Enable_Err                   FFC_RuleS7Bl_Enable_Err
    工控规则管理-S7黑名单-禁用全部-成功                     OPFC_RuleS7Bl_Disable_Ok                   FFC_RuleS7Bl_Disable_Ok
    工控规则管理-S7黑名单-禁用全部-失败                     OPFC_RuleS7Bl_Disable_Err                  FFC_RuleS7Bl_Disable_Err
    工控规则管理-S7黑名单-编辑-成功                         OPFC_RuleS7Bl_Edit_Ok                      FFC_RuleS7Bl_Edit_Ok
    工控规则管理-S7黑名单-编辑-失败                         OPFC_RuleS7Bl_Edit_Err                     FFC_RuleS7Bl_Edit_Err
    工控规则管理-S7黑名单-删除-成功                         OPFC_RuleS7Bl_Del_Ok                       FFC_RuleS7Bl_Del_Ok
    工控规则管理-S7黑名单-删除-失败                         OPFC_RuleS7Bl_Del_Err                      FFC_RuleS7Bl_Del_Err
    工控规则管理-单条-S7黑名单-导入-成功                    OPFC_RuleS7Bl_Import_One_Ok                FFC_RuleS7Bl_Import_One_Ok
    工控规则管理-单条-S7黑名单-导入-失败                    OPFC_RuleS7Bl_Import_One_Err               FFC_RuleS7Bl_Import_One_Err
    工控规则管理-所有-S7黑名单-导入-成功                    OPFC_RuleS7Bl_Import_All_Ok                FFC_RuleS7Bl_Import_All_Ok
    工控规则管理-所有-S7黑名单-导入-失败                    OPFC_RuleS7Bl_Import_All_Err               FFC_RuleS7Bl_Import_All_Err
    工控规则管理-S7黑名单-导出-内容                         OPFC_RuleS7Bl_Export_Ret                   FFC_RuleS7Bl_Export_Ret
    工控规则管理-S7黑名单-导出-空                           OPFC_RuleS7Bl_Export_Empty                 FFC_RuleS7Bl_Export_Empty
    工控规则管理-S7黑名单-导出-失败                         OPFC_RuleS7Bl_Export_Err                   FFC_RuleS7Bl_Export_Err
    工控规则管理-S7白名单-内容                              OPFC_RuleS7Wl_List_Ret                     FFC_RuleS7Wl_List_Ret
    工控规则管理-S7白名单-失败                              OPFC_RuleS7Wl_List_Err                     FFC_RuleS7Wl_List_Err
    工控规则管理-S7白名单-添加-成功                         OPFC_RuleS7Wl_Add_Ok                       FFC_RuleS7Wl_Add_Ok
    工控规则管理-S7白名单-添加-失败                         OPFC_RuleS7Wl_Add_Err                      FFC_RuleS7Wl_Add_Err
    工控规则管理-S7白名单-全部删除-成功                     OPFC_RuleS7Wl_Cls_Ok                       FFC_RuleS7Wl_Cls_Ok
    工控规则管理-S7白名单-全部删除-失败                     OPFC_RuleS7Wl_Cls_Err                      FFC_RuleS7Wl_Cls_Err
    工控规则管理-S7白名单-激活全部-成功                     OPFC_RuleS7Wl_Enable_Ok                    FFC_RuleS7Wl_Enable_Ok
    工控规则管理-S7白名单-激活全部-失败                     OPFC_RuleS7Wl_Enable_Err                   FFC_RuleS7Wl_Enable_Err
    工控规则管理-S7白名单-禁用全部-成功                     OPFC_RuleS7Wl_Disable_Ok                   FFC_RuleS7Wl_Disable_Ok
    工控规则管理-S7白名单-禁用全部-失败                     OPFC_RuleS7Wl_Disable_Err                  FFC_RuleS7Wl_Disable_Err
    工控规则管理-S7白名单-编辑-成功                         OPFC_RuleS7Wl_Edit_Ok                      FFC_RuleS7Wl_Edit_Ok
    工控规则管理-S7白名单-编辑-失败                         OPFC_RuleS7Wl_Edit_Err                     FFC_RuleS7Wl_Edit_Err
    工控规则管理-S7白名单-删除-成功                         OPFC_RuleS7Wl_Del_Ok                       FFC_RuleS7Wl_Del_Ok
    工控规则管理-S7白名单-删除-失败                         OPFC_RuleS7Wl_Del_Err                      FFC_RuleS7Wl_Del_Err
    工控规则管理-单条-S7白名单-导入-成功                    OPFC_RuleS7Wl_Import_One_Ok                FFC_RuleS7Wl_Import_One_Ok
    工控规则管理-单条-S7白名单-导入-失败                    OPFC_RuleS7Wl_Import_One_Err               FFC_RuleS7Wl_Import_One_Err
    工控规则管理-所有-S7白名单-导入-成功                    OPFC_RuleS7Wl_Import_All_Ok                FFC_RuleS7Wl_Import_All_Ok
    工控规则管理-所有-S7白名单-导入-失败                    OPFC_RuleS7Wl_Import_All_Err               FFC_RuleS7Wl_Import_All_Err
    工控规则管理-S7白名单-导出-内容                         OPFC_RuleS7Wl_Export_Ret                   FFC_RuleS7Wl_Export_Ret
    工控规则管理-S7白名单-导出-空                           OPFC_RuleS7Wl_Export_Empty                 FFC_RuleS7Wl_Export_Empty
    工控规则管理-S7白名单-导出-失败                         OPFC_RuleS7Wl_Export_Err                   FFC_RuleS7Wl_Export_Err
    工控规则管理-S7用户自定义-内容                          OPFC_RuleS7Au_List_Ret                     FFC_RuleS7Au_List_Ret
    工控规则管理-S7用户自定义-失败                          OPFC_RuleS7Au_List_Err                     FFC_RuleS7Au_List_Err
    工控规则管理-S7用户自定义-添加-成功                     OPFC_RuleS7Au_Add_Ok                       FFC_RuleS7Au_Add_Ok
    工控规则管理-S7用户自定义-添加-失败                     OPFC_RuleS7Au_Add_Err                      FFC_RuleS7Au_Add_Err
    工控规则管理-S7用户自定义-全部删除-成功                 OPFC_RuleS7Au_Cls_Ok                       FFC_RuleS7Au_Cls_Ok
    工控规则管理-S7用户自定义-全部删除-失败                 OPFC_RuleS7Au_Cls_Err                      FFC_RuleS7Au_Cls_Err
    工控规则管理-S7用户自定义-激活全部-成功                 OPFC_RuleS7Au_Enable_Ok                    FFC_RuleS7Au_Enable_Ok
    工控规则管理-S7用户自定义-激活全部-失败                 OPFC_RuleS7Au_Enable_Err                   FFC_RuleS7Au_Enable_Err
    工控规则管理-S7用户自定义-禁用全部-成功                 OPFC_RuleS7Au_Disable_Ok                   FFC_RuleS7Au_Disable_Ok
    工控规则管理-S7用户自定义-禁用全部-失败                 OPFC_RuleS7Au_Disable_Err                  FFC_RuleS7Au_Disable_Err
    工控规则管理-S7用户自定义-编辑-成功                     OPFC_RuleS7Au_Edit_Ok                      FFC_RuleS7Au_Edit_Ok
    工控规则管理-S7用户自定义-编辑-失败                     OPFC_RuleS7Au_Edit_Err                     FFC_RuleS7Au_Edit_Err
    工控规则管理-S7用户自定义-删除-成功                     OPFC_RuleS7Au_Del_Ok                       FFC_RuleS7Au_Del_Ok
    工控规则管理-S7用户自定义-删除-失败                     OPFC_RuleS7Au_Del_Err                      FFC_RuleS7Au_Del_Err
    工控规则管理-单条-S7用户自定义-导入-成功                OPFC_RuleS7Au_Import_One_Ok                FFC_RuleS7Au_Import_One_Ok
    工控规则管理-单条-S7用户自定义-导入-失败                OPFC_RuleS7Au_Import_One_Err               FFC_RuleS7Au_Import_One_Err
    工控规则管理-所有-S7用户自定义-导入-成功                OPFC_RuleS7Au_Import_All_Ok                FFC_RuleS7Au_Import_All_Ok
    工控规则管理-所有-S7用户自定义-导入-失败                OPFC_RuleS7Au_Import_All_Err               FFC_RuleS7Au_Import_All_Err
    工控规则管理-S7用户自定义-导出-内容                     OPFC_RuleS7Au_Export_Ret                   FFC_RuleS7Au_Export_Ret
    工控规则管理-S7用户自定义-导出-空                       OPFC_RuleS7Au_Export_Empty                 FFC_RuleS7Au_Export_Empty
    工控规则管理-S7用户自定义-导出-失败                     OPFC_RuleS7Au_Export_Err                   FFC_RuleS7Au_Export_Err
    工控规则管理-OPC黑名单-内容                             OPFC_RuleOpcBl_List_Ret                    FFC_RuleOpcBl_List_Ret
    工控规则管理-OPC黑名单-失败                             OPFC_RuleOpcBl_List_Err                    FFC_RuleOpcBl_List_Err
    工控规则管理-OPC黑名单-添加-成功                        OPFC_RuleOpcBl_Add_Ok                      FFC_RuleOpcBl_Add_Ok
    工控规则管理-OPC黑名单-添加-失败                        OPFC_RuleOpcBl_Add_Err                     FFC_RuleOpcBl_Add_Err
    工控规则管理-OPC黑名单-全部删除-成功                    OPFC_RuleOpcBl_Cls_Ok                      FFC_RuleOpcBl_Cls_Ok
    工控规则管理-OPC黑名单-全部删除-失败                    OPFC_RuleOpcBl_Cls_Err                     FFC_RuleOpcBl_Cls_Err
    工控规则管理-OPC黑名单-激活全部-成功                    OPFC_RuleOpcBl_Enable_Ok                   FFC_RuleOpcBl_Enable_Ok
    工控规则管理-OPC黑名单-激活全部-失败                    OPFC_RuleOpcBl_Enable_Err                  FFC_RuleOpcBl_Enable_Err
    工控规则管理-OPC黑名单-禁用全部-成功                    OPFC_RuleOpcBl_Disable_Ok                  FFC_RuleOpcBl_Disable_Ok
    工控规则管理-OPC黑名单-禁用全部-失败                    OPFC_RuleOpcBl_Disable_Err                 FFC_RuleOpcBl_Disable_Err
    工控规则管理-OPC黑名单-编辑-成功                        OPFC_RuleOpcBl_Edit_Ok                     FFC_RuleOpcBl_Edit_Ok
    工控规则管理-OPC黑名单-编辑-失败                        OPFC_RuleOpcBl_Edit_Err                    FFC_RuleOpcBl_Edit_Err
    工控规则管理-OPC黑名单-删除-成功                        OPFC_RuleOpcBl_Del_Ok                      FFC_RuleOpcBl_Del_Ok
    工控规则管理-OPC黑名单-删除-失败                        OPFC_RuleOpcBl_Del_Err                     FFC_RuleOpcBl_Del_Err
    工控规则管理-单条-OPC黑名单-导入-成功                   OPFC_RuleOpcBl_Import_One_Ok               FFC_RuleOpcBl_Import_One_Ok
    工控规则管理-单条-OPC黑名单-导入-失败                   OPFC_RuleOpcBl_Import_One_Err              FFC_RuleOpcBl_Import_One_Err
    工控规则管理-所有-OPC黑名单-导入-成功                   OPFC_RuleOpcBl_Import_All_Ok               FFC_RuleOpcBl_Import_All_Ok
    工控规则管理-所有-OPC黑名单-导入-失败                   OPFC_RuleOpcBl_Import_All_Err              FFC_RuleOpcBl_Import_All_Err
    工控规则管理-OPC黑名单-导出-内容                        OPFC_RuleOpcBl_Export_Ret                  FFC_RuleOpcBl_Export_Ret
    工控规则管理-OPC黑名单-导出-空                          OPFC_RuleOpcBl_Export_Empty                FFC_RuleOpcBl_Export_Empty
    工控规则管理-OPC黑名单-导出-失败                        OPFC_RuleOpcBl_Export_Err                  FFC_RuleOpcBl_Export_Err
    工控规则管理-OPC白名单-内容                             OPFC_RuleOpcWl_List_Ret                    FFC_RuleOpcWl_List_Ret
    工控规则管理-OPC白名单-失败                             OPFC_RuleOpcWl_List_Err                    FFC_RuleOpcWl_List_Err
    工控规则管理-OPC白名单-添加-成功                        OPFC_RuleOpcWl_Add_Ok                      FFC_RuleOpcWl_Add_Ok
    工控规则管理-OPC白名单-添加-失败                        OPFC_RuleOpcWl_Add_Err                     FFC_RuleOpcWl_Add_Err
    工控规则管理-OPC白名单-全部删除-成功                    OPFC_RuleOpcWl_Cls_Ok                      FFC_RuleOpcWl_Cls_Ok
    工控规则管理-OPC白名单-全部删除-失败                    OPFC_RuleOpcWl_Cls_Err                     FFC_RuleOpcWl_Cls_Err
    工控规则管理-OPC白名单-激活全部-成功                    OPFC_RuleOpcWl_Enable_Ok                   FFC_RuleOpcWl_Enable_Ok
    工控规则管理-OPC白名单-激活全部-失败                    OPFC_RuleOpcWl_Enable_Err                  FFC_RuleOpcWl_Enable_Err
    工控规则管理-OPC白名单-禁用全部-成功                    OPFC_RuleOpcWl_Disable_Ok                  FFC_RuleOpcWl_Disable_Ok
    工控规则管理-OPC白名单-禁用全部-失败                    OPFC_RuleOpcWl_Disable_Err                 FFC_RuleOpcWl_Disable_Err
    工控规则管理-OPC白名单-编辑-成功                        OPFC_RuleOpcWl_Edit_Ok                     FFC_RuleOpcWl_Edit_Ok
    工控规则管理-OPC白名单-编辑-失败                        OPFC_RuleOpcWl_Edit_Err                    FFC_RuleOpcWl_Edit_Err
    工控规则管理-OPC白名单-删除-成功                        OPFC_RuleOpcWl_Del_Ok                      FFC_RuleOpcWl_Del_Ok
    工控规则管理-OPC白名单-删除-失败                        OPFC_RuleOpcWl_Del_Err                     FFC_RuleOpcWl_Del_Err
    工控规则管理-单条-OPC白名单-导入-成功                   OPFC_RuleOpcWl_Import_One_Ok               FFC_RuleOpcWl_Import_One_Ok
    工控规则管理-单条-OPC白名单-导入-失败                   OPFC_RuleOpcWl_Import_One_Err              FFC_RuleOpcWl_Import_One_Err
    工控规则管理-所有-OPC白名单-导入-成功                   OPFC_RuleOpcWl_Import_All_Ok               FFC_RuleOpcWl_Import_All_Ok
    工控规则管理-所有-OPC白名单-导入-失败                   OPFC_RuleOpcWl_Import_All_Err              FFC_RuleOpcWl_Import_All_Err
    工控规则管理-OPC白名单-导出-内容                        OPFC_RuleOpcWl_Export_Ret                  FFC_RuleOpcWl_Export_Ret
    工控规则管理-OPC白名单-导出-空                          OPFC_RuleOpcWl_Export_Empty                FFC_RuleOpcWl_Export_Empty
    工控规则管理-OPC白名单-导出-失败                        OPFC_RuleOpcWl_Export_Err                  FFC_RuleOpcWl_Export_Err
    工控规则管理-OPC用户自定义-内容                         OPFC_RuleOpcAu_List_Ret                    FFC_RuleOpcAu_List_Ret
    工控规则管理-OPC用户自定义-失败                         OPFC_RuleOpcAu_List_Err                    FFC_RuleOpcAu_List_Err
    工控规则管理-OPC用户自定义-添加-成功                    OPFC_RuleOpcAu_Add_Ok                      FFC_RuleOpcAu_Add_Ok
    工控规则管理-OPC用户自定义-添加-失败                    OPFC_RuleOpcAu_Add_Err                     FFC_RuleOpcAu_Add_Err
    工控规则管理-OPC用户自定义-全部删除-成功                OPFC_RuleOpcAu_Cls_Ok                      FFC_RuleOpcAu_Cls_Ok
    工控规则管理-OPC用户自定义-全部删除-失败                OPFC_RuleOpcAu_Cls_Err                     FFC_RuleOpcAu_Cls_Err
    工控规则管理-OPC用户自定义-激活全部-成功                OPFC_RuleOpcAu_Enable_Ok                   FFC_RuleOpcAu_Enable_Ok
    工控规则管理-OPC用户自定义-激活全部-失败                OPFC_RuleOpcAu_Enable_Err                  FFC_RuleOpcAu_Enable_Err
    工控规则管理-OPC用户自定义-禁用全部-成功                OPFC_RuleOpcAu_Disable_Ok                  FFC_RuleOpcAu_Disable_Ok
    工控规则管理-OPC用户自定义-禁用全部-失败                OPFC_RuleOpcAu_Disable_Err                 FFC_RuleOpcAu_Disable_Err
    工控规则管理-OPC用户自定义-编辑-成功                    OPFC_RuleOpcAu_Edit_Ok                     FFC_RuleOpcAu_Edit_Ok
    工控规则管理-OPC用户自定义-编辑-失败                    OPFC_RuleOpcAu_Edit_Err                    FFC_RuleOpcAu_Edit_Err
    工控规则管理-OPC用户自定义-删除-成功                    OPFC_RuleOpcAu_Del_Ok                      FFC_RuleOpcAu_Del_Ok
    工控规则管理-OPC用户自定义-删除-失败                    OPFC_RuleOpcAu_Del_Err                     FFC_RuleOpcAu_Del_Err
    工控规则管理-单条-OPC用户自定义-导入-成功               OPFC_RuleOpcAu_Import_One_Ok               FFC_RuleOpcAu_Import_One_Ok
    工控规则管理-单条-OPC用户自定义-导入-失败               OPFC_RuleOpcAu_Import_One_Err              FFC_RuleOpcAu_Import_One_Err
    工控规则管理-所有-OPC用户自定义-导入-成功               OPFC_RuleOpcAu_Import_All_Ok               FFC_RuleOpcAu_Import_All_Ok
    工控规则管理-所有-OPC用户自定义-导入-失败               OPFC_RuleOpcAu_Import_All_Err              FFC_RuleOpcAu_Import_All_Err
    工控规则管理-OPC用户自定义-导出-内容                    OPFC_RuleOpcAu_Export_Ret                  FFC_RuleOpcAu_Export_Ret
    工控规则管理-OPC用户自定义-导出-空                      OPFC_RuleOpcAu_Export_Empty                FFC_RuleOpcAu_Export_Empty
    工控规则管理-OPC用户自定义-导出-失败                    OPFC_RuleOpcAu_Export_Err                  FFC_RuleOpcAu_Export_Err
    规则学习-ModbusTCP-开始学习-成功                        OPFC_LrnModbus_Start_Ok                    FFC_LrnModbus_Start_Ok
    规则学习-ModbusTCP-开始学习-失败                        OPFC_LrnModbus_Start_Err                   FFC_LrnModbus_Start_Err
    规则学习-ModbusTCP-停止学习-成功                        OPFC_LrnModbus_End_Ok                      FFC_LrnModbus_End_Ok
    规则学习-ModbusTCP-停止学习-失败                        OPFC_LrnModbus_End_Err                     FFC_LrnModbus_End_Err
    规则学习-ModbusTCP-编辑-成功                            OPFC_LrnModbus_Edit_Ok                     FFC_LrnModbus_Edit_Ok
    规则学习-ModbusTCP-编辑-失败                            OPFC_LrnModbus_Edit_Err                    FFC_LrnModbus_Edit_Err
    规则学习-ModbusTCP-删除-成功                            OPFC_LrnModbus_Del_Ok                      FFC_LrnModbus_Del_Ok
    规则学习-ModbusTCP-删除-失败                            OPFC_LrnModbus_Del_Err                     FFC_LrnModbus_Del_Err
    规则学习-ModbusTCP-清空-成功                            OPFC_LrnModbus_Cls_Ok                      FFC_LrnModbus_Cls_Ok
    规则学习-ModbusTCP-清空-失败                            OPFC_LrnModbus_Cls_Err                     FFC_LrnModbus_Cls_Err
    规则学习-IEC104-开始学习-成功                           OPFC_LrnIec104_Start_Ok                    FFC_LrnIec104_Start_Ok
    规则学习-IEC104-开始学习-失败                           OPFC_LrnIec104_Start_Err                   FFC_LrnIec104_Start_Err
    规则学习-IEC104-停止学习-成功                           OPFC_LrnIec104_End_Ok                      FFC_LrnIec104_End_Ok
    规则学习-IEC104-停止学习-失败                           OPFC_LrnIec104_End_Err                     FFC_LrnIec104_End_Err
    规则学习-IEC104-编辑-成功                               OPFC_LrnIec104_Edit_Ok                     FFC_LrnIec104_Edit_Ok
    规则学习-IEC104-编辑-失败                               OPFC_LrnIec104_Edit_Err                    FFC_LrnIec104_Edit_Err
    规则学习-IEC104-删除-成功                               OPFC_LrnIec104_Del_Ok                      FFC_LrnIec104_Del_Ok
    规则学习-IEC104-删除-失败                               OPFC_LrnIec104_Del_Err                     FFC_LrnIec104_Del_Err
    规则学习-IEC104-清空-成功                               OPFC_LrnIec104_Cls_Ok                      FFC_LrnIec104_Cls_Ok
    规则学习-IEC104-清空-失败                               OPFC_LrnIec104_Cls_Err                     FFC_LrnIec104_Cls_Err
    规则学习-DNP3-开始学习-成功                             OPFC_LrnDnp3_Start_Ok                      FFC_LrnDnp3_Start_Ok
    规则学习-DNP3-开始学习-失败                             OPFC_LrnDnp3_Start_Err                     FFC_LrnDnp3_Start_Err
    规则学习-DNP3-停止学习-成功                             OPFC_LrnDnp3_End_Ok                        FFC_LrnDnp3_End_Ok
    规则学习-DNP3-停止学习-失败                             OPFC_LrnDnp3_End_Err                       FFC_LrnDnp3_End_Err
    规则学习-DNP3-编辑-成功                                 OPFC_LrnDnp3_Edit_Ok                       FFC_LrnDnp3_Edit_Ok
    规则学习-DNP3-编辑-失败                                 OPFC_LrnDnp3_Edit_Err                      FFC_LrnDnp3_Edit_Err
    规则学习-DNP3-删除-成功                                 OPFC_LrnDnp3_Del_Ok                        FFC_LrnDnp3_Del_Ok
    规则学习-DNP3-删除-失败                                 OPFC_LrnDnp3_Del_Err                       FFC_LrnDnp3_Del_Err
    规则学习-DNP3-清空-成功                                 OPFC_LrnDnp3_Cls_Ok                        FFC_LrnDnp3_Cls_Ok
    规则学习-DNP3-清空-失败                                 OPFC_LrnDnp3_Cls_Err                       FFC_LrnDnp3_Cls_Err
    规则学习-S7-开始学习-成功                               OPFC_LrnS7_Start_Ok                        FFC_LrnS7_Start_Ok
    规则学习-S7-开始学习-失败                               OPFC_LrnS7_Start_Err                       FFC_LrnS7_Start_Err
    规则学习-S7-停止学习-成功                               OPFC_LrnS7_End_Ok                          FFC_LrnS7_End_Ok
    规则学习-S7-停止学习-失败                               OPFC_LrnS7_End_Err                         FFC_LrnS7_End_Err
    规则学习-S7-编辑-成功                                   OPFC_LrnS7_Edit_Ok                         FFC_LrnS7_Edit_Ok
    规则学习-S7-编辑-失败                                   OPFC_LrnS7_Edit_Err                        FFC_LrnS7_Edit_Err
    规则学习-S7-删除-成功                                   OPFC_LrnS7_Del_Ok                          FFC_LrnS7_Del_Ok
    规则学习-S7-删除-失败                                   OPFC_LrnS7_Del_Err                         FFC_LrnS7_Del_Err
    规则学习-S7-清空-成功                                   OPFC_LrnS7_Cls_Ok                          FFC_LrnS7_Cls_Ok
    规则学习-S7-清空-失败                                   OPFC_LrnS7_Cls_Err                         FFC_LrnS7_Cls_Err
    规则学习-OPC-开始学习-成功                              OPFC_LrnOpc_Start_Ok                       FFC_LrnOpc_Start_Ok
    规则学习-OPC-开始学习-失败                              OPFC_LrnOpc_Start_Err                      FFC_LrnOpc_Start_Err
    规则学习-OPC-停止学习-成功                              OPFC_LrnOpc_End_Ok                         FFC_LrnOpc_End_Ok
    规则学习-OPC-停止学习-失败                              OPFC_LrnOpc_End_Err                        FFC_LrnOpc_End_Err
    规则学习-OPC-编辑-成功                                  OPFC_LrnOpc_Edit_Ok                        FFC_LrnOpc_Edit_Ok
    规则学习-OPC-编辑-失败                                  OPFC_LrnOpc_Edit_Err                       FFC_LrnOpc_Edit_Err
    规则学习-OPC-删除-成功                                  OPFC_LrnOpc_Del_Ok                         FFC_LrnOpc_Del_Ok
    规则学习-OPC-删除-失败                                  OPFC_LrnOpc_Del_Err                        FFC_LrnOpc_Del_Err
    规则学习-OPC-清空-成功                                  OPFC_LrnOpc_Cls_Ok                         FFC_LrnOpc_Cls_Ok
    规则学习-OPC-清空-失败                                  OPFC_LrnOpc_Cls_Err                        FFC_LrnOpc_Cls_Err
    日志管理-全部日志-内容                                  OPFC_LogAll_List_Ret                       FFC_LogAll_List_Ret
    日志管理-全部日志-失败                                  OPFC_LogAll_List_Err                       FFC_LogAll_List_Err
    日志管理-全部日志-查询-内容                             OPFC_LogAll_Query_Ret                      FFC_LogAll_Query_Ret
    日志管理-全部日志-查询-失败                             OPFC_LogAll_Query_Err                      FFC_LogAll_Query_Err
    日志管理-全部日志-清空-成功                             OPFC_LogAll_Cls_Ok                         FFC_LogAll_Cls_Ok
    日志管理-全部日志-清空-失败                             OPFC_LogAll_Cls_Err                        FFC_LogAll_Cls_Err
    日志管理-全部日志-删除-成功                             OPFC_LogAll_Del_Ok                         FFC_LogAll_Del_Ok
    日志管理-全部日志-删除-失败                             OPFC_LogAll_Del_Err                        FFC_LogAll_Del_Err
    日志管理-全部日志-导出-内容                             OPFC_LogAll_Export_Ret                     FFC_LogAll_Export_Ret
    日志管理-全部日志-导出-空                               OPFC_LogAll_Export_Empty                   FFC_LogAll_Export_Empty
    日志管理-全部日志-导出-失败                             OPFC_LogAll_Export_Err                     FFC_LogAll_Export_Err
    日志管理-MAC黑名单-内容                                 OPFC_LogRuleMac_List_Ret                   FFC_LogRuleMac_List_Ret
    日志管理-MAC黑名单-失败                                 OPFC_LogRuleMac_List_Err                   FFC_LogRuleMac_List_Err
    日志管理-MAC黑名单-查询-内容                            OPFC_LogRuleMac_Query_Ret                  FFC_LogRuleMac_Query_Ret
    日志管理-MAC黑名单-查询-失败                            OPFC_LogRuleMac_Query_Err                  FFC_LogRuleMac_Query_Err
    日志管理-MAC黑名单-清空-成功                            OPFC_LogRuleMac_Cls_Ok                     FFC_LogRuleMac_Cls_Ok
    日志管理-MAC黑名单-清空-失败                            OPFC_LogRuleMac_Cls_Err                    FFC_LogRuleMac_Cls_Err
    日志管理-MAC黑名单-删除-成功                            OPFC_LogRuleMac_Del_Ok                     FFC_LogRuleMac_Del_Ok
    日志管理-MAC黑名单-删除-失败                            OPFC_LogRuleMac_Del_Err                    FFC_LogRuleMac_Del_Err
    日志管理-MAC黑名单-导出-内容                            OPFC_LogRuleMac_Export_Ret                 FFC_LogRuleMac_Export_Ret
    日志管理-MAC黑名单-导出-空                              OPFC_LogRuleMac_Export_Empty               FFC_LogRuleMac_Export_Empty
    日志管理-MAC黑名单-导出-失败                            OPFC_LogRuleMac_Export_Err                 FFC_LogRuleMac_Export_Err
    日志管理-IP黑名单-内容                                  OPFC_LogRuleIp_List_Ret                    FFC_LogRuleIp_List_Ret
    日志管理-IP黑名单-失败                                  OPFC_LogRuleIp_List_Err                    FFC_LogRuleIp_List_Err
    日志管理-IP黑名单-查询-内容                             OPFC_LogRuleIp_Query_Ret                   FFC_LogRuleIp_Query_Ret
    日志管理-IP黑名单-查询-失败                             OPFC_LogRuleIp_Query_Err                   FFC_LogRuleIp_Query_Err
    日志管理-IP黑名单-清空-成功                             OPFC_LogRuleIp_Cls_Ok                      FFC_LogRuleIp_Cls_Ok
    日志管理-IP黑名单-清空-失败                             OPFC_LogRuleIp_Cls_Err                     FFC_LogRuleIp_Cls_Err
    日志管理-IP黑名单-删除-成功                             OPFC_LogRuleIp_Del_Ok                      FFC_LogRuleIp_Del_Ok
    日志管理-IP黑名单-删除-失败                             OPFC_LogRuleIp_Del_Err                     FFC_LogRuleIp_Del_Err
    日志管理-IP黑名单-导出-内容                             OPFC_LogRuleIp_Export_Ret                  FFC_LogRuleIp_Export_Ret
    日志管理-IP黑名单-导出-空                               OPFC_LogRuleIp_Export_Empty                FFC_LogRuleIp_Export_Empty
    日志管理-IP黑名单-导出-失败                             OPFC_LogRuleIp_Export_Err                  FFC_LogRuleIp_Export_Err
    日志管理-安全域-内容                                    OPFC_LogRuleSz_List_Ret                    FFC_LogRuleSz_List_Ret
    日志管理-安全域-失败                                    OPFC_LogRuleSz_List_Err                    FFC_LogRuleSz_List_Err
    日志管理-安全域-查询-内容                               OPFC_LogRuleSz_Query_Ret                   FFC_LogRuleSz_Query_Ret
    日志管理-安全域-查询-失败                               OPFC_LogRuleSz_Query_Err                   FFC_LogRuleSz_Query_Err
    日志管理-安全域-清空-成功                               OPFC_LogRuleSz_Cls_Ok                      FFC_LogRuleSz_Cls_Ok
    日志管理-安全域-清空-失败                               OPFC_LogRuleSz_Cls_Err                     FFC_LogRuleSz_Cls_Err
    日志管理-安全域-删除-成功                               OPFC_LogRuleSz_Del_Ok                      FFC_LogRuleSz_Del_Ok
    日志管理-安全域-删除-失败                               OPFC_LogRuleSz_Del_Err                     FFC_LogRuleSz_Del_Err
    日志管理-安全域-导出-内容                               OPFC_LogRuleSz_Export_Ret                  FFC_LogRuleSz_Export_Ret
    日志管理-安全域-导出-空                                 OPFC_LogRuleSz_Export_Empty                FFC_LogRuleSz_Export_Empty
    日志管理-安全域-导出-失败                               OPFC_LogRuleSz_Export_Err                  FFC_LogRuleSz_Export_Err
    日志管理-TCP-内容                                       OPFC_LogRuleTcp_List_Ret                   FFC_LogRuleTcp_List_Ret
    日志管理-TCP-失败                                       OPFC_LogRuleTcp_List_Err                   FFC_LogRuleTcp_List_Err
    日志管理-TCP-查询-内容                                  OPFC_LogRuleTcp_Query_Ret                  FFC_LogRuleTcp_Query_Ret
    日志管理-TCP-查询-失败                                  OPFC_LogRuleTcp_Query_Err                  FFC_LogRuleTcp_Query_Err
    日志管理-TCP-清空-成功                                  OPFC_LogRuleTcp_Cls_Ok                     FFC_LogRuleTcp_Cls_Ok
    日志管理-TCP-清空-失败                                  OPFC_LogRuleTcp_Cls_Err                    FFC_LogRuleTcp_Cls_Err
    日志管理-TCP-删除-成功                                  OPFC_LogRuleTcp_Del_Ok                     FFC_LogRuleTcp_Del_Ok
    日志管理-TCP-删除-失败                                  OPFC_LogRuleTcp_Del_Err                    FFC_LogRuleTcp_Del_Err
    日志管理-TCP-导出-内容                                  OPFC_LogRuleTcp_Export_Ret                 FFC_LogRuleTcp_Export_Ret
    日志管理-TCP-导出-空                                    OPFC_LogRuleTcp_Export_Empty               FFC_LogRuleTcp_Export_Empty
    日志管理-TCP-导出-失败                                  OPFC_LogRuleTcp_Export_Err                 FFC_LogRuleTcp_Export_Err
    日志管理-UDP-内容                                       OPFC_LogRuleUdp_List_Ret                   FFC_LogRuleUdp_List_Ret
    日志管理-UDP-失败                                       OPFC_LogRuleUdp_List_Err                   FFC_LogRuleUdp_List_Err
    日志管理-UDP-查询-内容                                  OPFC_LogRuleUdp_Query_Ret                  FFC_LogRuleUdp_Query_Ret
    日志管理-UDP-查询-失败                                  OPFC_LogRuleUdp_Query_Err                  FFC_LogRuleUdp_Query_Err
    日志管理-UDP-清空-成功                                  OPFC_LogRuleUdp_Cls_Ok                     FFC_LogRuleUdp_Cls_Ok
    日志管理-UDP-清空-失败                                  OPFC_LogRuleUdp_Cls_Err                    FFC_LogRuleUdp_Cls_Err
    日志管理-UDP-删除-成功                                  OPFC_LogRuleUdp_Del_Ok                     FFC_LogRuleUdp_Del_Ok
    日志管理-UDP-删除-失败                                  OPFC_LogRuleUdp_Del_Err                    FFC_LogRuleUdp_Del_Err
    日志管理-UDP-导出-内容                                  OPFC_LogRuleUdp_Export_Ret                 FFC_LogRuleUdp_Export_Ret
    日志管理-UDP-导出-空                                    OPFC_LogRuleUdp_Export_Empty               FFC_LogRuleUdp_Export_Empty
    日志管理-UDP-导出-失败                                  OPFC_LogRuleUdp_Export_Err                 FFC_LogRuleUdp_Export_Err
    日志管理-工控白名单告警-内容                            OPFC_LogRuleIndWl_List_Ret                 FFC_LogRuleIndWl_List_Ret
    日志管理-工控白名单告警-失败                            OPFC_LogRuleIndWl_List_Err                 FFC_LogRuleIndWl_List_Err
    日志管理-工控白名单告警-查询-内容                       OPFC_LogRuleIndWl_Query_Ret                FFC_LogRuleIndWl_Query_Ret
    日志管理-工控白名单告警-查询-失败                       OPFC_LogRuleIndWl_Query_Err                FFC_LogRuleIndWl_Query_Err
    日志管理-工控白名单告警-清空-成功                       OPFC_LogRuleIndWl_Cls_Ok                   FFC_LogRuleIndWl_Cls_Ok
    日志管理-工控白名单告警-清空-失败                       OPFC_LogRuleIndWl_Cls_Err                  FFC_LogRuleIndWl_Cls_Err
    日志管理-工控白名单告警-删除-成功                       OPFC_LogRuleIndWl_Del_Ok                   FFC_LogRuleIndWl_Del_Ok
    日志管理-工控白名单告警-删除-失败                       OPFC_LogRuleIndWl_Del_Err                  FFC_LogRuleIndWl_Del_Err
    日志管理-工控白名单告警-导出-内容                       OPFC_LogRuleIndWl_Export_Ret               FFC_LogRuleIndWl_Export_Ret
    日志管理-工控白名单告警-导出-空                         OPFC_LogRuleIndWl_Export_Empty             FFC_LogRuleIndWl_Export_Empty
    日志管理-工控白名单告警-导出-失败                       OPFC_LogRuleIndWl_Export_Err               FFC_LogRuleIndWl_Export_Err
    日志管理-工控黑名单告警-内容                            OPFC_LogRuleIndBl_List_Ret                 FFC_LogRuleIndBl_List_Ret
    日志管理-工控黑名单告警-失败                            OPFC_LogRuleIndBl_List_Err                 FFC_LogRuleIndBl_List_Err
    日志管理-工控黑名单告警-查询-内容                       OPFC_LogRuleIndBl_Query_Ret                FFC_LogRuleIndBl_Query_Ret
    日志管理-工控黑名单告警-查询-失败                       OPFC_LogRuleIndBl_Query_Err                FFC_LogRuleIndBl_Query_Err
    日志管理-工控黑名单告警-清空-成功                       OPFC_LogRuleIndBl_Cls_Ok                   FFC_LogRuleIndBl_Cls_Ok
    日志管理-工控黑名单告警-清空-失败                       OPFC_LogRuleIndBl_Cls_Err                  FFC_LogRuleIndBl_Cls_Err
    日志管理-工控黑名单告警-删除-成功                       OPFC_LogRuleIndBl_Del_Ok                   FFC_LogRuleIndBl_Del_Ok
    日志管理-工控黑名单告警-删除-失败                       OPFC_LogRuleIndBl_Del_Err                  FFC_LogRuleIndBl_Del_Err
    日志管理-工控黑名单告警-导出-内容                       OPFC_LogRuleIndBl_Export_Ret               FFC_LogRuleIndBl_Export_Ret
    日志管理-工控黑名单告警-导出-空                         OPFC_LogRuleIndBl_Export_Empty             FFC_LogRuleIndBl_Export_Empty
    日志管理-工控黑名单告警-导出-失败                       OPFC_LogRuleIndBl_Export_Err               FFC_LogRuleIndBl_Export_Err
    日志管理-工控协议规约告警-内容                          OPFC_LogRuleIndEx_List_Ret                 FFC_LogRuleIndEx_List_Ret
    日志管理-工控协议规约告警-失败                          OPFC_LogRuleIndEx_List_Err                 FFC_LogRuleIndEx_List_Err
    日志管理-工控协议规约告警-查询-内容                     OPFC_LogRuleIndEx_Query_Ret                FFC_LogRuleIndEx_Query_Ret
    日志管理-工控协议规约告警-查询-失败                     OPFC_LogRuleIndEx_Query_Err                FFC_LogRuleIndEx_Query_Err
    日志管理-工控协议规约告警-清空-成功                     OPFC_LogRuleIndEx_Cls_Ok                   FFC_LogRuleIndEx_Cls_Ok
    日志管理-工控协议规约告警-清空-失败                     OPFC_LogRuleIndEx_Cls_Err                  FFC_LogRuleIndEx_Cls_Err
    日志管理-工控协议规约告警-删除-成功                     OPFC_LogRuleIndEx_Del_Ok                   FFC_LogRuleIndEx_Del_Ok
    日志管理-工控协议规约告警-删除-失败                     OPFC_LogRuleIndEx_Del_Err                  FFC_LogRuleIndEx_Del_Err
    日志管理-工控协议规约告警-导出-内容                     OPFC_LogRuleIndEx_Export_Ret               FFC_LogRuleIndEx_Export_Ret
    日志管理-工控协议规约告警-导出-空                       OPFC_LogRuleIndEx_Export_Empty             FFC_LogRuleIndEx_Export_Empty
    日志管理-工控协议规约告警-导出-失败                     OPFC_LogRuleIndEx_Export_Err               FFC_LogRuleIndEx_Export_Err
    日志管理-地址欺骗日志-内容                              OPFC_LogArp_List_Ret                       FFC_LogArp_List_Ret
    日志管理-地址欺骗日志-失败                              OPFC_LogArp_List_Err                       FFC_LogArp_List_Err
    日志管理-地址欺骗日志-查询-内容                         OPFC_LogArp_Query_Ret                      FFC_LogArp_Query_Ret
    日志管理-地址欺骗日志-查询-失败                         OPFC_LogArp_Query_Err                      FFC_LogArp_Query_Err
    日志管理-地址欺骗日志-清空-成功                         OPFC_LogArp_Cls_Ok                         FFC_LogArp_Cls_Ok
    日志管理-地址欺骗日志-清空-失败                         OPFC_LogArp_Cls_Err                        FFC_LogArp_Cls_Err
    日志管理-地址欺骗日志-删除-成功                         OPFC_LogArp_Del_Ok                         FFC_LogArp_Del_Ok
    日志管理-地址欺骗日志-删除-失败                         OPFC_LogArp_Del_Err                        FFC_LogArp_Del_Err
    日志管理-地址欺骗日志-导出-内容                         OPFC_LogArp_Export_Ret                     FFC_LogArp_Export_Ret
    日志管理-地址欺骗日志-导出-空                           OPFC_LogArp_Export_Empty                   FFC_LogArp_Export_Empty
    日志管理-地址欺骗日志-导出-失败                         OPFC_LogArp_Export_Err                     FFC_LogArp_Export_Err
    日志管理-攻击日志-内容                                  OPFC_LogAttack_List_Ret                    FFC_LogAttack_List_Ret
    日志管理-攻击日志-失败                                  OPFC_LogAttack_List_Err                    FFC_LogAttack_List_Err
    日志管理-攻击日志-查询-内容                             OPFC_LogAttack_Query_Ret                   FFC_LogAttack_Query_Ret
    日志管理-攻击日志-查询-失败                             OPFC_LogAttack_Query_Err                   FFC_LogAttack_Query_Err
    日志管理-攻击日志-清空-成功                             OPFC_LogAttack_Cls_Ok                      FFC_LogAttack_Cls_Ok
    日志管理-攻击日志-清空-失败                             OPFC_LogAttack_Cls_Err                     FFC_LogAttack_Cls_Err
    日志管理-攻击日志-删除-成功                             OPFC_LogAttack_Del_Ok                      FFC_LogAttack_Del_Ok
    日志管理-攻击日志-删除-失败                             OPFC_LogAttack_Del_Err                     FFC_LogAttack_Del_Err
    日志管理-攻击日志-导出-内容                             OPFC_LogAttack_Export_Ret                  FFC_LogAttack_Export_Ret
    日志管理-攻击日志-导出-空                               OPFC_LogAttack_Export_Empty                FFC_LogAttack_Export_Empty
    日志管理-攻击日志-导出-失败                             OPFC_LogAttack_Export_Err                  FFC_LogAttack_Export_Err
    日志管理-网关运行日志-内容                              OPFC_LogRun_List_Ret                       FFC_LogRun_List_Ret
    日志管理-网关运行日志-失败                              OPFC_LogRun_List_Err                       FFC_LogRun_List_Err
    日志管理-网关运行日志-查询-内容                         OPFC_LogRun_Query_Ret                      FFC_LogRun_Query_Ret
    日志管理-网关运行日志-查询-失败                         OPFC_LogRun_Query_Err                      FFC_LogRun_Query_Err
    日志管理-网关运行日志-清空-成功                         OPFC_LogRun_Cls_Ok                         FFC_LogRun_Cls_Ok
    日志管理-网关运行日志-清空-失败                         OPFC_LogRun_Cls_Err                        FFC_LogRun_Cls_Err
    日志管理-网关运行日志-删除-成功                         OPFC_LogRun_Del_Ok                         FFC_LogRun_Del_Ok
    日志管理-网关运行日志-删除-失败                         OPFC_LogRun_Del_Err                        FFC_LogRun_Del_Err
    日志管理-网关运行日志-导出-内容                         OPFC_LogRun_Export_Ret                     FFC_LogRun_Export_Ret
    日志管理-网关运行日志-导出-空                           OPFC_LogRun_Export_Empty                   FFC_LogRun_Export_Empty
    日志管理-网关运行日志-导出-失败                         OPFC_LogRun_Export_Err                     FFC_LogRun_Export_Err
    日志管理-系统日志-内容                                  OPFC_LogSys_List_Ret                       FFC_LogSys_List_Ret
    日志管理-系统日志-失败                                  OPFC_LogSys_List_Err                       FFC_LogSys_List_Err
    日志管理-系统日志-查询-内容                             OPFC_LogSys_Query_Ret                      FFC_LogSys_Query_Ret
    日志管理-系统日志-查询-失败                             OPFC_LogSys_Query_Err                      FFC_LogSys_Query_Err
    日志管理-系统日志-清空-成功                             OPFC_LogSys_Cls_Ok                         FFC_LogSys_Cls_Ok
    日志管理-系统日志-清空-失败                             OPFC_LogSys_Cls_Err                        FFC_LogSys_Cls_Err
    日志管理-系统日志-删除-成功                             OPFC_LogSys_Del_Ok                         FFC_LogSys_Del_Ok
    日志管理-系统日志-删除-失败                             OPFC_LogSys_Del_Err                        FFC_LogSys_Del_Err
    日志管理-系统日志-导出-内容                             OPFC_LogSys_Export_Ret                     FFC_LogSys_Export_Ret
    日志管理-系统日志-导出-空                               OPFC_LogSys_Export_Empty                   FFC_LogSys_Export_Empty
    日志管理-系统日志-导出-失败                             OPFC_LogSys_Export_Err                     FFC_LogSys_Export_Err
    系统设置-功能设置-保存-成功                             OPFC_Conf_Func_Ok                          FFC_Conf_Func_Ok
    系统设置-功能设置-保存-失败                             OPFC_Conf_Func_Err                         FFC_Conf_Func_Err
    系统设置-告警级别设置-保存-成功                         OPFC_Conf_Warnlevel_Ok                     FFC_Conf_Warnlevel_Ok
    系统设置-告警级别设置-保存-失败                         OPFC_Conf_Warnlevel_Err                    FFC_Conf_Warnlevel_Err
    系统设置-告警邮箱设置-保存-成功                         OPFC_Conf_AlermEmail_Ok                    FFC_Conf_AlermEmail_Ok
    系统设置-告警邮箱设置-保存-失败                         OPFC_Conf_AlermEmail_Err                   FFC_Conf_AlermEmail_Err

======================================================================================================================================================================================
6.客户端<=服务端 操作码表及回调函数表 （共356个）
======================================================================================================================================================================================

    命名示例：
                    刷新-List或者Info；
                    查询-Query；
                    添加-Add；
                    激活全部-Enable；
                    禁用全部-Disable；
                    全部删除-Cls；
                    编辑-Edit；
                    删除-Del；
                    导入-Import；
                    导出-Import；
    操作码                              回调函数名                  操作中文描述
    -----------------------------------------------------------------------------------------------------------------------------------------------------------
    OPFS_Connect_Ok                  FFS_Connect_Ok                 设备上线-连接成功     
    OPFS_Connect_Err                 FFS_Connect_Err                设备上线-连接失败  
    OPFS_Monitor_Ok                  FFS_Monitor_Ok                 状态监测-性能监测收到
    OPFS_Manage_Info                 FFS_Manage_Info                网关管理事件：刷新 / 点指定页数
    OPFS_Manage_Query                FFS_Manage_Query               网关管理事件：点“查询”按钮
    OPFS_Manage_ModeSet              FFS_Manage_ModeSet             网关管理事件：点“全防护”按钮或“全告警”按钮
    OPFS_Manage_Edit                 FFS_Manage_Edit                网关管理事件：点“编辑”
    OPFS_Manage_Del                  FFS_Manage_Del                 网关管理事件：点“删除”
    OPFS_Group_List                  FFS_Group_List                 分组管理事件：刷新 / 点指定页数
    OPFS_Group_Add                   FFS_Group_Add                  分组管理事件：点“添加”
    OPFS_Group_Edit                  FFS_Group_Edit                 分组管理事件：点“编辑”
    OPFS_Group_Del                   FFS_Group_Del                  分组管理事件：点“删除”
    OPFS_RuleArp_List                FFS_RuleArp_List               基本规则管理-ARP规则事件：刷新 / 点指定页数
    OPFS_RuleArp_Add                 FFS_RuleArp_Add                基本规则管理-ARP规则事件：点“添加”
    OPFS_RuleArp_Enable              FFS_RuleArp_Enable             基本规则管理-ARP规则事件：点“激活全部”
    OPFS_RuleArp_Disable             FFS_RuleArp_Disable            基本规则管理-ARP规则事件：点“禁用全部”
    OPFS_RuleArp_Cls                 FFS_RuleArp_Cls                基本规则管理-ARP规则事件：点“全部删除”
    OPFS_RuleArp_Edit                FFS_RuleArp_Edit               基本规则管理-ARP规则事件：点“编辑”
    OPFS_RuleArp_Del                 FFS_RuleArp_Del                基本规则管理-ARP规则事件：点“删除”
    OPFS_RuleMac_List                FFS_RuleMac_List               基本规则管理-MAC黑名单事件：刷新 / 点指定页数
    OPFS_RuleMac_Add                 FFS_RuleMac_Add                基本规则管理-MAC黑名单事件：点“添加”
    OPFS_RuleMac_Cls                 FFS_RuleMac_Cls                基本规则管理-MAC黑名单事件：点“全部删除”
    OPFS_RuleMac_Enable              FFS_RuleMac_Enable             基本规则管理-MAC黑名单事件：点“激活全部”
    OPFS_RuleMac_Disable             FFS_RuleMac_Disable            基本规则管理-MAC黑名单事件：点“禁用全部”
    OPFS_RuleMac_Edit                FFS_RuleMac_Edit               基本规则管理-MAC黑名单事件：点“编辑”
    OPFS_RuleMac_Del                 FFS_RuleMac_Del                基本规则管理-MAC黑名单事件：点“删除”
    OPFS_RuleIpBl_List               FFS_RuleIpBl_List              基本规则管理-IP规则-IP黑名单事件：刷新 / 点指定页数
    OPFS_RuleIpBl_Add                FFS_RuleIpBl_Add               基本规则管理-IP规则-IP黑名单事件：点“添加”
    OPFS_RuleIpBl_Cls                FFS_RuleIpBl_Cls               基本规则管理-IP规则-IP黑名单事件：点“全部删除”
    OPFS_RuleIpBl_Enable             FFS_RuleIpBl_Enable            基本规则管理-IP规则-IP黑名单事件：点“激活全部”
    OPFS_RuleIpBl_Disable            FFS_RuleIpBl_Disable           基本规则管理-IP规则-IP黑名单事件：点“禁用全部”
    OPFS_RuleIpBl_Edit               FFS_RuleIpBl_Edit              基本规则管理-IP规则-IP黑名单事件：点“编辑”
    OPFS_RuleIpBl_Del                FFS_RuleIpBl_Del               基本规则管理-IP规则-IP黑名单事件：点“删除”
    OPFS_RuleIpAu_List               FFS_RuleIpAu_List              基本规则管理-IP规则-IP用户自定义事件：刷新 / 点指定页数
    OPFS_RuleIpAu_Add                FFS_RuleIpAu_Add               基本规则管理-IP规则-IP用户自定义事件：点“添加”
    OPFS_RuleIpAu_Cls                FFS_RuleIpAu_Cls               基本规则管理-IP规则-IP用户自定义事件：点“全部删除”
    OPFS_RuleIpAu_Edit               FFS_RuleIpAu_Edit              基本规则管理-IP规则-IP用户自定义事件：点“编辑”
    OPFS_RuleIpAu_Del                FFS_RuleIpAu_Del               基本规则管理-IP规则-IP用户自定义事件：点“删除”
    OPFS_RuleSzPri_List              FFS_RuleSzPri_List             基本规则管理-安全域规则-优先级配置事件：刷新 / 点指定页数
    OPFS_RuleSzPri_Add               FFS_RuleSzPri_Add              基本规则管理-安全域规则-优先级配置事件：点“添加”
    OPFS_RuleSzPri_Cls               FFS_RuleSzPri_Cls              基本规则管理-安全域规则-优先级配置事件：点“全部删除”
    OPFS_RuleSzPri_Edit              FFS_RuleSzPri_Edit             基本规则管理-安全域规则-优先级配置事件：点“编辑”
    OPFS_RuleSzPri_Del               FFS_RuleSzPri_Del              基本规则管理-安全域规则-优先级配置事件：点“删除”
    OPFS_RuleSzMac_List              FFS_RuleSzMac_List             基本规则管理-安全域规则-MAC安全域事件：刷新 / 点指定页数
    OPFS_RuleSzMac_Add               FFS_RuleSzMac_Add              基本规则管理-安全域规则-MAC安全域事件：点“添加”
    OPFS_RuleSzMac_Cls               FFS_RuleSzMac_Cls              基本规则管理-安全域规则-MAC安全域事件：点“全部删除”
    OPFS_RuleSzMac_Enable            FFS_RuleSzMac_Enable           基本规则管理-安全域规则-MAC安全域事件：点“激活全部”
    OPFS_RuleSzMac_Disable           FFS_RuleSzMac_Disable          基本规则管理-安全域规则-MAC安全域事件：点“禁用全部”
    OPFS_RuleSzMac_Edit              FFS_RuleSzMac_Edit             基本规则管理-安全域规则-MAC安全域事件：点“编辑”
    OPFS_RuleSzMac_Del               FFS_RuleSzMac_Del              基本规则管理-安全域规则-MAC安全域事件：点“删除”
    OPFS_RuleSzIp_List               FFS_RuleSzIp_List              基本规则管理-安全域规则-IP安全域事件：刷新 / 点指定页数
    OPFS_RuleSzIp_Add                FFS_RuleSzIp_Add               基本规则管理-安全域规则-IP安全域事件：点“添加”
    OPFS_RuleSzIp_Cls                FFS_RuleSzIp_CLs               基本规则管理-安全域规则-IP安全域事件：点“全部删除”
    OPFS_RuleSzIp_Enable             FFS_RuleSzIp_Enable            基本规则管理-安全域规则-IP安全域事件：点“激活全部”
    OPFS_RuleSzIp_Disable            FFS_RuleSzIp_Disable           基本规则管理-安全域规则-IP安全域事件：点“禁用全部”
    OPFS_RuleSzIp_Edit               FFS_RuleSzIp_Edit              基本规则管理-安全域规则-IP安全域事件：点“编辑”
    OPFS_RuleSzIp_Del                FFS_RuleSzIp_Del               基本规则管理-安全域规则-IP安全域事件：点“删除”
    OPFS_RuleSzTrans_List            FFS_RuleSzTrans_List           基本规则管理-安全域规则-传输层安全域事件：刷新 / 点指定页数
    OPFS_RuleSzTrans_Add             FFS_RuleSzTrans_Add            基本规则管理-安全域规则-传输层安全域事件：点“添加”
    OPFS_RuleSzTrans_Cls             FFS_RuleSzTrans_Cls            基本规则管理-安全域规则-传输层安全域事件：点“全部删除”
    OPFS_RuleSzTrans_Enable          FFS_RuleSzTrans_Enable         基本规则管理-安全域规则-传输层安全域事件：点“激活全部”
    OPFS_RuleSzTrans_Disable         FFS_RuleSzTrans_Disable        基本规则管理-安全域规则-传输层安全域事件：点“禁用全部”
    OPFS_RuleSzTrans_Edit            FFS_RuleSzTrans_Edit           基本规则管理-安全域规则-传输层安全域事件：点“编辑”
    OPFS_RuleSzTrans_Del             FFS_RuleSzTrans_Del            基本规则管理-安全域规则-传输层安全域事件：点“删除”
    OPFS_RuleTcpBl_List              FFS_RuleTcpBl_List             基本规则管理-TCP规则-TCP黑名单事件：刷新 / 点指定页数
    OPFS_RuleTcpBl_Add               FFS_RuleTcpBl_Add              基本规则管理-TCP规则-TCP黑名单事件：点“添加”
    OPFS_RuleTcpBl_Cls               FFS_RuleTcpBl_Cls              基本规则管理-TCP规则-TCP黑名单事件：点“全部删除”
    OPFS_RuleTcpBl_Enable            FFS_RuleTcpBl_Enable           基本规则管理-TCP规则-TCP黑名单事件：点“激活全部”
    OPFS_RuleTcpBl_Disable           FFS_RuleTcpBl_Disable          基本规则管理-TCP规则-TCP黑名单事件：点“禁用全部”
    OPFS_RuleTcpBl_Edit              FFS_RuleTcpBl_Edit             基本规则管理-TCP规则-TCP黑名单事件：点“编辑”
    OPFS_RuleTcpBl_Del               FFS_RuleTcpBl_Del              基本规则管理-TCP规则-TCP黑名单事件：点“删除”
    OPFS_RuleTcpBl_Import            FFS_RuleTcpBl_Import           基本规则管理-TCP规则-TCP黑名单事件：点“导入”
    OPFS_RuleTcpBl_Export            FFS_RuleTcpBl_Export           基本规则管理-TCP规则-TCP黑名单事件：点“导出”
    OPFS_RuleTcpWl_List              FFS_RuleTcpWl_List             基本规则管理-TCP规则-TCP白名单事件：刷新 / 点指定页数
    OPFS_RuleTcpWl_Add               FFS_RuleTcpWl_Add              基本规则管理-TCP规则-TCP白名单事件：点“添加”
    OPFS_RuleTcpWl_Cls               FFS_RuleTcpWl_Cls              基本规则管理-TCP规则-TCP白名单事件：点“全部删除”
    OPFS_RuleTcpWl_Enable            FFS_RuleTcpWl_Enable           基本规则管理-TCP规则-TCP白名单事件：点“激活全部”
    OPFS_RuleTcpWl_Disable           FFS_RuleTcpWl_Disable          基本规则管理-TCP规则-TCP白名单事件：点“禁用全部”
    OPFS_RuleTcpWl_Edit              FFS_RuleTcpWl_Edit             基本规则管理-TCP规则-TCP白名单事件：点“编辑”
    OPFS_RuleTcpWl_Del               FFS_RuleTcpWl_Del              基本规则管理-TCP规则-TCP白名单事件：点“删除”
    OPFS_RuleTcpWl_Import            FFS_RuleTcpWl_Import           基本规则管理-TCP规则-TCP白名单事件：点“导入”
    OPFS_RuleTcpWl_Export            FFS_RuleTcpWl_Export           基本规则管理-TCP规则-TCP白名单事件：点“导出”
    OPFS_RuleTcpTrust_List           FFS_RuleTcpTrust_List          基本规则管理-TCP规则-TCP无条件信任事件：刷新 / 点指定页数
    OPFS_RuleTcpTrust_Add            FFS_RuleTcpTrust_Add           基本规则管理-TCP规则-TCP无条件信任事件：点“添加”
    OPFS_RuleTcpTrust_Cls            FFS_RuleTcpTrust_Cls           基本规则管理-TCP规则-TCP无条件信任事件：点“全部删除”
    OPFS_RuleTcpTrust_Edit           FFS_RuleTcpTrust_Edit          基本规则管理-TCP规则-TCP无条件信任事件：点“编辑”
    OPFS_RuleTcpTrust_Del            FFS_RuleTcpTrust_Del           基本规则管理-TCP规则-TCP无条件信任事件：点“删除”
    OPFS_RuleTcpTrust_Import         FFS_RuleTcpTrust_Import        基本规则管理-TCP规则-TCP无条件信任事件：点“导入”
    OPFS_RuleTcpTrust_Export         FFS_RuleTcpTrust_Export        基本规则管理-TCP规则-TCP无条件信任事件：点“导出”
    OPFS_RuleTcpAu_List              FFS_RuleTcpAu_List             基本规则管理-TCP规则-TCP用户自定义事件：刷新 / 点指定页数
    OPFS_RuleTcpAu_Add               FFS_RuleTcpAu_Add              基本规则管理-TCP规则-TCP用户自定义事件：点“添加”
    OPFS_RuleTcpAu_Cls               FFS_RuleTcpAu_Cls              基本规则管理-TCP规则-TCP用户自定义事件：点“全部删除”
    OPFS_RuleTcpAu_Edit              FFS_RuleTcpAu_Edit             基本规则管理-TCP规则-TCP用户自定义事件：点“编辑”
    OPFS_RuleTcpAu_Del               FFS_RuleTcpAu_Del              基本规则管理-TCP规则-TCP用户自定义事件：点“删除”
    OPFS_RuleTcpAu_Import            FFS_RuleTcpAu_Import           基本规则管理-TCP规则-TCP用户自定义事件：点“导入”
    OPFS_RuleTcpAu_Export            FFS_RuleTcpAu_Export           基本规则管理-TCP规则-TCP用户自定义事件：点“导出”
    OPFS_RuleUdpBl_List              FFS_RuleUdpBl_List             基本规则管理-UDP规则-UDP黑名单事件：刷新 / 点指定页数
    OPFS_RuleUdpBl_Add               FFS_RuleUdpBl_Add              基本规则管理-UDP规则-UDP黑名单事件：点“添加”
    OPFS_RuleUdpBl_Cls               FFS_RuleUdpBl_Cls              基本规则管理-UDP规则-UDP黑名单事件：点“全部删除”
    OPFS_RuleUdpBl_Enable            FFS_RuleUdpBl_Enable           基本规则管理-UDP规则-UDP黑名单事件：点“激活全部”
    OPFS_RuleUdpBl_Disable           FFS_RuleUdpBl_Disable          基本规则管理-UDP规则-UDP黑名单事件：点“禁用全部”
    OPFS_RuleUdpBl_Edit              FFS_RuleUdpBl_Edit             基本规则管理-UDP规则-UDP黑名单事件：点“编辑”
    OPFS_RuleUdpBl_Del               FFS_RuleUdpBl_Del              基本规则管理-UDP规则-UDP黑名单事件：点“删除”
    OPFS_RuleUdpBl_Import            FFS_RuleUdpBl_Import           基本规则管理-UDP规则-UDP黑名单事件：点“导入”
    OPFS_RuleUdpBl_Export            FFS_RuleUdpBl_Export           基本规则管理-UDP规则-UDP黑名单事件：点“导出”
    OPFS_RuleUdpWl_List              FFS_RuleUdpWl_List             基本规则管理-UDP规则-UDP白名单事件：刷新 / 点指定页数
    OPFS_RuleUdpWl_Add               FFS_RuleUdpWl_Add              基本规则管理-UDP规则-UDP白名单事件：点“添加”
    OPFS_RuleUdpWl_Cls               FFS_RuleUdpWl_Cls              基本规则管理-UDP规则-UDP白名单事件：点“全部删除”
    OPFS_RuleUdpWl_Enable            FFS_RuleUdpWl_Enable           基本规则管理-UDP规则-UDP白名单事件：点“激活全部”
    OPFS_RuleUdpWl_Disable           FFS_RuleUdpWl_Disable          基本规则管理-UDP规则-UDP白名单事件：点“禁用全部”
    OPFS_RuleUdpWl_Edit              FFS_RuleUdpWl_Edit             基本规则管理-UDP规则-UDP白名单事件：点“编辑”
    OPFS_RuleUdpWl_Del               FFS_RuleUdpWl_Del              基本规则管理-UDP规则-UDP白名单事件：点“删除”
    OPFS_RuleUdpWl_Import            FFS_RuleUdpWl_Import           基本规则管理-UDP规则-UDP白名单事件：点“导入”
    OPFS_RuleUdpWl_Export            FFS_RuleUdpWl_Export           基本规则管理-UDP规则-UDP白名单事件：点“导出”
    OPFS_RuleUdpTrust_List           FFS_RuleUdpTrust_List          基本规则管理-UDP规则-UDP无条件信任事件：刷新 / 点指定页数
    OPFS_RuleUdpTrust_Add            FFS_RuleUdpTrust_Add           基本规则管理-UDP规则-UDP无条件信任事件：点“添加”
    OPFS_RuleUdpTrust_Cls            FFS_RuleUdpTrust_Cls           基本规则管理-UDP规则-UDP无条件信任事件：点“全部删除”
    OPFS_RuleUdpTrust_Edit           FFS_RuleUdpTrust_Edit          基本规则管理-UDP规则-UDP无条件信任事件：点“编辑”
    OPFS_RuleUdpTrust_Del            FFS_RuleUdpTrust_Del           基本规则管理-UDP规则-UDP无条件信任事件：点“删除”
    OPFS_RuleUdpTrust_Import         FFS_RuleUdpTrust_Import        基本规则管理-UDP规则-UDP无条件信任事件：点“导入”
    OPFS_RuleUdpTrust_Export         FFS_RuleUdpTrust_Export        基本规则管理-UDP规则-UDP无条件信任事件：点“导出”
    OPFS_RuleUdpAu_List              FFS_RuleUdpAu_List             基本规则管理-UDP规则-UDP用户自定义事件：刷新 / 点指定页数
    OPFS_RuleUdpAu_Add               FFS_RuleUdpAu_Add              基本规则管理-UDP规则-UDP用户自定义事件：点“添加”
    OPFS_RuleUdpAu_Cls               FFS_RuleUdpAu_Cls              基本规则管理-UDP规则-UDP用户自定义事件：点“全部删除”
    OPFS_RuleUdpAu_Edit              FFS_RuleUdpAu_Edit             基本规则管理-UDP规则-UDP用户自定义事件：点“编辑”
    OPFS_RuleUdpAu_Del               FFS_RuleUdpAu_Del              基本规则管理-UDP规则-UDP用户自定义事件：点“删除”
    OPFS_RuleUdpAu_Import            FFS_RuleUdpAu_Import           基本规则管理-UDP规则-UDP用户自定义事件：点“导入”
    OPFS_RuleUdpAu_Export            FFS_RuleUdpAu_Export           基本规则管理-UDP规则-UDP用户自定义事件：点“导出”
    OPFS_RuleModbusBl_List           FFS_RuleModbusBl_List          工控规则管理-ModbusTCP规则-黑名单事件：刷新 / 点指定页数
    OPFS_RuleModbusBl_Add            FFS_RuleModbusBl_Add           工控规则管理-ModbusTCP规则-黑名单事件：点“添加”
    OPFS_RuleModbusBl_Cls            FFS_RuleModbusBl_Cls           工控规则管理-ModbusTCP规则-黑名单事件：点“全部删除”
    OPFS_RuleModbusBl_Enable         FFS_RuleModbusBl_Enable        工控规则管理-ModbusTCP规则-黑名单事件：点“激活全部”
    OPFS_RuleModbusBl_Disable        FFS_RuleModbusBl_Disable       工控规则管理-ModbusTCP规则-黑名单事件：点“禁用全部”
    OPFS_RuleModbusBl_Edit           FFS_RuleModbusBl_Edit          工控规则管理-ModbusTCP规则-黑名单事件：点“编辑”
    OPFS_RuleModbusBl_Del            FFS_RuleModbusBl_Del           工控规则管理-ModbusTCP规则-黑名单事件：点“删除”
    OPFS_RuleModbusBl_Import         FFS_RuleModbusBl_Import        工控规则管理-ModbusTCP规则-黑名单事件：点“导入”
    OPFS_RuleModbusBl_Export         FFS_RuleModbusBl_Export        工控规则管理-ModbusTCP规则-黑名单事件：点“导出”
    OPFS_RuleModbusWl_List           FFS_RuleModbusWl_List          工控规则管理-ModbusTCP规则-白名单事件：刷新 / 点指定页数
    OPFS_RuleModbusWl_Add            FFS_RuleModbusWl_Add           工控规则管理-ModbusTCP规则-白名单事件：点“添加”
    OPFS_RuleModbusWl_Cls            FFS_RuleModbusWl_Cls           工控规则管理-ModbusTCP规则-白名单事件：点“全部删除”
    OPFS_RuleModbusWl_Enable         FFS_RuleModbusWl_Enable        工控规则管理-ModbusTCP规则-白名单事件：点“激活全部”
    OPFS_RuleModbusWl_Disable        FFS_RuleModbusWl_Disable       工控规则管理-ModbusTCP规则-白名单事件：点“禁用全部”
    OPFS_RuleModbusWl_Edit           FFS_RuleModbusWl_Edit          工控规则管理-ModbusTCP规则-白名单事件：点“编辑”
    OPFS_RuleModbusWl_Del            FFS_RuleModbusWl_Del           工控规则管理-ModbusTCP规则-白名单事件：点“删除”
    OPFS_RuleModbusWl_Import         FFS_RuleModbusWl_Import        工控规则管理-ModbusTCP规则-白名单事件：点“导入”
    OPFS_RuleModbusWl_Export         FFS_RuleModbusWl_Export        工控规则管理-ModbusTCP规则-白名单事件：点“导出”
    OPFS_RuleModbusAu_List           FFS_RuleModbusAu_List          工控规则管理-ModbusTCP规则-用户自定义事件：刷新 / 点指定页数
    OPFS_RuleModbusAu_Add            FFS_RuleModbusAu_Add           工控规则管理-ModbusTCP规则-用户自定义事件：点“添加”
    OPFS_RuleModbusAu_Cls            FFS_RuleModbusAu_Cls           工控规则管理-ModbusTCP规则-用户自定义事件：点“全部删除”
    OPFS_RuleModbusAu_Enable         FFS_RuleModbusAu_Enable        工控规则管理-ModbusTCP规则-用户自定义事件：点“激活全部”
    OPFS_RuleModbusAu_Disable        FFS_RuleModbusAu_Disable       工控规则管理-ModbusTCP规则-用户自定义事件：点“禁用全部”
    OPFS_RuleModbusAu_Edit           FFS_RuleModbusAu_Edit          工控规则管理-ModbusTCP规则-用户自定义事件：点“编辑”
    OPFS_RuleModbusAu_Del            FFS_RuleModbusAu_Del           工控规则管理-ModbusTCP规则-用户自定义事件：点“删除”
    OPFS_RuleModbusAu_Import         FFS_RuleModbusAu_Import        工控规则管理-ModbusTCP规则-用户自定义事件：点“导入”
    OPFS_RuleModbusAu_Export         FFS_RuleModbusAu_Export        工控规则管理-ModbusTCP规则-用户自定义事件：点“导出”
    OPFS_RuleIec104Bl_List           FFS_RuleIec104Bl_List          工控规则管理-IEC104规则-黑名单事件：刷新 / 点指定页数
    OPFS_RuleIec104Bl_Add            FFS_RuleIec104Bl_Add           工控规则管理-IEC104规则-黑名单事件：点“添加”
    OPFS_RuleIec104Bl_Cls            FFS_RuleIec104Bl_Cls           工控规则管理-IEC104规则-黑名单事件：点“全部删除”
    OPFS_RuleIec104Bl_Enable         FFS_RuleIec104Bl_Enable        工控规则管理-IEC104规则-黑名单事件：点“激活全部”
    OPFS_RuleIec104Bl_Disable        FFS_RuleIec104Bl_Disable       工控规则管理-IEC104规则-黑名单事件：点“禁用全部”
    OPFS_RuleIec104Bl_Edit           FFS_RuleIec104Bl_Edit          工控规则管理-IEC104规则-黑名单事件：点“编辑”
    OPFS_RuleIec104Bl_Del            FFS_RuleIec104Bl_Del           工控规则管理-IEC104规则-黑名单事件：点“删除”
    OPFS_RuleIec104Bl_Import         FFS_RuleIec104Bl_Import        工控规则管理-IEC104规则-黑名单事件：点“导入”
    OPFS_RuleIec104Bl_Export         FFS_RuleIec104Bl_Export        工控规则管理-IEC104规则-黑名单事件：点“导出”
    OPFS_RuleIec104Wl_List           FFS_RuleIec104Wl_List          工控规则管理-IEC104规则-白名单事件：刷新 / 点指定页数
    OPFS_RuleIec104Wl_Add            FFS_RuleIec104Wl_Add           工控规则管理-IEC104规则-白名单事件：点“添加”
    OPFS_RuleIec104Wl_Cls            FFS_RuleIec104Wl_Cls           工控规则管理-IEC104规则-白名单事件：点“全部删除”
    OPFS_RuleIec104Wl_Enable         FFS_RuleIec104Wl_Enable        工控规则管理-IEC104规则-白名单事件：点“激活全部”
    OPFS_RuleIec104Wl_Disable        FFS_RuleIec104Wl_Disable       工控规则管理-IEC104规则-白名单事件：点“禁用全部”
    OPFS_RuleIec104Wl_Edit           FFS_RuleIec104Wl_Edit          工控规则管理-IEC104规则-白名单事件：点“编辑”
    OPFS_RuleIec104Wl_Del            FFS_RuleIec104Wl_Del           工控规则管理-IEC104规则-白名单事件：点“删除”
    OPFS_RuleIec104Wl_Import         FFS_RuleIec104Wl_Import        工控规则管理-IEC104规则-白名单事件：点“导入”
    OPFS_RuleIec104Wl_Export         FFS_RuleIec104Wl_Export        工控规则管理-IEC104规则-白名单事件：点“导出”
    OPFS_RuleIec104Au_List           FFS_RuleIec104Au_List          工控规则管理-IEC104规则-用户自定义事件：刷新 / 点指定页数
    OPFS_RuleIec104Au_Add            FFS_RuleIec104Au_Add           工控规则管理-IEC104规则-用户自定义事件：点“添加”
    OPFS_RuleIec104Au_Cls            FFS_RuleIec104Au_Cls           工控规则管理-IEC104规则-用户自定义事件：点“全部删除”
    OPFS_RuleIec104Au_Enable         FFS_RuleIec104Au_Enable        工控规则管理-IEC104规则-用户自定义事件：点“激活全部”
    OPFS_RuleIec104Au_Disable        FFS_RuleIec104Au_Disable       工控规则管理-IEC104规则-用户自定义事件：点“禁用全部”
    OPFS_RuleIec104Au_Edit           FFS_RuleIec104Au_Edit          工控规则管理-IEC104规则-用户自定义事件：点“编辑”
    OPFS_RuleIec104Au_Del            FFS_RuleIec104Au_Del           工控规则管理-IEC104规则-用户自定义事件：点“删除”
    OPFS_RuleIec104Au_Import         FFS_RuleIec104Au_Import        工控规则管理-IEC104规则-用户自定义事件：点“导入”
    OPFS_RuleIec104Au_Export         FFS_RuleIec104Au_Export        工控规则管理-IEC104规则-用户自定义事件：点“导出”
    OPFS_RuleDnp3Bl_List             FFS_RuleDnp3Bl_List            工控规则管理-DNP3规则-黑名单事件：刷新 / 点指定页数
    OPFS_RuleDnp3Bl_Add              FFS_RuleDnp3Bl_Add             工控规则管理-DNP3规则-黑名单事件：点“添加”
    OPFS_RuleDnp3Bl_Cls              FFS_RuleDnp3Bl_Cls             工控规则管理-DNP3规则-黑名单事件：点“全部删除”
    OPFS_RuleDnp3Bl_Enable           FFS_RuleDnp3Bl_Enable          工控规则管理-DNP3规则-黑名单事件：点“激活全部”
    OPFS_RuleDnp3Bl_Disable          FFS_RuleDnp3Bl_Disable         工控规则管理-DNP3规则-黑名单事件：点“禁用全部”
    OPFS_RuleDnp3Bl_Edit             FFS_RuleDnp3Bl_Edit            工控规则管理-DNP3规则-黑名单事件：点“编辑”
    OPFS_RuleDnp3Bl_Del              FFS_RuleDnp3Bl_Del             工控规则管理-DNP3规则-黑名单事件：点“删除”
    OPFS_RuleDnp3Bl_Import           FFS_RuleDnp3Bl_Import          工控规则管理-DNP3规则-黑名单事件：点“导入”
    OPFS_RuleDnp3Bl_Export           FFS_RuleDnp3Bl_Export          工控规则管理-DNP3规则-黑名单事件：点“导出”
    OPFS_RuleDnp3Wl_List             FFS_RuleDnp3Wl_List            工控规则管理-DNP3规则-白名单事件：刷新 / 点指定页数
    OPFS_RuleDnp3Wl_Add              FFS_RuleDnp3Wl_Add             工控规则管理-DNP3规则-白名单事件：点“添加”
    OPFS_RuleDnp3Wl_Cls              FFS_RuleDnp3Wl_Cls             工控规则管理-DNP3规则-白名单事件：点“全部删除”
    OPFS_RuleDnp3Wl_Enable           FFS_RuleDnp3Wl_Enable          工控规则管理-DNP3规则-白名单事件：点“激活全部”
    OPFS_RuleDnp3Wl_Disable          FFS_RuleDnp3Wl_Disable         工控规则管理-DNP3规则-白名单事件：点“禁用全部”
    OPFS_RuleDnp3Wl_Edit             FFS_RuleDnp3Wl_Edit            工控规则管理-DNP3规则-白名单事件：点“编辑”
    OPFS_RuleDnp3Wl_Del              FFS_RuleDnp3Wl_Del             工控规则管理-DNP3规则-白名单事件：点“删除”
    OPFS_RuleDnp3Wl_Import           FFS_RuleDnp3Wl_Import          工控规则管理-DNP3规则-白名单事件：点“导入”
    OPFS_RuleDnp3Wl_Export           FFS_RuleDnp3Wl_Export          工控规则管理-DNP3规则-白名单事件：点“导出”
    OPFS_RuleDnp3Au_List             FFS_RuleDnp3Au_List            工控规则管理-DNP3规则-用户自定义事件：刷新 / 点指定页数
    OPFS_RuleDnp3Au_Add              FFS_RuleDnp3Au_Add             工控规则管理-DNP3规则-用户自定义事件：点“添加”
    OPFS_RuleDnp3Au_Cls              FFS_RuleDnp3Au_Cls             工控规则管理-DNP3规则-用户自定义事件：点“全部删除”
    OPFS_RuleDnp3Au_Enable           FFS_RuleDnp3Au_Enable          工控规则管理-DNP3规则-用户自定义事件：点“激活全部”
    OPFS_RuleDnp3Au_Disable          FFS_RuleDnp3Au_Disable         工控规则管理-DNP3规则-用户自定义事件：点“禁用全部”
    OPFS_RuleDnp3Au_Edit             FFS_RuleDnp3Au_Edit            工控规则管理-DNP3规则-用户自定义事件：点“编辑”
    OPFS_RuleDnp3Au_Del              FFS_RuleDnp3Au_Del             工控规则管理-DNP3规则-用户自定义事件：点“删除”
    OPFS_RuleDnp3Au_Import           FFS_RuleDnp3Au_Import          工控规则管理-DNP3规则-用户自定义事件：点“导入”
    OPFS_RuleDnp3Au_Export           FFS_RuleDnp3Au_Export          工控规则管理-DNP3规则-用户自定义事件：点“导出”
    OPFS_RuleS7Bl_List               FFS_RuleS7Bl_List              工控规则管理-S7规则-黑名单事件：刷新 / 点指定页数
    OPFS_RuleS7Bl_Add                FFS_RuleS7Bl_Add               工控规则管理-S7规则-黑名单事件：点“添加”
    OPFS_RuleS7Bl_Cls                FFS_RuleS7Bl_Cls               工控规则管理-S7规则-黑名单事件：点“全部删除”
    OPFS_RuleS7Bl_Enable             FFS_RuleS7Bl_Enable            工控规则管理-S7规则-黑名单事件：点“激活全部”
    OPFS_RuleS7Bl_Disable            FFS_RuleS7Bl_Disable           工控规则管理-S7规则-黑名单事件：点“禁用全部”
    OPFS_RuleS7Bl_Edit               FFS_RuleS7Bl_Edit              工控规则管理-S7规则-黑名单事件：点“编辑”
    OPFS_RuleS7Bl_Del                FFS_RuleS7Bl_Del               工控规则管理-S7规则-黑名单事件：点“删除”
    OPFS_RuleS7Bl_Import             FFS_RuleS7Bl_Import            工控规则管理-S7规则-黑名单事件：点“导入”
    OPFS_RuleS7Bl_Export             FFS_RuleS7Bl_Export            工控规则管理-S7规则-黑名单事件：点“导出”
    OPFS_RuleS7Wl_List               FFS_RuleS7Wl_List              工控规则管理-S7规则-白名单事件：刷新 / 点指定页数
    OPFS_RuleS7Wl_Add                FFS_RuleS7Wl_Add               工控规则管理-S7规则-白名单事件：点“添加”
    OPFS_RuleS7Wl_Cls                FFS_RuleS7Wl_Cls               工控规则管理-S7规则-白名单事件：点“全部删除”
    OPFS_RuleS7Wl_Enable             FFS_RuleS7Wl_Enable            工控规则管理-S7规则-白名单事件：点“激活全部”
    OPFS_RuleS7Wl_Disable            FFS_RuleS7Wl_Disable           工控规则管理-S7规则-白名单事件：点“禁用全部”
    OPFS_RuleS7Wl_Edit               FFS_RuleS7Wl_Edit              工控规则管理-S7规则-白名单事件：点“编辑”
    OPFS_RuleS7Wl_Del                FFS_RuleS7Wl_Del               工控规则管理-S7规则-白名单事件：点“删除”
    OPFS_RuleS7Wl_Import             FFS_RuleS7Wl_Import            工控规则管理-S7规则-白名单事件：点“导入”
    OPFS_RuleS7Wl_Export             FFS_RuleS7Wl_Export            工控规则管理-S7规则-白名单事件：点“导出”
    OPFS_RuleS7Au_List               FFS_RuleS7Au_List              工控规则管理-S7规则-用户自定义事件：刷新 / 点指定页数
    OPFS_RuleS7Au_Add                FFS_RuleS7Au_Add               工控规则管理-S7规则-用户自定义事件：点“添加”
    OPFS_RuleS7Au_Cls                FFS_RuleS7Au_Cls               工控规则管理-S7规则-用户自定义事件：点“全部删除”
    OPFS_RuleS7Au_Enable             FFS_RuleS7Au_Enable            工控规则管理-S7规则-用户自定义事件：点“激活全部”
    OPFS_RuleS7Au_Disable            FFS_RuleS7Au_Disable           工控规则管理-S7规则-用户自定义事件：点“禁用全部”
    OPFS_RuleS7Au_Edit               FFS_RuleS7Au_Edit              工控规则管理-S7规则-用户自定义事件：点“编辑”
    OPFS_RuleS7Au_Del                FFS_RuleS7Au_Del               工控规则管理-S7规则-用户自定义事件：点“删除”
    OPFS_RuleS7Au_Import             FFS_RuleS7Au_Import            工控规则管理-S7规则-用户自定义事件：点“导入”
    OPFS_RuleS7Au_Export             FFS_RuleS7Au_Export            工控规则管理-S7规则-用户自定义事件：点“导出”
    OPFS_RuleOpcBl_List              FFS_RuleOpcBl_List             工控规则管理-OPC规则-黑名单事件：刷新 / 点指定页数
    OPFS_RuleOpcBl_Add               FFS_RuleOpcBl_Add              工控规则管理-OPC规则-黑名单事件：点“添加”
    OPFS_RuleOpcBl_Cls               FFS_RuleOpcBl_Cls              工控规则管理-OPC规则-黑名单事件：点“全部删除”
    OPFS_RuleOpcBl_Enable            FFS_RuleOpcBl_Enable           工控规则管理-OPC规则-黑名单事件：点“激活全部”
    OPFS_RuleOpcBl_Disable           FFS_RuleOpcBl_Disable          工控规则管理-OPC规则-黑名单事件：点“禁用全部”
    OPFS_RuleOpcBl_Edit              FFS_RuleOpcBl_Edit             工控规则管理-OPC规则-黑名单事件：点“编辑”
    OPFS_RuleOpcBl_Del               FFS_RuleOpcBl_Del              工控规则管理-OPC规则-黑名单事件：点“删除”
    OPFS_RuleOpcBl_Import            FFS_RuleOpcBl_Import           工控规则管理-OPC规则-黑名单事件：点“导入”
    OPFS_RuleOpcBl_Export            FFS_RuleOpcBl_Export           工控规则管理-OPC规则-黑名单事件：点“导出”
    OPFS_RuleOpcWl_List              FFS_RuleOpcWl_List             工控规则管理-OPC规则-白名单事件：刷新 / 点指定页数
    OPFS_RuleOpcWl_Add               FFS_RuleOpcWl_Add              工控规则管理-OPC规则-白名单事件：点“添加”
    OPFS_RuleOpcWl_Cls               FFS_RuleOpcWl_Cls              工控规则管理-OPC规则-白名单事件：点“全部删除”
    OPFS_RuleOpcWl_Enable            FFS_RuleOpcWl_Enable           工控规则管理-OPC规则-白名单事件：点“激活全部”
    OPFS_RuleOpcWl_Disable           FFS_RuleOpcWl_Disable          工控规则管理-OPC规则-白名单事件：点“禁用全部”
    OPFS_RuleOpcWl_Edit              FFS_RuleOpcWl_Edit             工控规则管理-OPC规则-白名单事件：点“编辑”
    OPFS_RuleOpcWl_Del               FFS_RuleOpcWl_Del              工控规则管理-OPC规则-白名单事件：点“删除”
    OPFS_RuleOpcWl_Import            FFS_RuleOpcWl_Import           工控规则管理-OPC规则-白名单事件：点“导入”
    OPFS_RuleOpcWl_Export            FFS_RuleOpcWl_Export           工控规则管理-OPC规则-白名单事件：点“导出”
    OPFS_RuleOpcAu_List              FFS_RuleOpcAu_List             工控规则管理-OPC规则-用户自定义事件：刷新 / 点指定页数
    OPFS_RuleOpcAu_Add               FFS_RuleOpcAu_Add              工控规则管理-OPC规则-用户自定义事件：点“添加”
    OPFS_RuleOpcAu_Cls               FFS_RuleOpcAu_Cls              工控规则管理-OPC规则-用户自定义事件：点“全部删除”
    OPFS_RuleOpcAu_Enable            FFS_RuleOpcAu_Enable           工控规则管理-OPC规则-用户自定义事件：点“激活全部”
    OPFS_RuleOpcAu_Disable           FFS_RuleOpcAu_Disable          工控规则管理-OPC规则-用户自定义事件：点“禁用全部”
    OPFS_RuleOpcAu_Edit              FFS_RuleOpcAu_Edit             工控规则管理-OPC规则-用户自定义事件：点“编辑”
    OPFS_RuleOpcAu_Del               FFS_RuleOpcAu_Del              工控规则管理-OPC规则-用户自定义事件：点“删除”
    OPFS_RuleOpcAu_Import            FFS_RuleOpcAu_Import           工控规则管理-OPC规则-用户自定义事件：点“导入”
    OPFS_RuleOpcAu_Export            FFS_RuleOpcAu_Export           工控规则管理-OPC规则-用户自定义事件：点“导出”
    OPFS_LrnModbus_Start             FFS_LrnModbus_Start            规则学习-ModbusTCP规则事件：点“开始学习”
    OPFS_LrnModbus_End               FFS_LrnModbus_End              规则学习-ModbusTCP规则事件：点“停止学习”
    OPFS_LrnModbus_Edit              FFS_LrnModbus_Edit             规则学习-ModbusTCP规则事件：点“编辑”
    OPFS_LrnModbus_Del               FFS_LrnModbus_Del              规则学习-ModbusTCP规则事件：点“删除”
    OPFS_LrnModbus_Cls               FFS_LrnModbus_Cls              规则学习-ModbusTCP规则事件：点“清空”
    OPFS_LrnIec104_Start             FFS_LrnIec104_Start            规则学习-IEC104规则事件：点“开始学习”
    OPFS_LrnIec104_End               FFS_LrnIec104_End              规则学习-IEC104规则事件：点“停止学习”
    OPFS_LrnIec104_Edit              FFS_LrnIec104_Edit             规则学习-IEC104规则事件：点“编辑”
    OPFS_LrnIec104_Del               FFS_LrnIec104_Del              规则学习-IEC104规则事件：点“删除”
    OPFS_LrnIec104_Cls               FFS_LrnIec104_Cls              规则学习-IEC104规则事件：点“清空”
    OPFS_LrnDnp3_Start               FFS_LrnDnp3_Start              规则学习-DNP3规则事件：点“开始学习”
    OPFS_LrnDnp3_End                 FFS_LrnDnp3_End                规则学习-DNP3规则事件：点“停止学习”
    OPFS_LrnDnp3_Edit                FFS_LrnDnp3_Edit               规则学习-DNP3规则事件：点“编辑”
    OPFS_LrnDnp3_Del                 FFS_LrnDnp3_Del                规则学习-DNP3规则事件：点“删除”
    OPFS_LrnDnp3_Cls                 FFS_LrnDnp3_Cls                规则学习-DNP3规则事件：点“清空”
    OPFS_LrnS7_Start                 FFS_LrnS7_Start                规则学习-S7规则事件：点“开始学习”
    OPFS_LrnS7_End                   FFS_LrnS7_End                  规则学习-S7规则事件：点“停止学习”
    OPFS_LrnS7_Edit                  FFS_LrnS7_Edit                 规则学习-S7规则事件：点“编辑”
    OPFS_LrnS7_Del                   FFS_LrnS7_Del                  规则学习-S7规则事件：点“删除”
    OPFS_LrnS7_Cls                   FFS_LrnS7_Cls                  规则学习-S7规则事件：点“清空”
    OPFS_LrnOpc_Start                FFS_LrnOpc_Start               规则学习-OPC规则事件：点“开始学习”
    OPFS_LrnOpc_End                  FFS_LrnOpc_End                 规则学习-OPC规则事件：点“停止学习”
    OPFS_LrnOpc_Edit                 FFS_LrnOpc_Edit                规则学习-OPC规则事件：点“编辑”
    OPFS_LrnOpc_Del                  FFS_LrnOpc_Del                 规则学习-OPC规则事件：点“删除”
    OPFS_LrnOpc_Cls                  FFS_LrnOpc_Cls                 规则学习-OPC规则事件：点“清空”
    OPFS_LogAll_List                 FFS_LogAll_List                日志管理-全部日志事件：刷新 / 点指定页数
    OPFS_LogAll_Query                FFS_LogAll_Query               日志管理-全部日志事件：点“查询”
    OPFS_LogAll_Cls                  FFS_LogAll_Cls                 日志管理-全部日志事件：点“清空”
    OPFS_LogAll_Del                  FFS_LogAll_Del                 日志管理-全部日志事件：点“删除”
    OPFS_LogAll_Export               FFS_LogAll_Export              日志管理-全部日志事件：点“导出”
    OPFS_LogRuleMac_List             FFS_LogRuleMac_List            日志管理-基本规则告警-MAC黑名单事件：刷新 / 点指定页数
    OPFS_LogRuleMac_Query            FFS_LogRuleMac_Query           日志管理-基本规则告警-MAC黑名单事件：点“查询”
    OPFS_LogRuleMac_Cls              FFS_LogRuleMac_Cls             日志管理-基本规则告警-MAC黑名单事件：点“清空”
    OPFS_LogRuleMac_Del              FFS_LogRuleMac_Del             日志管理-基本规则告警-MAC黑名单事件：点“删除”
    OPFS_LogRuleMac_Export           FFS_LogRuleMac_Export          日志管理-基本规则告警-MAC黑名单事件：点“导出”
    OPFS_LogRuleIp_List              FFS_LogRuleIp_List             日志管理-基本规则告警-IP黑名单事件：刷新 / 点指定页数
    OPFS_LogRuleIp_Query             FFS_LogRuleIp_Query            日志管理-基本规则告警-IP黑名单事件：点“查询”
    OPFS_LogRuleIp_Cls               FFS_LogRuleIp_Cls              日志管理-基本规则告警-IP黑名单事件：点“清空”
    OPFS_LogRuleIp_Del               FFS_LogRuleIp_Del              日志管理-基本规则告警-IP黑名单事件：点“删除”
    OPFS_LogRuleIp_Export            FFS_LogRuleIp_Export           日志管理-基本规则告警-IP黑名单事件：点“导出”
    OPFS_LogRuleSz_List              FFS_LogRuleSz_List             日志管理-基本规则告警-安全域事件：刷新 / 点指定页数
    OPFS_LogRuleSz_Query             FFS_LogRuleSz_Query            日志管理-基本规则告警-安全域事件：点“查询”
    OPFS_LogRuleSz_Cls               FFS_LogRuleSz_Cls              日志管理-基本规则告警-安全域事件：点“清空”
    OPFS_LogRuleSz_Del               FFS_LogRuleSz_Del              日志管理-基本规则告警-安全域事件：点“删除”
    OPFS_LogRuleSz_Export            FFS_LogRuleSz_Export           日志管理-基本规则告警-安全域事件：点“导出”
    OPFS_LogRuleTcp_List             FFS_LogRuleTcp_List            日志管理-基本规则告警-TCP事件：刷新 / 点指定页数
    OPFS_LogRuleTcp_Query            FFS_LogRuleTcp_Query           日志管理-基本规则告警-TCP事件：点“查询”
    OPFS_LogRuleTcp_Cls              FFS_LogRuleTcp_Cls             日志管理-基本规则告警-TCP事件：点“清空”
    OPFS_LogRuleTcp_Del              FFS_LogRuleTcp_Del             日志管理-基本规则告警-TCP事件：点“删除”
    OPFS_LogRuleTcp_Export           FFS_LogRuleTcp_Export          日志管理-基本规则告警-TCP事件：点“导出”
    OPFS_LogRuleUdp_List             FFS_LogRuleUdp_List            日志管理-基本规则告警-UDP事件：刷新 / 点指定页数
    OPFS_LogRuleUdp_Query            FFS_LogRuleUdp_Query           日志管理-基本规则告警-UDP事件：点“查询”
    OPFS_LogRuleUdp_Cls              FFS_LogRuleUdp_Cls             日志管理-基本规则告警-UDP事件：点“清空”
    OPFS_LogRuleUdp_Del              FFS_LogRuleUdp_Del             日志管理-基本规则告警-UDP事件：点“删除”
    OPFS_LogRuleUdp_Export           FFS_LogRuleUdp_Export          日志管理-基本规则告警-UDP事件：点“导出”
    OPFS_LogRuleIndWl_List           FFS_LogRuleIndWl_List          日志管理-工控白名单告警事件：刷新 / 点指定页数
    OPFS_LogRuleIndWl_Query          FFS_LogRuleIndWl_Query         日志管理-工控白名单告警事件：点“查询”
    OPFS_LogRuleIndWl_Cls            FFS_LogRuleIndWl_Cls           日志管理-工控白名单告警事件：点“清空”
    OPFS_LogRuleIndWl_Del            FFS_LogRuleIndWl_Del           日志管理-工控白名单告警事件：点“删除”
    OPFS_LogRuleIndWl_Export         FFS_LogRuleIndWl_Export        日志管理-工控白名单告警事件：点“导出”
    OPFS_LogRuleIndBl_List           FFS_LogRuleIndBl_List          日志管理-工控黑名单告警事件：刷新 / 点指定页数
    OPFS_LogRuleIndBl_Query          FFS_LogRuleIndBl_Query         日志管理-工控黑名单告警事件：点“查询”
    OPFS_LogRuleIndBl_Cls            FFS_LogRuleIndBl_Cls           日志管理-工控黑名单告警事件：点“清空”
    OPFS_LogRuleIndBl_Del            FFS_LogRuleIndBl_Del           日志管理-工控黑名单告警事件：点“删除”
    OPFS_LogRuleIndBl_Export         FFS_LogRuleIndBl_Export        日志管理-工控黑名单告警事件：点“导出”
    OPFS_LogRuleIndEx_List           FFS_LogRuleIndEx_List          日志管理-工控协议规约告警事件：刷新 / 点指定页数
    OPFS_LogRuleIndEx_Query          FFS_LogRuleIndEx_Query         日志管理-工控协议规约告警事件：点“查询”
    OPFS_LogRuleIndEx_Cls            FFS_LogRuleIndEx_Cls           日志管理-工控协议规约告警事件：点“清空”
    OPFS_LogRuleIndEx_Del            FFS_LogRuleIndEx_Del           日志管理-工控协议规约告警事件：点“删除”
    OPFS_LogRuleIndEx_Export         FFS_LogRuleIndEx_Export        日志管理-工控协议规约告警事件：点“导出”
    OPFS_LogArp_List                 FFS_LogArp_List                日志管理-地址欺骗日志事件：刷新 / 点指定页数
    OPFS_LogArp_Query                FFS_LogArp_Query               日志管理-地址欺骗日志事件：点“查询”
    OPFS_LogArp_Cls                  FFS_LogArp_Cls                 日志管理-地址欺骗日志事件：点“清空”
    OPFS_LogArp_Del                  FFS_LogArp_Del                 日志管理-地址欺骗日志事件：点“删除”
    OPFS_LogArp_Export               FFS_LogArp_Export              日志管理-地址欺骗日志事件：点“导出”
    OPFS_LogAttack_List              FFS_LogAttack_List             日志管理-攻击日志事件：刷新 / 点指定页数
    OPFS_LogAttack_Query             FFS_LogAttack_Query            日志管理-攻击日志事件：点“查询”
    OPFS_LogAttack_Cls               FFS_LogAttack_Cls              日志管理-攻击日志事件：点“清空”
    OPFS_LogAttack_Del               FFS_LogAttack_Del              日志管理-攻击日志事件：点“删除”
    OPFS_LogAttack_Export            FFS_LogAttack_Export           日志管理-攻击日志事件：点“导出”
    OPFS_LogRun_List                 FFS_LogRun_List                日志管理-网关运行日志事件：刷新 / 点指定页数
    OPFS_LogRun_Query                FFS_LogRun_Query               日志管理-网关运行日志事件：点“查询”
    OPFS_LogRun_Cls                  FFS_LogRun_Cls                 日志管理-网关运行日志事件：点“清空”
    OPFS_LogRun_Del                  FFS_LogRun_Del                 日志管理-网关运行日志事件：点“删除”
    OPFS_LogRun_Export               FFS_LogRun_Export              日志管理-网关运行日志事件：点“导出”
    OPFS_LogSys_List                 FFS_LogSys_List                日志管理-系统日志事件：刷新 / 点指定页数
    OPFS_LogSys_Query                FFS_LogSys_Query               日志管理-系统日志事件：点“查询”
    OPFS_LogSys_Cls                  FFS_LogSys_Cls                 日志管理-系统日志事件：点“清空”
    OPFS_LogSys_Del                  FFS_LogSys_Del                 日志管理-系统日志事件：点“删除”
    OPFS_LogSys_Export               FFS_LogSys_Export              日志管理-系统日志事件：点“导出”
    OPFS_Conf_Func                   FFS_Conf_Func                  系统设置-功能设置事件：点“保存”
    OPFS_Conf_Warnlevel              FFS_Conf_Warnlevel             系统设置-告警级别设置事件：点“保存”
    OPFS_Conf_AlarmEmail             FFS_Conf_AlarmEmail            系统设置-告警邮箱设置事件：点“保存”
======================================================================================================================================================================================
7.失败原因对照表
======================================================================================================================================================================================

    序号    常量	         错误描述           提示类型    提示文本
    ---------------------------------------------------------------------------
    0       ERR_None             暂无信息           默认        无
    1       ERR_FILE_NOT_EXIST   文件不存在         错误        目标文件不存在
    2       ERR_DIR_NOT_EXIST    目录不存在         错误        目录不存在
    3       ERR_DB_LOCK          数据库被上锁       提示        目标正忙，请稍候重试
    4       ERR_NO_MORE_RES      内存不足           错误        内存不足
    5       ERR_FORBID           禁止访问           错误        禁止访问
    6       ERR_DRIVER_FAILED    驱动未加载         错误        驱动未加载，请联系目标机管理员
    7       ERR_RULE_EXIST       规则已存在         提示        规则已存在
    8       ERR_DB_INVALID       本地数据库无效     错误        本地数据库无效，请检查数据库有效
    9       ERR_INVALID_PARAM    参数错误           错误        参数错误
    10      ERR_HOST_NUM_EXIST   主机编号重复       错误        主机编号重复，请重新输入
    11      ERR_NO_MORE_CONN     超过最大并发量     错误        服务器连接数已达上限
    12      ERR_TRANS_PROBLEM    通信故障           错误        无
    13      ERR_READ_DB          读数据库失败       错误        读数据库失败，请联系目标机管理员
    14      ERR_WRITE_DB         写数据库失败       错误        写数据库失败，请联系目标机管理员
    15      ERR_READ_CONF        读配置文件失败     错误        读配置文件失败，请联系目标机管理员
    16      ERR_WRITE_CONF       写配置文件失败     错误        写配置文件失败，请联系目标机管理员
    255     ERR_UNKNOWN          未知错误           默认        无

======================================================================================================================================================================================
8.客户端数据库表及配置文件定义
======================================================================================================================================================================================

    注意
        1.以下部分只描述重点字段或直观看数据库看不出什么意思的字段
        2.具体全部信息见数据库文件具体表

    部分参考
        proto_type枚举类型
            typedef enum proto_type_e
            {
                PROTO_IP,                   // IP规则
                PROTO_ARP,                  // ARP规则
                PROTO_TCP,                  //
                PROTO_UDP,                  //
                PROTO_ICMP,                 //
                PROTO_MODBUSTCP,            //
                PROTO_S7,                   //
                PROTO_S7PLUS,               //
                PROTO_IEC104,               //
                PROTO_DNP3,                 //
                PROTO_POWERLINK,            //
                PROTO_ETHERCAT,             //
                PROTO_OPC,                  //
                PROTO_CIP,                  //
                PROTO_MMS,                  //
            } proto_type;
        opcode类型
            #define OPCODE_BLACKLIST 0      // 黑名单
            #define OPCODE_WHITELIST 1      // 白名单
            #define OPCODE_AUDIT     2      // 用户审计/用户自定义
            #define OPCODE_TRUST     3      // 无条件信任

    数据库定义
        sec_base.db          // 规则及配置数据库
            baseinfo            // 基本信息表，只有一行数据，id=0
                CREATE TABLE IF NOT EXISTS "baseinfo" (
                    "id" integer primary key AUTOINCREMENT ,   //
                    "serverip" text not null,                  // 统一管理平台服务端IP地址
                    "mode" integer not null,                   // 模式设置（0告警模式 1防护模式）
                    "alarm" integer not null,                  // 是否开启告警音 1开启 0关闭
                    "stat" integer not null,                   // 是否开启会话统计 1开启 0关闭
                    "audit" integer not null,                  // 是否开启审计 1开启 0关闭
                    "dump" integer not null,                   // 是否开启抓包规则 1开启 0关闭（等同抓包规则的激活/禁用）
                    "arp_mode" integer not null,               // ARP规则模式（0告警 1防护）
                    "arp_stat" integer not null,               // 是否开启ARP统计（1开启 0关闭）
                    "pcap_except_log" integer not null,        // 是否开启异常数据包抓包（1开启 0关闭）
                    "dos_detect" integer not null,             // 是否开启DOS防护（1开启 0关闭）
                    "tcp_size" integer not null,               // TCP流表大小（默认15000）
                    "disk_free" integer not null               // 磁盘阈值（磁盘小于此值则删除最早数据）MB
                    );
            conf_email          // 邮件告警配置信息
                CREATE TABLE IF NOT EXISTS "conf_email" (
                    "id" integer primary key,                  //
                    "from_e" text not null,                    // 发件箱
                    "from_pass" text not null,                 // 发件箱密码
                    "to_e" text not null                       // 收件箱
                    );
            conf_iec104         // IEC104配置参数
                CREATE TABLE IF NOT EXISTS "conf_iec104" (
                    "id" integer primary key ,                 //
                    "cause_len" integer not null,              // 传输原因 默认2
                    "commaddr_len" integer not null,           // 公共地址长度 默认2
                    "infoaddr_len" integer not null            // 信息体地址长度 默认3
                    );
            conf_level          // 告警级别配置
                CREATE TABLE IF NOT EXISTS "conf_level" (
                    "id" integer primary key,                  //
                    "mac_bl" integer not null,                 // 告警级别（0不告警-8紧急）：MAC黑名单
                    "ip_bl" integer not null,                  // 告警级别（0不告警-8紧急）：IP黑名单
                    "baseline" integer not null,               // 告警级别（0不告警-8紧急）：流量基线
                    "safezone_l2" integer not null,            // 告警级别（0不告警-8紧急）：2层安全域
                    "safezone_l3" integer not null,            // 告警级别（0不告警-8紧急）：3层安全域
                    "safezone_l4" integer not null,            // 告警级别（0不告警-8紧急）：4层安全域
                    "noflow" integer not null,                 // 告警级别（0不告警-8紧急）：无流量告警
                    "tcp_bl" integer not null,                 // 告警级别（0不告警-8紧急）：TCP黑名单
                    "tcp_wl" integer not null,                 // 告警级别（0不告警-8紧急）：TCP白名单
                    "udp_bl" integer not null,                 // 告警级别（0不告警-8紧急）：UDP黑名单
                    "udp_wl" integer not null,                 // 告警级别（0不告警-8紧急）：UDP白名单
                    "mbtcp_bl" integer not null,               // 告警级别（0不告警-8紧急）：ModbusTCP黑名单
                    "mbtcp_wl" integer not null,               // 告警级别（0不告警-8紧急）：ModbusTCP白名单
                    "iec104_bl" integer not null,              // 告警级别（0不告警-8紧急）：IEC104黑名单
                    "iec104_wl" integer not null,              // 告警级别（0不告警-8紧急）：IEC104白名单
                    "dnp3_bl" integer not null,                // 告警级别（0不告警-8紧急）：DNP3黑名单
                    "dnp3_wl" integer not null,                // 告警级别（0不告警-8紧急）：DNP3白名单
                    "s7_bl" integer not null,                  // 告警级别（0不告警-8紧急）：S7黑名单
                    "s7_wl" integer not null,                  // 告警级别（0不告警-8紧急）：S7白名单
                    "opc_bl" integer not null,                 // 告警级别（0不告警-8紧急）：OPC黑名单
                    "opc_wl" integer not null                  // 告警级别（0不告警-8紧急）：OPC白名单
                    );
            rules_macblacklist  // MAC黑名单
            tbl_arpbind         // ARP规则（ip-mac绑定）
            rules_ipblacklist   // IP黑名单规则
            rules_ipaudit       // IP用户审计/IP用户自定义规则
            rules_layer4        // TCP/UDP规则
                CREATE TABLE IF NOT EXISTS "rules_layer4" (
                    "id" integer primary key,
                    "protocol" integer not null,               // 见proto_type枚举类型
                    "starttime" text not null,                 // 起始时间 00:00 时分，24小时制，不能为其他格式
                    "endtime" text not null,                   // 结束时间 00:00 时分，24小时制，不能为其他格式
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_src_mask" text not null,               // 源IP掩码 x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "ip_dst_mask" text not null,               // 目的IP掩码 x.x.x.x
                    "port_src_start" integer not null,         // 源端口起始 0-65535
                    "port_src_end" integer not null,           // 源端口结束 0-65535
                    "port_dst_start" integer not null,         // 目的端口起始 0-65535
                    "port_dst_end" integer not null,           // 目的端口结束 0-65535
                    "opcode" integer not null,                 // 见opcode类型
                    "log_type" integer not null,               // 始终为0
                    "add_from" integer not null,               // 始终为0
                    "del_flag" integer not null,               // 始终为0
                    "level" integer not null                   // 告警级别（0-8）
                    );
            rules_baseline      // 审计平台-流量基线规则
                CREATE TABLE IF NOT EXISTS "rules_baseline" (
                    "id" integer primary key ,                 //
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "port_dst" integer not null,               // 目的端口 0-65535
                    "txbytes" integer not null,                // 上行字节数
                    "rxbytes" integer not null,                // 下行字节数
                    "seconds" integer not null                 // 秒数
                    );
            rules_noflow        // 审计平台-无流量规则
                CREATE TABLE IF NOT EXISTS "rules_noflow" (
                    "id" integer primary key ,                 //
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "port_dst" integer not null,               // 目的端口 0-65535
                    "seconds" integer not null                 // 秒数
                    );
            rules_dump          // 审计平台-抓包规则
                CREATE TABLE IF NOT EXISTS "rules_dump" (
                    "id" integer primary key AUTOINCREMENT,    //
                    "protocol" integer not null,               // 见proto_type枚举类型
                    "starttime" text not null,                 // 起始时间 00:00 时分，24小时制，不能为其他格式
                    "endtime" text not null,                   // 结束时间 00:00 时分，24小时制，不能为其他格式
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_src_mask" text not null,               // 源IP掩码 x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "ip_dst_mask" text not null,               // 目的IP掩码 x.x.x.x
                    "port_start" integer,                      // 起始端口 0-65535
                    "port_end" integer                         // 结束端口 0-65535
                    );
            rules_mbtcp         // 工控规则管理-ModbusTCP规则
                CREATE TABLE IF NOT EXISTS "rules_mbtcp" (
                    "id" integer primary key,                  //
                    "starttime" text not null,                 // 起始时间 00:00 时分，24小时制，不能为其他格式
                    "endtime" text not null,                   // 结束时间 00:00 时分，24小时制，不能为其他格式
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_src_mask" text not null,               // 源IP掩码 x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "ip_dst_mask" text not null,               // 目的IP掩码 x.x.x.x
                    "func_code" integer not null,              // 功能码
                    "comm_addr_s" integer not null,            // 公共地址起始
                    "comm_addr_e" integer not null,            // 公共地址结束
                    "level" integer not null,                  // 告警级别
                    "opcode" integer not null,                 // 见opcode类型
                    "add_from" integer                         // 始终为0
                    );
            rules_iec104        // 工控规则管理-IEC104规则
                CREATE TABLE IF NOT EXISTS "rules_iec104" (
                    "id" integer primary key,                  //
                    "starttime" text not null,                 // 起始时间 00:00 时分，24小时制，不能为其他格式
                    "endtime" text not null,                   // 结束时间 00:00 时分，24小时制，不能为其他格式
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_src_mask" text not null,               // 源IP掩码 x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "ip_dst_mask" text not null,               // 目的IP掩码 x.x.x.x
                    "comm_addr_s" integer not null,            // 公共地址起始
                    "comm_addr_e" integer not null,            // 公共地址结束
                    "infobj_addr_s" integer not null,          // 信息体地址起始
                    "infobj_addr_e" integer not null,          // 信息体地址结束
                    "level" integer not null,                  // 告警级别
                    "opcode" integer not null,                 // 见opcode类型
                    "add_from" integer                         // 始终为0
                    );
            rules_dnp3          // 工控规则管理-DNP3规则
                CREATE TABLE IF NOT EXISTS "rules_dnp3" (
                    "id" integer primary key,                  //
                    "starttime" text not null,                 // 起始时间 00:00 时分，24小时制，不能为其他格式
                    "endtime" text not null,                   // 结束时间 00:00 时分，24小时制，不能为其他格式
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_src_mask" text not null,               // 源IP掩码 x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "ip_dst_mask" text not null,               // 目的IP掩码 x.x.x.x
                    "addrsrc_s" text not null,                 // 源地址起始
                    "addrsrc_e" text not null,                 // 源地址结束
                    "addrdst_s" text not null,                 // 目的地址起始
                    "addrdst_e" text not null,                 // 目的地址结束
                    "func_code" integer not null,              // 功能码
                    "group_num" integer not null,              // 组号
                    "var_num" integer not null,                // 变体号
                    "level" integer not null,                  // 告警级别
                    "opcode" integer not null,                 // 见opcode类型
                    "match_all" integer not null,              // 是否全匹配（0/1）
                    "add_from" integer                         // 始终为0
                    );
            rules_s7            // 工控规则管理-S7规则
                CREATE TABLE IF NOT EXISTS "rules_s7" (
                    "id" integer primary key,                  //
                    "starttime" text not null,                 // 起始时间 00:00 时分，24小时制，不能为其他格式
                    "endtime" text not null,                   // 结束时间 00:00 时分，24小时制，不能为其他格式
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_src_mask" text not null,               // 源IP掩码 x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "ip_dst_mask" text not null,               // 目的IP掩码 x.x.x.x
                    "rw_attr" integer not null,                // 读写属性
                    "addr_s" integer not null,                 // 起始地址
                    "addr_e" integer not null,                 // 结束地址
                    "regnum" integer not null,                 // 寄存器区
                    "dbnum" integer not null,                  // DB区
                    "dot_type" integer not null,               // 点类型
                    "level" integer not null,                  // 告警级别
                    "opcode" integer not null,                 // 见opcode类型
                    "match_all" integer not null,              // 是否全匹配（0/1）
                    "add_from" integer                         // 始终为0
                    );
            rules_opc           // 工控规则管理-OPC规则
                CREATE TABLE IF NOT EXISTS "rules_opc" (
                    "id" integer primary key,                  //
                    "starttime" text not null,                 // 起始时间 00:00 时分，24小时制，不能为其他格式
                    "endtime" text not null,                   // 结束时间 00:00 时分，24小时制，不能为其他格式
                    "ip_src" text not null,                    // 源IP x.x.x.x
                    "ip_src_mask" text not null,               // 源IP掩码 x.x.x.x
                    "ip_dst" text not null,                    // 目的IP x.x.x.x
                    "ip_dst_mask" text not null,               // 目的IP掩码 x.x.x.x
                    "interface" integer not null,              // 接口ID
                    "method" integer not null,                 // 方法ID
                    "level" integer not null,                  // 告警级别
                    "opcode" integer not null,                 // 见opcode类型
                    "match_all" integer not null,              // 是否全匹配（0/1）
                    "add_from" integer                         // 始终为0
                    );
            safezone_l2         // 安全域-二层（MAC）安全域
                CREATE TABLE IF NOT EXISTS "safezone_l2" (
                    "id" integer primary key ,                 //
                    "mac" text not null,                       // MAC地址，格式为正常MAC地址格式
                    "pri_id" integer not null                  // 外键-safezone_pri.id
                    );
            safezone_l3         // 安全域-三层（IP）安全域
                CREATE TABLE IF NOT EXISTS "safezone_l3" (
                    "id" integer primary key ,                 //
                    "ip" text not null,                        // IP地址（x.x.x.x）
                    "ip_mask" text not null,                   // IP掩码，格式为255.255.255.255（这是个例子）
                    "pri_id" integer not null                  // 外键-safezone_pri.id
                    );
            safezone_l4         // 安全域-四层（传输层）安全域
                CREATE TABLE IF NOT EXISTS "safezone_l4" (
                    "id" integer primary key ,                 //
                    "ip" text not null,                        // IP地址（x.x.x.x）
                    "ip_mask" text not null,                   // IP掩码，格式为255.255.255.255（这是个例子）
                    "port_s" text not null,                    // 端口0-65535
                    "port_e" text not null,                    // 端口0-65535
                    "pri_id" integer not null                  // 外键-safezone_pri.id
                    );
            safezone_pri        // 安全域-安全域优先级配置
                CREATE TABLE IF NOT EXISTS "safezone_pri" (
                    "id" integer primary key AUTOINCREMENT ,   //
                    "name" text not null,                      // 优先级名称
                    "pri" integer not null                     // 优先级（0-100）
                    );
        sec_log.db           // 日志数据库
            log                 // 日志
                CREATE TABLE IF NOT EXISTS "log" (
                    "id" integer primary key AUTOINCREMENT ,                          // ID
                    "time" text not null,                                             // 时间
                    "ipsrc" text not null,                                            // 源IP
                    "ipdst" text not null,                                            // 目的IP
                    "rule_id" integer not null,                                       // 规则ID
                    "level" integer not null,                                         // 告警级别
                    "caption" text not null,                                          // 标题
                    "content" text not null                                           // 内容
                    );
        sec_stat.db          // 统计数据库
            sec_table           // 会话统计
                CREATE TABLE sec_table (
                    id integer primary key,                                           // ID
                    s_ip text,                                                        // 源IP
                    d_ip text,                                                        // 目的IP
                    s_port integer,                                                   // 源端口
                    d_port interger,                                                  // 目的端口
                    p_length integer,                                                 // 数据包长度字节为单位
                    time TimeStamp NOT NULL DEFAULT (datetime('now','localtime')));   // 数据包时间戳
        learn\sec_lr_mbtcp.db
            lr_mbtcp            // 学习模式-ModbusTCP规则
                CREATE TABLE lr_mbtcp(
                    ipsrc integer,                                                    // 源IP
                    ipdst integer,                                                    // 目的IP
                    func_code integer,                                                // 功能码
                    comm_addr integer,                                                // 公共地址
                    PRIMARY KEY (ipsrc,ipdst,func_code,comm_addr));
        learn\sec_lr_iec104.db
            lr_iec104           // 学习模式-IEC104规则
                CREATE TABLE lr_iec104(
                ipsrc integer,                                                        // 源IP
                ipdst integer,                                                        // 目的IP
                comm_addr integer,                                                    // 公共地址
                infobj_addr integer,                                                  // 信息体地址
                PRIMARY KEY (ipsrc,ipdst,comm_addr,infobj_addr));
        learn\sec_lr_dnp3.db
            lr_dnp3             // 学习模式-DNP3规则
                CREATE TABLE lr_dnp3(
                    ipsrc integer,                                                    // 源IP
                    ipdst integer,                                                    // 目的IP
                    func_code integer,                                                // 功能码
                    group_num integer,                                                // 组号
                    var_num integer,                                                  // 变体号
                    PRIMARY KEY (ipsrc,ipdst,func_code,group_num,var_num));
        learn\sec_lr_s7.db
            lr_s7               // 学习模式-S7规则
                CREATE TABLE lr_s7(
                    ipsrc integer,                                                    // 源IP
                    ipdst integer,                                                    // 目的IP
                    rwattr integer,                                                   // 读写属性
                    addr integer,                                                     // 地址
                    regnum integer,                                                   // 寄存器区
                    dbnum integer,                                                    // DB区
                    dot_type integer,                                                 // 点类型
                    PRIMARY KEY (ipsrc,ipdst,rwattr,addr,regnum,dbnum,dot_type));
        learn\sec_lr_opc.db
            lr_opc              // 学习模式-OPC规则

    配置文件定义
        sec_base.conf           // 配置ini文件，用iniparser框架读写
            [base]
            online=true         // 保留
            name=               // 设备名 最大255字符
            connect_time=       // 上线时间 年月日时分秒

